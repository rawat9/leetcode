[
    {
        "timestamp": "2022-06-12 22:15:21",
        "title": "Maximum Erasure Value",
        "title_slug": "maximum-erasure-value",
        "status": "Accepted",
        "lang": "java",
        "runtime": "143 ms",
        "memory": "119 MB",
        "code": "class Solution {\n    public int maximumUniqueSubarray(int[] nums) {\n        int maxScore = 0;\n        int currScore = 0;\n        Set<Integer> set = new HashSet<>();\n\n        for (int l=0, r=0; r < nums.length; r++) {\n            while (!set.add(nums[r])) {\n                currScore -= nums[l];\n                set.remove(nums[l++]);\n            }\n            currScore += nums[r];\n            maxScore = Math.max(maxScore, currScore);\n        }\n        return maxScore;\n    }\n}"
    },
    {
        "timestamp": "2022-06-11 22:43:51",
        "title": "Minimum Operations to Reduce X to Zero",
        "title_slug": "minimum-operations-to-reduce-x-to-zero",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "2153 ms",
        "memory": "27.9 MB",
        "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        target = sum(nums) - x\n        curr_sum, max_len = 0, 0\n        start_idx = 0\n        found = False\n        \n        for end_idx in range(len(nums)):\n            curr_sum += nums[end_idx]\n            \n            while start_idx <= end_idx and curr_sum > target:\n                curr_sum -= nums[start_idx]\n                start_idx += 1\n            if curr_sum == target:\n                found = True\n                max_len = max(max_len, end_idx - start_idx + 1)\n\n        return len(nums) - max_len if found else -1"
    },
    {
        "timestamp": "2022-06-11 15:35:45",
        "title": "Strong Password Checker II",
        "title_slug": "strong-password-checker-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "67 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def strongPasswordCheckerII(self, s: str) -> bool:\n        has_lower = any(x.islower() for x in s)\n        has_upper = any(x.isupper() for x in s)\n        has_special = any(x in \"!@#$%^&*()-+\" for x in s)\n        has_digit = any(x.isdigit() for x in s)\n        \n        for i in range(len(s)-1):\n            if s[i] == s[i+1]:\n                return False\n\n        if not has_lower:\n            return False\n\n        if not has_upper:\n            return False\n\n        if not has_digit:\n            return False\n\n        if not has_special:\n            return False\n\n        if len(s) < 8:\n            return False\n            \n        return True\n\n"
    },
    {
        "timestamp": "2022-06-10 22:57:41",
        "title": "Longest Substring Without Repeating Characters",
        "title_slug": "longest-substring-without-repeating-characters",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "112 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        counter = defaultdict(int)  \n        l = 0\n        max_length = 0\n        for r, c in enumerate(s):\n            counter[c]+=1            \n            if counter[c] > 1:                \n                while l<r and counter[c] > 1:\n                    counter[s[l]]-=1\n                    l+=1\n                    \n            max_length=max(max_length, r-l+1)\n        return max_length"
    },
    {
        "timestamp": "2022-06-09 19:10:07",
        "title": "Lemonade Change",
        "title_slug": "lemonade-change",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1458 ms",
        "memory": "18.2 MB",
        "code": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        five, ten = 0, 0\n        \n        for bill in bills:\n            if bill == 5:\n                five += 1\n            elif bill == 10:\n                if five == 0:\n                    return False\n                five -= 1\n                ten += 1\n            else:\n                if five > 0 and ten > 0:\n                    five -= 1\n                    ten -= 1\n                elif five >= 3:\n                    five -= 3\n                else:\n                    return False\n                \n        return True"
    },
    {
        "timestamp": "2022-06-09 15:33:12",
        "title": "Seat Reservation Manager",
        "title_slug": "seat-reservation-manager",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "556 ms",
        "memory": "41.5 MB",
        "code": "class SeatManager:\n\n    def __init__(self, n: int):\n        self.seats = list(range(1, n + 1))\n\n    def reserve(self) -> int:\n        return heappop(self.seats)\n\n    def unreserve(self, seatNumber: int) -> None:\n        heappush(self.seats, seatNumber)\n\n\n# Your SeatManager object will be instantiated and called as such:\n# obj = SeatManager(n)\n# param_1 = obj.reserve()\n# obj.unreserve(seatNumber)"
    },
    {
        "timestamp": "2022-06-09 09:11:29",
        "title": "Two Sum II - Input Array Is Sorted",
        "title_slug": "two-sum-ii-input-array-is-sorted",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "45.3 MB",
        "code": "class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int i = 0, j = numbers.length - 1;\n        \n        while (numbers[i] + numbers[j] != target) {\n            if (numbers[i] + numbers[j] > target) {\n                j -= 1;\n            }\n            else {\n                i += 1;\n            }\n        }\n        return new int[] {i+1, j+1};\n    }\n}"
    },
    {
        "timestamp": "2022-06-09 08:59:29",
        "title": "Two Sum II - Input Array Is Sorted",
        "title_slug": "two-sum-ii-input-array-is-sorted",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "191 ms",
        "memory": "14.9 MB",
        "code": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        i, j = 0, len(numbers)-1\n\n        while i < len(numbers) and j < len(numbers):\n            if numbers[i] + numbers[j] > target:\n                j -= 1\n            elif numbers[i] + numbers[j] < target:\n                i += 1\n            else:\n                return [i+1,j+1]\n"
    },
    {
        "timestamp": "2022-06-08 20:40:11",
        "title": "Remove Palindromic Subsequences",
        "title_slug": "remove-palindromic-subsequences",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "43 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        return 1 if s == s[::-1] else 2"
    },
    {
        "timestamp": "2022-06-07 07:29:58",
        "title": "Merge Sorted Array",
        "title_slug": "merge-sorted-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "38 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        nums1[m:] = nums2\n        nums1.sort()\n"
    },
    {
        "timestamp": "2022-06-06 21:12:37",
        "title": "Intersection of Two Linked Lists",
        "title_slug": "intersection-of-two-linked-lists",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "266 ms",
        "memory": "29.6 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        a1 = headA\n        b1 = headB\n\n        while a1 != b1:\n            a1 = headB if a1 is None else a1.next\n            b1 = headA if b1 is None else b1.next\n        return a1"
    },
    {
        "timestamp": "2022-06-06 21:08:47",
        "title": "Smallest Range II",
        "title_slug": "smallest-range-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "247 ms",
        "memory": "15.1 MB",
        "code": "class Solution:\n    def smallestRangeII(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        max_a, max_b = nums[0], nums[-1]\n        ans = max_b - max_a\n        \n        for i in range(len(nums)-1):\n            a, b = nums[i], nums[i+1]\n            ans = min(ans, max(max_b-k, a+k) - min(max_a+k,b-k))\n\n        return ans"
    },
    {
        "timestamp": "2022-06-05 22:28:27",
        "title": "N-Queens II",
        "title_slug": "n-queens-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "76 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        state= [[\".\"] * n for _ in range(n)] # start with empty board\n        \n        res=[]\n        \n        visited_cols=set()        \n        visited_diagonals=set()\n\n        visited_antidiagonals=set()\n        \n        def backtrack(r):\n            if r==n:                \n                res.append([\"\".join(row) for row in state])\n                return\n            \n            for c in range(n):\n                diff=r-c\n                _sum=r+c\n                \n                if not (c in visited_cols or diff in visited_diagonals or _sum in visited_antidiagonals):                    \n                    visited_cols.add(c)\n                    visited_diagonals.add(diff)\n                    visited_antidiagonals.add(_sum)\n                    state[r][c]='Q' \n                    backtrack(r+1) \n\n                    # reset the path\n                    visited_cols.remove(c)\n                    visited_diagonals.remove(diff)\n                    visited_antidiagonals.remove(_sum)\n                    state[r][c]='.'                                \n\n        backtrack(0)\n        return len(res)"
    },
    {
        "timestamp": "2022-06-05 20:28:54",
        "title": "Range Sum Query 2D - Immutable",
        "title_slug": "range-sum-query-2d-immutable",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2009 ms",
        "memory": "135.6 MB",
        "code": "class NumMatrix {\n    \n    private int[][] grid;\n\n    public NumMatrix(int[][] matrix) {\n        grid = matrix;\n    }\n    \n    public int sumRegion(int row1, int col1, int row2, int col2) {  \n        int sum = 0;\n        for (int i = row1; i <= row2; i++) {\n            for (int j = col1; j <= col2; j++) {\n                sum += grid[i][j];\n            }\n        }\n        return sum;\n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * NumMatrix obj = new NumMatrix(matrix);\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\n */"
    },
    {
        "timestamp": "2022-06-04 21:55:53",
        "title": "N-Queens",
        "title_slug": "n-queens",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "52 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        state= [[\".\"] * n for _ in range(n)] # start with empty board\n        \n        res=[]\n        \n        visited_cols=set()        \n        visited_diagonals=set()\n\n        visited_antidiagonals=set()\n        \n        def backtrack(r):\n            if r==n:                \n                res.append([\"\".join(row) for row in state])\n                return\n            \n            for c in range(n):\n                diff=r-c\n                _sum=r+c\n                \n                if not (c in visited_cols or diff in visited_diagonals or _sum in visited_antidiagonals):                    \n                    visited_cols.add(c)\n                    visited_diagonals.add(diff)\n                    visited_antidiagonals.add(_sum)\n                    state[r][c]='Q' \n                    backtrack(r+1) \n\n                    # reset the path\n                    visited_cols.remove(c)\n                    visited_diagonals.remove(diff)\n                    visited_antidiagonals.remove(_sum)\n                    state[r][c]='.'                                \n\n        backtrack(0)\n        return res"
    },
    {
        "timestamp": "2022-06-04 21:55:51",
        "title": "Find All Anagrams in a String",
        "title_slug": "find-all-anagrams-in-a-string",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "216 ms",
        "memory": "15.3 MB",
        "code": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        hmap = defaultdict(int)\n        ans = []\n        n, m = len(s), len(p)\n        if m > n: return []\n        \n        for char in p:\n            hmap[char] += 1\n        \n        for i in range(m-1):\n            if s[i] in hmap:\n                hmap[s[i]] -= 1\n                \n        # sliding window with stride 1\n        for i in range(-1, n-m+1):\n            if i > -1 and s[i] in hmap:\n                hmap[s[i]] += 1\n            if i+m < n and s[i+m] in hmap: \n                hmap[s[i+m]] -= 1\n                \n            # check whether we encountered an anagram\n            if all(v == 0 for v in hmap.values()): \n                ans.append(i+1)\n                \n        return ans"
    },
    {
        "timestamp": "2022-06-04 18:13:32",
        "title": "Apply Discount to Prices",
        "title_slug": "apply-discount-to-prices",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "251 ms",
        "memory": "16 MB",
        "code": "class Solution:\n    def discountPrices(self, sentence: str, discount: int) -> str:\n        words = sentence.split()\n        calc_price = lambda cost, discount: cost * (discount / 100)\n\n        for i, w in enumerate(words):\n            if w.startswith(\"$\"):\n                current = w[1:]\n                if current and \"$\" not in current and current.isdigit():\n                    words[i] = f'${int(current) - calc_price(int(current), discount):.2f}'\n\n        return \" \".join(words)"
    },
    {
        "timestamp": "2022-06-04 13:36:06",
        "title": "Find the Middle Index in Array",
        "title_slug": "find-the-middle-index-in-array",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "42.6 MB",
        "code": "class Solution {\n    public int findMiddleIndex(int[] nums) {\n        int sum = 0, leftSum = 0;\n        \n        for (int num : nums) {\n            sum += num;\n        }\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (leftSum == sum - leftSum - nums[i]) return i;\n            leftSum += nums[i];\n        }\n        return -1;\n    }\n}"
    },
    {
        "timestamp": "2022-06-03 20:59:52",
        "title": "Find Pivot Index",
        "title_slug": "find-pivot-index",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "52 MB",
        "code": "class Solution {\n    public int pivotIndex(int[] nums) {\n        int n = nums.length;\n        int leftSum = 0, sum = 0;\n        \n        for (int num : nums) sum += num;\n        \n        for (int i = 0; i < n; i++) {\n            int rightSum = sum - leftSum - nums[i];\n            if (leftSum == rightSum) return i;\n            leftSum += nums[i];\n        }\n        \n        return -1;\n    }\n}"
    },
    {
        "timestamp": "2022-06-03 20:59:15",
        "title": "Find Pivot Index",
        "title_slug": "find-pivot-index",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "52 MB",
        "code": "class Solution {\n    public int pivotIndex(int[] nums) {\n        int n = nums.length;\n        int leftSum = 0;\n        \n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        \n        for (int i = 0; i < n; i++) {\n            int rightSum = sum - leftSum - nums[i];\n            if (leftSum == rightSum) return i;\n            leftSum += nums[i];\n        }\n        \n        return -1;\n    }\n}"
    },
    {
        "timestamp": "2022-06-03 09:20:09",
        "title": "Range Sum Query 2D - Immutable",
        "title_slug": "range-sum-query-2d-immutable",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2343 ms",
        "memory": "133.4 MB",
        "code": "class NumMatrix {\n    \n    private int[][] grid;\n\n    public NumMatrix(int[][] matrix) {\n        grid = matrix;\n    }\n    \n    public int sumRegion(int row1, int col1, int row2, int col2) {  \n        int sum = 0;\n        for (int i = row1; i <= row2; i++) {\n            for (int j = col1; j <= col2; j++) {\n                sum += grid[i][j];\n            }\n        }\n        return sum;\n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * NumMatrix obj = new NumMatrix(matrix);\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\n */"
    },
    {
        "timestamp": "2022-06-02 20:59:41",
        "title": "Transpose Matrix",
        "title_slug": "transpose-matrix",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "42.7 MB",
        "code": "class Solution {\n    public int[][] transpose(int[][] matrix) {\n        int R = matrix.length, C = matrix[0].length;\n        int[][] res = new int[C][R];\n        \n        for (int i = 0; i < R; i++) {\n            for (int j = 0; j < C; j++) {\n                res[j][i] = matrix[i][j];\n            }\n        }\n        return res;\n    }\n}"
    },
    {
        "timestamp": "2022-06-01 11:21:21",
        "title": "Running Sum of 1d Array",
        "title_slug": "running-sum-of-1d-array",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "42.8 MB",
        "code": "class Solution {\n    public int[] runningSum(int[] nums) {\n        for (int i = 1; i < nums.length; i++) {\n            nums[i] += nums[i-1];\n        }\n        return nums;\n    }\n}"
    },
    {
        "timestamp": "2022-06-01 10:21:21",
        "title": "Running Sum of 1d Array",
        "title_slug": "running-sum-of-1d-array",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "42.8 MB",
        "code": "class Solution {\n    public int[] runningSum(int[] nums) {\n        for (int i = 1; i < nums.length; i++) {\n            nums[i] += nums[i-1];\n        }\n        return nums;\n    }\n}"
    },
    {
        "timestamp": "2022-05-31 22:19:43",
        "title": "Check If a String Contains All Binary Codes of Size K",
        "title_slug": "check-if-a-string-contains-all-binary-codes-of-size-k",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "459 ms",
        "memory": "27.2 MB",
        "code": "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        got = {s[i - k : i] for i in range(k, len(s) + 1)}\n        return len(got) == 1 << k"
    },
    {
        "timestamp": "2022-05-31 21:19:43",
        "title": "Check If a String Contains All Binary Codes of Size K",
        "title_slug": "check-if-a-string-contains-all-binary-codes-of-size-k",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "459 ms",
        "memory": "27.2 MB",
        "code": "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        got = {s[i - k : i] for i in range(k, len(s) + 1)}\n        return len(got) == 1 << k"
    },
    {
        "timestamp": "2022-05-31 12:34:10",
        "title": "K Closest Points to Origin",
        "title_slug": "k-closest-points-to-origin",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1115 ms",
        "memory": "20.5 MB",
        "code": "class Solution:\n    def distance(self, point):\n        return point[0] ** 2 + point[1] ** 2\n\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        points.sort(key=self.distance) \n        return points[:k]\n"
    },
    {
        "timestamp": "2022-05-31 11:34:10",
        "title": "K Closest Points to Origin",
        "title_slug": "k-closest-points-to-origin",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1115 ms",
        "memory": "20.5 MB",
        "code": "class Solution:\n    def distance(self, point):\n        return point[0] ** 2 + point[1] ** 2\n\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        points.sort(key=self.distance) \n        return points[:k]\n"
    },
    {
        "timestamp": "2022-05-30 21:49:58",
        "title": "Divide Two Integers",
        "title_slug": "divide-two-integers",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "41.7 MB",
        "code": "class Solution {\n    public int divide(int A, int B) {\n        if (A == 1 << 31 && B == -1) return (1 << 31) - 1;\n        int a = Math.abs(A), b = Math.abs(B), res = 0, x = 0;\n        while (a - b >= 0) {\n            for (x = 0; a - (b << x << 1) >= 0; x++);\n            res += 1 << x;\n            a -= b << x;\n        }\n        return (A > 0) == (B > 0) ? res : -res;\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 20:49:58",
        "title": "Divide Two Integers",
        "title_slug": "divide-two-integers",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "41.7 MB",
        "code": "class Solution {\n    public int divide(int A, int B) {\n        if (A == 1 << 31 && B == -1) return (1 << 31) - 1;\n        int a = Math.abs(A), b = Math.abs(B), res = 0, x = 0;\n        while (a - b >= 0) {\n            for (x = 0; a - (b << x << 1) >= 0; x++);\n            res += 1 << x;\n            a -= b << x;\n        }\n        return (A > 0) == (B > 0) ? res : -res;\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 20:11:48",
        "title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "title_slug": "determine-whether-matrix-can-be-obtained-by-rotation",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "42.9 MB",
        "code": "class Solution {\n    /*\n          0        90        180       270       360\n        00 01 --> 10 00 --> 11 10 --> 01 11 --> 00 01\n        10 11     11 01     01 00     00 10     10 11\n        \n        # Step1. Reverse\n        10 11\n        00 01\n        \n        # Step2. Transpose\n        10 00\n        11 01\n        \n    */\n    public boolean findRotation(int[][] mat, int[][] target) {\n        for (int i = 0; i < 4; i++) {\n            if (compare(mat, target))\n                return true;\n            // Reverse the matrix\n            reverse(mat);\n\n            // Transpose\n            transpose(mat);\n        }\n        return false;\n    }\n    \n    public static boolean compare(int[][] mat, int[][] target) {\n        int n = mat.length;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] != target[i][j])\n                    return false;  \n            }\n        }\n        return true;\n    }\n    \n    public static void transpose(int[][] mat) {\n        int n = mat.length;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n                int temp = mat[i][j];\n                mat[i][j] = mat[j][i];\n                mat[j][i] = temp;\n            }\n        }\n    }\n    \n    public static void reverse(int[][] mat) {\n        int n = mat.length;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < n / 2; i++) {\n                int temp = mat[j][i];\n                mat[j][i] = mat[j][n-i-1];\n                mat[j][n-i-1] = temp;\n            }\n        }\n    }\n    \n    public static void traverse(int[][] mat) {\n        int n = mat.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                System.out.print(mat[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 20:07:58",
        "title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "title_slug": "determine-whether-matrix-can-be-obtained-by-rotation",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "42.3 MB",
        "code": "class Solution {\n    /*\n          0        90        180       270       360\n        00 01 --> 10 00 --> 11 10 --> 01 11 --> 00 01\n        10 11     11 01     01 00     00 10     10 11\n        \n        # Step1. Reverse\n        10 11\n        00 01\n        \n        # Step2. Transpose\n        10 00\n        11 01\n        \n    */\n    public boolean findRotation(int[][] mat, int[][] target) {\n        for (int i = 0; i < 4; i++) {\n            if (compare(mat, target)) {\n                return true;\n            } else {\n                // Reverse the matrix\n                reverse(mat);\n\n                // Transpose\n                transpose(mat);\n            }\n        }\n        return false;\n    }\n    \n    public static boolean compare(int[][] mat, int[][] target) {\n        int n = mat.length;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] != target[i][j])\n                    return false;  \n            }\n        }\n        return true;\n    }\n    \n    public static void transpose(int[][] mat) {\n        int n = mat.length;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n                int temp = mat[i][j];\n                mat[i][j] = mat[j][i];\n                mat[j][i] = temp;\n            }\n        }\n    }\n    \n    public static void reverse(int[][] mat) {\n        int n = mat.length;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < n / 2; i++) {\n                int temp = mat[j][i];\n                mat[j][i] = mat[j][n-i-1];\n                mat[j][n-i-1] = temp;\n            }\n        }\n    }\n    \n    public static void traverse(int[][] mat) {\n        int n = mat.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                System.out.print(mat[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 19:11:48",
        "title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "title_slug": "determine-whether-matrix-can-be-obtained-by-rotation",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "42.9 MB",
        "code": "class Solution {\n    /*\n          0        90        180       270       360\n        00 01 --> 10 00 --> 11 10 --> 01 11 --> 00 01\n        10 11     11 01     01 00     00 10     10 11\n        \n        # Step1. Reverse\n        10 11\n        00 01\n        \n        # Step2. Transpose\n        10 00\n        11 01\n        \n    */\n    public boolean findRotation(int[][] mat, int[][] target) {\n        for (int i = 0; i < 4; i++) {\n            if (compare(mat, target))\n                return true;\n            // Reverse the matrix\n            reverse(mat);\n\n            // Transpose\n            transpose(mat);\n        }\n        return false;\n    }\n    \n    public static boolean compare(int[][] mat, int[][] target) {\n        int n = mat.length;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] != target[i][j])\n                    return false;  \n            }\n        }\n        return true;\n    }\n    \n    public static void transpose(int[][] mat) {\n        int n = mat.length;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n                int temp = mat[i][j];\n                mat[i][j] = mat[j][i];\n                mat[j][i] = temp;\n            }\n        }\n    }\n    \n    public static void reverse(int[][] mat) {\n        int n = mat.length;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < n / 2; i++) {\n                int temp = mat[j][i];\n                mat[j][i] = mat[j][n-i-1];\n                mat[j][n-i-1] = temp;\n            }\n        }\n    }\n    \n    public static void traverse(int[][] mat) {\n        int n = mat.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                System.out.print(mat[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 19:09:04",
        "title": "Rotate Image",
        "title_slug": "rotate-image",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "42.3 MB",
        "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        transpose(matrix);\n        reverse(matrix);\n    }\n    \n    public void transpose(int[][] matrix) {\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = i+1; j < matrix.length; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n    \n    public void reverse(int[][] matrix) {\n        int n = matrix.length;\n        \n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[i][n- j -1];\n                matrix[i][n-j-1] = temp;\n            }\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 19:08:40",
        "title": "Rotate Image",
        "title_slug": "rotate-image",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "43 MB",
        "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        transpose(matrix);\n        reverse(matrix);\n    }\n    \n    public void transpose(int[][] matrix) {\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = i+1; j < matrix.length; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n    \n    public void reverse(int[][] matrix) {\n        int n = matrix.length;\n        \n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[i][n- j -1];\n                matrix[i][n-j-1] = temp;\n            }\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 19:07:58",
        "title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "title_slug": "determine-whether-matrix-can-be-obtained-by-rotation",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "42.3 MB",
        "code": "class Solution {\n    /*\n          0        90        180       270       360\n        00 01 --> 10 00 --> 11 10 --> 01 11 --> 00 01\n        10 11     11 01     01 00     00 10     10 11\n        \n        # Step1. Reverse\n        10 11\n        00 01\n        \n        # Step2. Transpose\n        10 00\n        11 01\n        \n    */\n    public boolean findRotation(int[][] mat, int[][] target) {\n        for (int i = 0; i < 4; i++) {\n            if (compare(mat, target)) {\n                return true;\n            } else {\n                // Reverse the matrix\n                reverse(mat);\n\n                // Transpose\n                transpose(mat);\n            }\n        }\n        return false;\n    }\n    \n    public static boolean compare(int[][] mat, int[][] target) {\n        int n = mat.length;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] != target[i][j])\n                    return false;  \n            }\n        }\n        return true;\n    }\n    \n    public static void transpose(int[][] mat) {\n        int n = mat.length;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n                int temp = mat[i][j];\n                mat[i][j] = mat[j][i];\n                mat[j][i] = temp;\n            }\n        }\n    }\n    \n    public static void reverse(int[][] mat) {\n        int n = mat.length;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < n / 2; i++) {\n                int temp = mat[j][i];\n                mat[j][i] = mat[j][n-i-1];\n                mat[j][n-i-1] = temp;\n            }\n        }\n    }\n    \n    public static void traverse(int[][] mat) {\n        int n = mat.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                System.out.print(mat[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 18:09:04",
        "title": "Rotate Image",
        "title_slug": "rotate-image",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "42.3 MB",
        "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        transpose(matrix);\n        reverse(matrix);\n    }\n    \n    public void transpose(int[][] matrix) {\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = i+1; j < matrix.length; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n    \n    public void reverse(int[][] matrix) {\n        int n = matrix.length;\n        \n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[i][n- j -1];\n                matrix[i][n-j-1] = temp;\n            }\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 18:08:40",
        "title": "Rotate Image",
        "title_slug": "rotate-image",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "43 MB",
        "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        transpose(matrix);\n        reverse(matrix);\n    }\n    \n    public void transpose(int[][] matrix) {\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = i+1; j < matrix.length; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n    \n    public void reverse(int[][] matrix) {\n        int n = matrix.length;\n        \n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[i][n- j -1];\n                matrix[i][n-j-1] = temp;\n            }\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-05-30 10:05:09",
        "title": "Length of Last Word",
        "title_slug": "length-of-last-word",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "41 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        return len(s.split()[-1])"
    },
    {
        "timestamp": "2022-05-30 10:02:19",
        "title": "Maximum Product of Word Lengths",
        "title_slug": "maximum-product-of-word-lengths",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "5659 ms",
        "memory": "19 MB",
        "code": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        return max([len(s1) * len(s2) for s1, s2 in combinations(words, 2)  if not (set(s1) & set(s2))], default=0)"
    },
    {
        "timestamp": "2022-05-30 09:05:09",
        "title": "Length of Last Word",
        "title_slug": "length-of-last-word",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "41 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        return len(s.split()[-1])"
    },
    {
        "timestamp": "2022-05-30 09:02:19",
        "title": "Maximum Product of Word Lengths",
        "title_slug": "maximum-product-of-word-lengths",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "5659 ms",
        "memory": "19 MB",
        "code": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        return max([len(s1) * len(s2) for s1, s2 in combinations(words, 2)  if not (set(s1) & set(s2))], default=0)"
    },
    {
        "timestamp": "2022-05-29 12:02:56",
        "title": "Sales Analysis III",
        "title_slug": "sales-analysis-iii",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "1111 ms",
        "memory": "0B",
        "code": "SELECT\n\ts.product_id,\n\tproduct_name\nFROM\n\tsales s\n\tINNER JOIN product p ON p.product_id = s.product_id\nGROUP BY\n\t1, 2\nHAVING\n\tMIN(sale_date) >= '2019-01-01'\n\tAND MAX(sale_date) <= '2019-03-31'"
    },
    {
        "timestamp": "2022-05-29 11:02:56",
        "title": "Sales Analysis III",
        "title_slug": "sales-analysis-iii",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "1111 ms",
        "memory": "0B",
        "code": "SELECT\n\ts.product_id,\n\tproduct_name\nFROM\n\tsales s\n\tINNER JOIN product p ON p.product_id = s.product_id\nGROUP BY\n\t1, 2\nHAVING\n\tMIN(sale_date) >= '2019-01-01'\n\tAND MAX(sale_date) <= '2019-03-31'"
    },
    {
        "timestamp": "2022-05-29 10:52:51",
        "title": "Bank Account Summary II",
        "title_slug": "bank-account-summary-ii",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "981 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT name, SUM(amount) as balance FROM Users as u\nINNER JOIN Transactions as t\nON u.account = t.account\nGROUP BY name\nHAVING SUM(amount) > 10000;"
    },
    {
        "timestamp": "2022-05-29 10:45:31",
        "title": "Actors and Directors Who Cooperated At Least Three Times",
        "title_slug": "actors-and-directors-who-cooperated-at-least-three-times",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1277 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT actor_id, director_id FROM ActorDirector\nGROUP BY actor_id, director_id\nHAVING COUNT(actor_id) >= 3 AND COUNT(director_id) >= 3;"
    },
    {
        "timestamp": "2022-05-29 10:22:23",
        "title": "Duplicate Emails",
        "title_slug": "duplicate-emails",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "743 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\n-- SELECT email FROM \n-- (SELECT email, COUNT(email) as cnt FROM Person GROUP BY email) x\n-- WHERE cnt > 1;\n\nSELECT email FROM Person\nGROUP BY email\nHAVING count(email) > 1"
    },
    {
        "timestamp": "2022-05-28 18:47:40",
        "title": "Market Analysis I",
        "title_slug": "market-analysis-i",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "1235 ms",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nSELECT user_id as buyer_id, join_date, \nCOUNT(CASE WHEN YEAR(order_date) = 2019 THEN buyer_id END) orders_in_2019 \nFROM Users u\nLEFT JOIN Orders o\nON u.user_id = o.buyer_id\nGROUP BY user_id;\n"
    },
    {
        "timestamp": "2022-05-28 17:59:39",
        "title": "Top Travellers",
        "title_slug": "top-travellers",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1102 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT name, IIF(sum(distance) IS NULL, 0, sum(distance)) as travelled_distance FROM Users as u\nLEFT JOIN Rides as r\nON u.id = r.user_id\nGROUP BY name\nORDER BY sum(distance) DESC, name ASC;"
    },
    {
        "timestamp": "2022-05-28 17:50:14",
        "title": "Capital Gain/Loss",
        "title_slug": "capital-gainloss",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "418 ms",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nSelect stock_name, \nsum(case operation when 'Sell' then price end) -  \nsum(case operation when 'Buy' then price end) as capital_gain_loss\nFROM Stocks\ngroup by stock_name;"
    },
    {
        "timestamp": "2022-05-28 17:50:00",
        "title": "Capital Gain/Loss",
        "title_slug": "capital-gainloss",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "545 ms",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nSelect stock_name, \nsum(case operation when 'Sell' then price end) -  \nsum(case operation when 'Buy' then price end) as capital_gain_loss\nFROM Stocks\ngroup by stock_name;"
    },
    {
        "timestamp": "2022-05-28 17:49:15",
        "title": "Capital Gain/Loss",
        "title_slug": "capital-gainloss",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1743 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSelect stock_name, \nsum(case operation when 'Sell' then price end) -  \nsum(case operation when 'Buy' then price end) as capital_gain_loss\nFROM Stocks\ngroup by stock_name;"
    },
    {
        "timestamp": "2022-05-28 17:47:29",
        "title": "Capital Gain/Loss",
        "title_slug": "capital-gainloss",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "2827 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSelect stock_name, \nsum(case operation when 'Sell' then p end) -  \nsum(case operation when 'Buy' then p end) as capital_gain_loss\nfrom (\nSELECT stock_name,operation,sum(price) as p\nFROM Stocks\ngroup by stock_name,operation) as tt\ngroup by stock_name\n;"
    },
    {
        "timestamp": "2022-05-28 15:42:18",
        "title": "Check if Number Has Equal Digit Count and Digit Value",
        "title_slug": "check-if-number-has-equal-digit-count-and-digit-value",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "51 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def digitCount(self, num: str) -> bool:\n        for i in range(len(num)):\n            if num.count(str(i)) != int(num[i]):\n                return False\n            \n        return True"
    },
    {
        "timestamp": "2022-05-28 15:10:43",
        "title": "Missing Number",
        "title_slug": "missing-number",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "52.3 MB",
        "code": "class Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int expectedSum = (n * (n+1)) / 2;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n        }\n        return expectedSum - currentSum;\n    }\n}"
    },
    {
        "timestamp": "2022-05-27 22:08:17",
        "title": "Find the K-Beauty of a Number",
        "title_slug": "find-the-k-beauty-of-a-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "29 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def divisorSubstrings(self, num: int, k: int) -> int:\n        s = str(num)\n        ans = 0\n\n        for i in range(len(s)-k+1):\n            val = int(s[i:i+k])\n            if val > 0 and num % val == 0:\n                ans += 1\n\n        return ans"
    },
    {
        "timestamp": "2022-05-27 13:07:09",
        "title": "Find Total Time Spent by Each Employee",
        "title_slug": "find-total-time-spent-by-each-employee",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "652 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT event_day as day, emp_id, sum(out_time) - sum(in_time) as total_time FROM Employees\nGROUP BY event_day, emp_id;"
    },
    {
        "timestamp": "2022-05-27 13:00:06",
        "title": "The Latest Login in 2020",
        "title_slug": "the-latest-login-in-2020",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "2383 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT user_id, max(time_stamp) as last_stamp FROM Logins \nWHERE YEAR(time_stamp) = 2020\nGROUP BY user_id;"
    },
    {
        "timestamp": "2022-05-27 12:57:22",
        "title": "Game Play Analysis I",
        "title_slug": "game-play-analysis-i",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "2461 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT player_id, MIN(event_date) as first_login FROM Activity\nGROUP BY player_id;"
    },
    {
        "timestamp": "2022-05-27 12:56:53",
        "title": "Game Play Analysis I",
        "title_slug": "game-play-analysis-i",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "493 ms",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nSELECT player_id, min(event_date) as first_login FROM Activity\nGROUP BY player_id"
    },
    {
        "timestamp": "2022-05-27 12:37:29",
        "title": "Customer Placing the Largest Number of Orders",
        "title_slug": "customer-placing-the-largest-number-of-orders",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "992 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT TOP 1 customer_number FROM (SELECT customer_number, count(order_number) as cnt FROM Orders\nGROUP BY customer_number) orders_count\nORDER BY cnt DESC;"
    },
    {
        "timestamp": "2022-05-27 08:39:38",
        "title": "Number of Steps to Reduce a Number to Zero",
        "title_slug": "number-of-steps-to-reduce-a-number-to-zero",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "55 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def numberOfSteps(self, num: int) -> int:\n        steps = 0\n        while num > 0:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num -= 1\n            steps += 1\n            \n        return steps"
    },
    {
        "timestamp": "2022-05-26 22:37:15",
        "title": "Evaluate Reverse Polish Notation",
        "title_slug": "evaluate-reverse-polish-notation",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "84 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        stack = []\n\n        for token in tokens:\n            if token not in '+/*-':\n                stack.append(int(token))\n                continue\n\n            a, b = stack.pop(), stack.pop()\n            if token == \"+\":\n                stack.append(a + b)\n            elif token == \"/\":\n                stack.append(int(b/a))\n            elif token == \"*\":\n                stack.append(a * b)\n            elif token == \"-\":\n                stack.append(b - a)\n\n        return stack[-1]\n"
    },
    {
        "timestamp": "2022-05-26 20:46:08",
        "title": "User Activity for the Past 30 Days I",
        "title_slug": "user-activity-for-the-past-30-days-i",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "436 ms",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nSELECT activity_date AS day, COUNT(distinct user_id) as active_users FROM Activity\nWHERE activity_date BETWEEN '2019-06-28' AND '2019-07-27'\nGROUP BY 1;"
    },
    {
        "timestamp": "2022-05-26 20:33:07",
        "title": "Daily Leads and Partners",
        "title_slug": "daily-leads-and-partners",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "859 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nselect date_id , make_name , count(distinct Lead_id)unique_leads , count(distinct Partner_id)unique_partners from Dailysales\nGroup by date_id , make_name\norder by 1;"
    },
    {
        "timestamp": "2022-05-26 20:31:05",
        "title": "Daily Leads and Partners",
        "title_slug": "daily-leads-and-partners",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "484 ms",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nselect date_id , make_name , count(distinct Lead_id)unique_leads , count(distinct Partner_id)unique_partners from Dailysales\nGroup by 1,2\norder by 1"
    },
    {
        "timestamp": "2022-05-26 11:59:05",
        "title": "Number of 1 Bits",
        "title_slug": "number-of-1-bits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "27 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        return int.bit_count(n)"
    },
    {
        "timestamp": "2022-05-26 10:50:33",
        "title": "Find Followers Count",
        "title_slug": "find-followers-count",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1036 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT user_id, COUNT(user_id) as followers_count FROM Followers\nGROUP BY user_id\nORDER BY 1;"
    },
    {
        "timestamp": "2022-05-26 10:49:12",
        "title": "Find Followers Count",
        "title_slug": "find-followers-count",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "479 ms",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nSELECT user_id, COUNT(user_id) as followers_count FROM Followers\nGROUP BY user_id\nORDER BY user_id;"
    },
    {
        "timestamp": "2022-05-26 09:13:19",
        "title": "Plus One",
        "title_slug": "plus-one",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "50 ms",
        "memory": "13.7 MB",
        "code": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        num = \"\".join(map(str, digits))\n        return list(str(int(num) + 1))"
    },
    {
        "timestamp": "2022-05-25 22:04:42",
        "title": "Russian Doll Envelopes",
        "title_slug": "russian-doll-envelopes",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1233 ms",
        "memory": "61.8 MB",
        "code": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        envelopes.sort(key=lambda x: (x[0], -x[1]))        \n        res = []\n        for _, h in envelopes:\n            idx = bisect_left(res, h)\n            if idx == len(res):\n                res.append(h)\n            else:\n                res[idx]=h\n        return len(res)"
    },
    {
        "timestamp": "2022-05-25 22:04:01",
        "title": "Repeated Substring Pattern",
        "title_slug": "repeated-substring-pattern",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "46 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        for i in range(len(s)//2,0,-1):\n            if len(s) % i == 0:\n                if s == s[:i] * (len(s) // i):\n                    return True\n\n        return False"
    },
    {
        "timestamp": "2022-05-25 21:54:18",
        "title": "Balanced Binary Tree",
        "title_slug": "balanced-binary-tree",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "44.7 MB",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    boolean balanced = true;\n    \n    public boolean isBalanced(TreeNode root) {\n        check(root, 0);\n        return balanced;\n    }\n    \n    private int check(TreeNode node, int height) {\n        if (node == null) {\n            return height;\n            \n        } else if (balanced) {\n            int left = check(node.left, height + 1);\n            int right = check(node.right, height + 1);\n            \n            if (Math.abs(right - left) > 1) {\n                balanced = false;\n            }\n            return Math.max(left, right);\n        }\n        return -1;\n    }\n}"
    },
    {
        "timestamp": "2022-05-25 11:29:43",
        "title": "Rising Temperature",
        "title_slug": "rising-temperature",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "596 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT CASE WHEN t2.temperature IS NOT NULL AND t2.temperature < t1.temperature THEN id END AS Id\nfrom weather t1\nLEFT JOIN (SELECT DATEADD(day, 1, recorddate) as nd, temperature from weather) t2 \non t1.recorddate = t2.nd\nWHERE CASE WHEN t2.temperature IS NOT NULL AND t2.temperature < t1.temperature THEN id END IS NOT NULL"
    },
    {
        "timestamp": "2022-05-25 10:39:28",
        "title": "Sales Person",
        "title_slug": "sales-person",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1825 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT s.name FROM SalesPerson AS s \nWHERE s.sales_id NOT IN (SELECT o.sales_id FROM Orders AS o\nINNER JOIN Company as c\n    ON c.com_id = o.com_id\n    WHERE c.name = 'RED')"
    },
    {
        "timestamp": "2022-05-24 22:32:35",
        "title": "Longest Valid Parentheses",
        "title_slug": "longest-valid-parentheses",
        "status": "Accepted",
        "lang": "java",
        "runtime": "7 ms",
        "memory": "43.6 MB",
        "code": "public class Solution {\n\n    public int longestValidParentheses(String s) {\n        int maxans = 0;\n        Stack<Integer> stack = new Stack<>();\n        stack.push(-1);\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.empty()) {\n                    stack.push(i);\n                } else {\n                    maxans = Math.max(maxans, i - stack.peek());\n                }\n            }\n        }\n        return maxans;\n    }\n}"
    },
    {
        "timestamp": "2022-05-24 21:49:22",
        "title": "Monotonic Array",
        "title_slug": "monotonic-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1562 ms",
        "memory": "28 MB",
        "code": "class Solution:\n    def isMonotonic(self, nums: List[int]) -> bool:\n        increasing = decreasing = True\n        \n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                increasing = False\n            elif nums[i] < nums[i+1]:\n                decreasing = False\n                \n        return increasing or decreasing\n                "
    },
    {
        "timestamp": "2022-05-24 20:45:48",
        "title": "Implement strStr()",
        "title_slug": "implement-strstr",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "42.2 MB",
        "code": "class Solution {\n    public int strStr(String haystack, String needle) {\n        return haystack.indexOf(needle);\n    }\n}"
    },
    {
        "timestamp": "2022-05-24 20:44:37",
        "title": "Implement strStr()",
        "title_slug": "implement-strstr",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "37 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        return haystack.find(needle)"
    },
    {
        "timestamp": "2022-05-24 15:06:21",
        "title": "Article Views I",
        "title_slug": "article-views-i",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "2083 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT DISTINCT(author_id) as id FROM Views\nWHERE author_id = viewer_id\nORDER BY 1;"
    },
    {
        "timestamp": "2022-05-24 11:52:43",
        "title": "Customer Who Visited but Did Not Make Any Transactions",
        "title_slug": "customer-who-visited-but-did-not-make-any-transactions",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "5098 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT v.customer_id, COUNT(v.customer_id) AS count_no_trans FROM Visits AS v\nLEFT JOIN Transactions AS t\nON v.visit_id = t.visit_id\nWHERE t.visit_id IS NULL\nGROUP BY v.customer_id;"
    },
    {
        "timestamp": "2022-05-24 11:26:35",
        "title": "Combine Two Tables",
        "title_slug": "combine-two-tables",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1278 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT p.firstName, p.lastName, a.city, a.state FROM Person AS p\nLEFT JOIN Address AS a\nON p.personId = a.personId;"
    },
    {
        "timestamp": "2022-05-23 22:31:16",
        "title": "Ones and Zeroes",
        "title_slug": "ones-and-zeroes",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "3040 ms",
        "memory": "199.2 MB",
        "code": "class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n        counter=[[s.count(\"0\"), s.count(\"1\")] for s in strs]\n        \n        @cache\n        def dp(i,j,idx):\n            if i<0 or j<0:\n                return -math.inf\n            \n            if idx==len(strs):\n                return 0\n            \n            return max(dp(i,j,idx+1), 1 + dp(i-counter[idx][0], j-counter[idx][1], idx+1))\n        return dp(m,n,0)"
    },
    {
        "timestamp": "2022-05-23 22:28:04",
        "title": "Tree Node",
        "title_slug": "tree-node",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "582 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\n-- SELECT id, \n\n         \nSELECT t1.id,\n    CASE WHEN t1.p_id is null THEN 'Root'\n         WHEN t1.id = t2.p_id THEN 'Inner'\n         ELSE 'Leaf' END\n    AS type\nFROM Tree t1\nLEFT join (select distinct(p_id) from Tree) t2\nON t1.id = t2.p_id\n;\n"
    },
    {
        "timestamp": "2022-05-23 21:54:56",
        "title": "Second Highest Salary",
        "title_slug": "second-highest-salary",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "647 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSelect iif(count(id)>=1, max(salary) , null) as SecondHighestSalary from Employee\nwhere salary < (Select max(salary) from employee)\n"
    },
    {
        "timestamp": "2022-05-23 21:33:52",
        "title": "Rearrange Products Table",
        "title_slug": "rearrange-products-table",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1813 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT product_id, \n    CASE WHEN store1 IS NOT NULL THEN 'store1' \n        END AS store, \n    CASE WHEN store1 IS NOT NULL THEN store1\n    END AS price \n    \nFROM Products WHERE store1 IS NOT NULL\n\nUNION\n\nSELECT product_id, \n    CASE WHEN store2 IS NOT NULL THEN 'store2' \n    END AS store, \n    CASE WHEN store2 IS NOT NULL THEN store2\n    END AS price\n    \nFROM Products WHERE store2 IS NOT NULL\n\nUNION\n\nSELECT product_id, \n    CASE WHEN store3 IS NOT NULL THEN 'store3' \n    END AS store, \n    CASE WHEN store3 IS NOT NULL THEN store3\n    END AS price\n    \nFROM Products WHERE store3 IS NOT NULL"
    },
    {
        "timestamp": "2022-05-23 10:29:33",
        "title": "Employees With Missing Information",
        "title_slug": "employees-with-missing-information",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "777 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT COALESCE(e.employee_id, s.employee_id) AS employee_id FROM Employees AS e\nFULL OUTER JOIN Salaries AS s\nON e.employee_id = s.employee_id\nWHERE e.name IS NULL OR s.salary IS NULL\nORDER BY 1;\n"
    },
    {
        "timestamp": "2022-05-22 22:29:14",
        "title": "Palindromic Substrings",
        "title_slug": "palindromic-substrings",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "167 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def expandAndCountPallindromes(self, i, j, s):        \n        length = len(s)\n        cnt = 0\n        \n        while 0 <= i and j < length and s[i]==s[j]:\n            i -= 1\n            j += 1\n            cnt +=1\n        \n        return cnt\n        \n    def countSubstrings(self, s: str) -> int:\n        return sum(self.expandAndCountPallindromes(i,i,s) + self.expandAndCountPallindromes(i,i+1,s) for i in range(len(s)))"
    },
    {
        "timestamp": "2022-05-22 22:27:40",
        "title": "Group Sold Products By The Date",
        "title_slug": "group-sold-products-by-the-date",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "370 ms",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nSELECT\n\tsell_date,\n\tCOUNT(DISTINCT (product)) AS num_sold, \n\tGROUP_CONCAT(DISTINCT(product)) AS products \nFROM Activities \nGROUP BY sell_date \nORDER BY sell_date ASC;"
    },
    {
        "timestamp": "2022-05-22 22:23:30",
        "title": "Patients With a Condition",
        "title_slug": "patients-with-a-condition",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1425 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT * FROM Patients\nWHERE conditions LIKE 'DIAB1%' OR \n    conditions LIKE '% DIAB1%'"
    },
    {
        "timestamp": "2022-05-22 17:13:40",
        "title": "Fix Names in a Table",
        "title_slug": "fix-names-in-a-table",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1522 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\n-- SELECT user_id, UPPER(LEFT(name, 1)) + LOWER(RIGHT(name, LEN(name)-1)) as name \n-- FROM Users\n-- ORDER BY user_id\n\nSELECT user_id, UPPER(LEFT(name, 1)) + LOWER(SUBSTRING(name, 2, LEN(name)-1)) as name\nFROM Users\nORDER BY user_id"
    },
    {
        "timestamp": "2022-05-22 17:07:45",
        "title": "Fix Names in a Table",
        "title_slug": "fix-names-in-a-table",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "5169 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT user_id, UPPER(LEFT(name, 1)) + LOWER(RIGHT(name, LEN(name)-1)) as name \nFROM Users\nORDER BY user_id"
    },
    {
        "timestamp": "2022-05-21 23:06:06",
        "title": "Coin Change",
        "title_slug": "coin-change",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "2103 ms",
        "memory": "26.4 MB",
        "code": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        def inner(rem, memo):\n            if rem < 0:\n                return math.inf\n            if rem == 0:\n                return 0\n            if rem in memo:\n                return memo[rem]\n\n            memo[rem] = min(inner(rem - i, memo) + 1 for i in coins)\n            return memo[rem]\n\n        ans = inner(amount, {})\n        return -1 if ans == math.inf else ans\n"
    },
    {
        "timestamp": "2022-05-21 22:48:15",
        "title": "Delete Duplicate Emails",
        "title_slug": "delete-duplicate-emails",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "831 ms",
        "memory": "0B",
        "code": "/* \n Please write a DELETE statement and DO NOT write a SELECT statement.\n Write your T-SQL query statement below\n */\n \nDELETE p1 FROM Person p1, Person p2 \nWHERE p1.email = p2.email AND p1.id > p2.id"
    },
    {
        "timestamp": "2022-05-21 17:28:01",
        "title": "Swap Salary",
        "title_slug": "swap-salary",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "516 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nUPDATE Salary \nSET \n    sex = CASE\n        WHEN sex = 'm' THEN 'f'\n        ELSE 'm' \n    END;"
    },
    {
        "timestamp": "2022-05-21 16:01:38",
        "title": "Calculate Special Bonus",
        "title_slug": "calculate-special-bonus",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1404 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT employee_id, \n    CASE\n    WHEN employee_id % 2 <> 0 AND name NOT LIKE 'M%' THEN salary\n    ELSE 0 END\n    AS bonus\nFROM Employees"
    },
    {
        "timestamp": "2022-05-20 22:22:57",
        "title": "Unique Paths II",
        "title_slug": "unique-paths-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "38 ms",
        "memory": "14 MB",
        "code": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n\n        # If the starting cell has an obstacle, then simply return as there would be\n        # no paths to the destination.\n        if obstacleGrid[0][0] == 1:\n            return 0\n\n        # Number of ways of reaching the starting cell = 1.\n        obstacleGrid[0][0] = 1\n\n        # Filling the values for the first column\n        for i in range(1,m):\n            obstacleGrid[i][0] = int(obstacleGrid[i][0] == 0 and obstacleGrid[i-1][0] == 1)\n\n        # Filling the values for the first row        \n        for j in range(1, n):\n            obstacleGrid[0][j] = int(obstacleGrid[0][j] == 0 and obstacleGrid[0][j-1] == 1)\n\n        # Starting from cell(1,1) fill up the values\n        # No. of ways of reaching cell[i][j] = cell[i - 1][j] + cell[i][j - 1]\n        # i.e. From above and left.\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n                else:\n                    obstacleGrid[i][j] = 0\n\n        # Return value stored in rightmost bottommost cell. That is the destination.\n        return obstacleGrid[m-1][n-1]"
    },
    {
        "timestamp": "2022-05-20 13:30:30",
        "title": "Customers Who Never Order",
        "title_slug": "customers-who-never-order",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "654 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT name as Customers FROM Customers\nLEFT JOIN Orders ON Customers.id = Orders.customerId\nWHERE Orders.customerId IS NULL"
    },
    {
        "timestamp": "2022-05-20 13:21:03",
        "title": "Find Customer Referee",
        "title_slug": "find-customer-referee",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "830 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT name \nFROM Customer\nWHERE COALESCE(referee_id, 0) <> 2"
    },
    {
        "timestamp": "2022-05-20 13:12:50",
        "title": "Find Customer Referee",
        "title_slug": "find-customer-referee",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "597 ms",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nSELECT name FROM Customer\nWHERE referee_id <> 2 OR referee_id IS NULL"
    },
    {
        "timestamp": "2022-05-20 13:10:07",
        "title": "Recyclable and Low Fat Products",
        "title_slug": "recyclable-and-low-fat-products",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "695 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT product_id FROM Products\nWHERE low_fats = 'Y' AND recyclable = 'Y'"
    },
    {
        "timestamp": "2022-05-20 13:07:40",
        "title": "Big Countries",
        "title_slug": "big-countries",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1012 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT\n    name, population, area\nFROM\n    world\nWHERE\n    area >= 3000000\n\nUNION\n\nSELECT\n    name, population, area\nFROM\n    world\nWHERE\n    population >= 25000000\n;"
    },
    {
        "timestamp": "2022-05-20 13:05:40",
        "title": "Big Countries",
        "title_slug": "big-countries",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1031 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT name, population, area FROM World\nWHERE area >= 3000000 OR population >= 25000000"
    },
    {
        "timestamp": "2022-05-19 22:15:36",
        "title": "Longest Increasing Path in a Matrix",
        "title_slug": "longest-increasing-path-in-a-matrix",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "653 ms",
        "memory": "16.9 MB",
        "code": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n        \n        dp = [[-1] * n for _ in range(m)]\n        \n        def dfs(i, j, prev):\n            if i < 0 or j < 0 or i >= m or j >= n or matrix[i][j] <= prev:\n                return 0\n\n            if dp[i][j] != -1:\n                return dp[i][j]\n            \n            # if dp[i][j] = -1\n            left = dfs(i, j - 1, matrix[i][j])\n            right = dfs(i, j + 1, matrix[i][j])\n            top = dfs(i - 1, j, matrix[i][j])\n            bottom = dfs(i + 1, j, matrix[i][j])\n\n            dp[i][j] = max(left, right, top, bottom) + 1\n            return dp[i][j]\n        \n        res = -1\n        for i in range(m):\n            for j in range(n):\n                res = max(res, dfs(i, j, -1))\n                \n        return res"
    },
    {
        "timestamp": "2022-05-18 22:15:14",
        "title": "Critical Connections in a Network",
        "title_slug": "critical-connections-in-a-network",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "3535 ms",
        "memory": "78.8 MB",
        "code": "class Solution:\n    def __init__(self):\n        self.timer = 0\n\t\t\n    def criticalConnections(self, n, connections):\n        low, timeV, visited = [0 for _ in range(n)], [0 for _ in range(n)], [False for _ in range(n)]\n        graph = defaultdict(list)\n        ans = []\n        \n        def tarjan(start, pre):\n            visited[start] = True\n            timeV[start] = low[start] = self.timer\n            self.timer += 1\n            for neighbor in graph[start]:\n                if neighbor == pre: \n                    continue\n                    \n                if visited[neighbor]:\n                    low[start] = min(low[start], timeV[neighbor])\n                else:\n                    tarjan(neighbor, start)\n                    low[start] = min(low[start], low[neighbor])\n                    if low[neighbor] > timeV[start]:\n                        ans.append([start, neighbor])        \n\n            \n        for i in range(len(connections)):\n            graph[connections[i][0]].append(connections[i][1])\n            graph[connections[i][1]].append(connections[i][0])\n\n        tarjan(0, -1)\n        return ans\n        "
    },
    {
        "timestamp": "2022-05-17 22:01:47",
        "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "title_slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "652 ms",
        "memory": "24 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def getTargetCopy(self, original: TreeNode, cloned: TreeNode, target: TreeNode) -> TreeNode:\n        def inorder(o: TreeNode, c: TreeNode):\n            if o:\n                inorder(o.left, c.left)\n                if o is target:\n                    self.ans = c\n                inorder(o.right, c.right)\n                \n        inorder(original, cloned)\n        return self.ans"
    },
    {
        "timestamp": "2022-05-16 23:19:30",
        "title": "Shortest Path in Binary Matrix",
        "title_slug": "shortest-path-in-binary-matrix",
        "status": "Accepted",
        "lang": "java",
        "runtime": "17 ms",
        "memory": "43.8 MB",
        "code": "class Solution {\n    public int shortestPathBinaryMatrix(int[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0].length == 0) {\n            return -1;\n        }\n\n        int ans = 0;\n\n        int row = grid.length;\n        int col = grid[0].length;\n\n        if (grid[0][0] == 1 || grid[row - 1][col - 1] == 1) {\n            return -1;\n        }\n\n        int[][] dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};\n\n        boolean[][] visited = new boolean[row][col];\n\n        Queue<int[]> queue = new LinkedList<>();\n        queue.offer(new int[]{0, 0});\n        visited[0][0] = true;\n\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            ans++;\n\n            for (int i = 0; i < size; i++) {\n                int[] curPos = queue.poll();\n\n                if (curPos[0] == row - 1 && curPos[1] == col - 1) {\n                    return ans;\n                }\n\n                for (int[] dir : dirs) {\n                    int nextX = curPos[0] + dir[0];\n                    int nextY = curPos[1] + dir[1];\n\n                    if (nextX < 0 || nextX >= row || nextY < 0 || nextY >= col || visited[nextX][nextY] || grid[nextX][nextY] == 1) {\n                        continue;\n                    }\n\n                    visited[nextX][nextY] = true;\n                    queue.offer(new int[]{nextX, nextY});\n                }\n            }\n        }\n\n        return -1;\n    }\n    \n}"
    },
    {
        "timestamp": "2022-05-15 15:12:12",
        "title": "How Many Numbers Are Smaller Than the Current Number",
        "title_slug": "how-many-numbers-are-smaller-than-the-current-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "114 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n        res = sorted(nums)\n        n = len(nums)\n        \n        return [res.index(nums[i]) for i in range(n)]"
    },
    {
        "timestamp": "2022-05-15 15:01:23",
        "title": "Build Array from Permutation",
        "title_slug": "build-array-from-permutation",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "218 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def buildArray(self, nums: List[int]) -> List[int]:\n        return [nums[nums[i]] for i in range(len(nums))]"
    },
    {
        "timestamp": "2022-05-15 15:00:58",
        "title": "Build Array from Permutation",
        "title_slug": "build-array-from-permutation",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "197 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def buildArray(self, nums: List[int]) -> List[int]:\n        ans = []\n        \n        for i in range(len(nums)):\n            ans.append(nums[nums[i]])\n            \n        return ans"
    },
    {
        "timestamp": "2022-05-15 14:54:36",
        "title": "Deepest Leaves Sum",
        "title_slug": "deepest-leaves-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "418 ms",
        "memory": "17.6 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\n        max_height = float('-inf')\n        res = 0\n        \n        # in_order traversal\n        def dfs(root, height):\n            nonlocal max_height, res\n            \n            if not root:\n                return None\n\n            dfs(root.left, height + 1)\n\n            if root.left == None and root.right == None: # leaf node\n                if height > max_height:\n                    max_height = height\n                    res = root.val\n                elif height == max_height:\n                    res += root.val\n                    \n            dfs(root.right, height + 1)\n            \n        dfs(root, 0)\n        return res"
    },
    {
        "timestamp": "2022-05-14 23:44:28",
        "title": "Network Delay Time",
        "title_slug": "network-delay-time",
        "status": "Accepted",
        "lang": "java",
        "runtime": "21 ms",
        "memory": "45 MB",
        "code": "class Solution {\n    // Adjacency list\n    Map<Integer, List<Pair<Integer, Integer>>> adj = new HashMap<>();\n    \n    private void dijkstra(int[] signalReceivedAt, int source, int n) {\n        Queue<Pair<Integer, Integer>> pq = new PriorityQueue<Pair<Integer,Integer>>\n            (Comparator.comparing(Pair::getKey));\n        pq.add(new Pair(0, source));\n        \n        // Time for starting node is 0\n        signalReceivedAt[source] = 0;\n        \n        while (!pq.isEmpty()) {\n            Pair<Integer, Integer> topPair = pq.remove();\n            \n            int currNode = topPair.getValue();\n            int currNodeTime = topPair.getKey();\n            \n            if (currNodeTime > signalReceivedAt[currNode]) {\n                continue;\n            }\n            \n            if (!adj.containsKey(currNode)) {\n                continue;\n            }\n            \n            // Broadcast the signal to adjacent nodes\n            for (Pair<Integer, Integer> edge : adj.get(currNode)) {\n                int time = edge.getKey();\n                int neighborNode = edge.getValue();\n\n                if (signalReceivedAt[neighborNode] > currNodeTime + time) {\n                    signalReceivedAt[neighborNode] = currNodeTime + time;\n                    pq.add(new Pair(signalReceivedAt[neighborNode], neighborNode));\n                }\n            }\n        }\n    }\n    \n    public int networkDelayTime(int[][] times, int n, int k) {\n        // Build the adjacency list\n        for (int[] time : times) {\n            int source = time[0];\n            int dest = time[1];\n            int travelTime = time[2];\n            \n            adj.putIfAbsent(source, new ArrayList<>());\n            adj.get(source).add(new Pair(travelTime, dest));\n        }\n        \n        int[] signalReceivedAt = new int[n + 1];\n        Arrays.fill(signalReceivedAt, Integer.MAX_VALUE);\n        \n        dijkstra(signalReceivedAt, k, n);\n        \n        int answer = Integer.MIN_VALUE;\n        for (int i = 1; i <= n; i++) {\n            answer = Math.max(answer, signalReceivedAt[i]);\n        }\n        \n        // INT_MAX signifies atleat one node is unreachable\n        return answer == Integer.MAX_VALUE ? -1 : answer;\n    }\n}"
    },
    {
        "timestamp": "2022-05-13 14:30:59",
        "title": "Employees Earning More Than Their Managers",
        "title_slug": "employees-earning-more-than-their-managers",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1840 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nselect e.name as Employee from employee e\ninner join (\n    select id,name,salary from employee) m \n    on m.id = e.managerid\nwhere e.salary > m.salary"
    },
    {
        "timestamp": "2022-05-13 10:36:24",
        "title": "Populating Next Right Pointers in Each Node II",
        "title_slug": "populating-next-right-pointers-in-each-node-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "50 ms",
        "memory": "15.2 MB",
        "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\n\nclass Solution:\n    def connect(self, root: 'Node') -> 'Node':\n        if root is None:\n            return None\n        \n        d = deque()\n        d.append(root)\n        dummy = Node(9999)\n        while d:\n            n = len(d)\n            prev = dummy\n            for _ in range(n):\n                popped = d.popleft()\n                \n                if popped.left:\n                    d.append(popped.left)\n                    prev.next = popped.left\n                    prev = prev.next\n                if popped.right:\n                    d.append(popped.right)\n                    prev.next = popped.right\n                    prev = prev.next\n                    \n        return root\n                "
    },
    {
        "timestamp": "2022-05-12 09:26:19",
        "title": "Permutations II",
        "title_slug": "permutations-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "93 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        return set(itertools.permutations(nums))\n"
    },
    {
        "timestamp": "2022-05-11 08:45:57",
        "title": "Count Sorted Vowel Strings",
        "title_slug": "count-sorted-vowel-strings",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1249 ms",
        "memory": "161.3 MB",
        "code": "class Solution:\n    def countVowelStrings(self, n: int) -> int:\n        return len(list(itertools.combinations_with_replacement((\"a\", \"e\", \"i\", \"o\", \"u\"), n)))\n"
    },
    {
        "timestamp": "2022-05-10 01:24:22",
        "title": "Combination Sum III",
        "title_slug": "combination-sum-iii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        return list(filter(lambda x: sum(x) == n, itertools.combinations(range(1, 10), r=k)))\n"
    },
    {
        "timestamp": "2022-05-09 22:16:10",
        "title": "Delete Node in a Linked List",
        "title_slug": "delete-node-in-a-linked-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "39 ms",
        "memory": "14.2 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        node.val = node.next.val\n        node.next = node.next.next"
    },
    {
        "timestamp": "2022-05-09 12:25:52",
        "title": "Letter Combinations of a Phone Number",
        "title_slug": "letter-combinations-of-a-phone-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "31 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        tel = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n        }\n        \n        return list(map(''.join, itertools.product(*(tel[digit] for digit in digits)))) if digits else []"
    },
    {
        "timestamp": "2022-05-09 12:22:18",
        "title": "Letter Combinations of a Phone Number",
        "title_slug": "letter-combinations-of-a-phone-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "42 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        tel = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n        }\n\n        formatter = lambda x: \"\".join(x)\n\n        if digits == \"\":\n            return []\n\n        elif len(digits) == 1:\n            return list(map(formatter, itertools.product(tel[digits])))\n\n        elif len(digits) == 2:\n            first, second = digits[0], digits[1]\n            return list(map(formatter, itertools.product(tel[first], tel[second])))\n\n        elif len(digits) == 3:\n            first, second, third = digits[0], digits[1], digits[2]\n            return list(map(formatter, itertools.product(tel[first], tel[second], tel[third])))\n\n        if len(digits) == 4:\n            first, second, third, fourth = digits[0], digits[1], digits[2], digits[3]\n            return list(map(formatter, itertools.product(tel[first], tel[second], tel[third], tel[fourth])))\n"
    },
    {
        "timestamp": "2022-05-08 22:16:55",
        "title": "Flatten Nested List Iterator",
        "title_slug": "flatten-nested-list-iterator",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "73 ms",
        "memory": "17.8 MB",
        "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -> int:\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        \"\"\"\n#\n#    def getList(self) -> [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        \"\"\"\n\nclass NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        def flatten(currList: [NestedInteger]):\n            for element in currList:\n                if element.isInteger():\n                    yield element.getInteger()\n                else:\n                    yield from flatten(element.getList())\n            \n        self.nestedList = flatten(nestedList)\n        self.nextInteger = next(self.nestedList, None)\n    \n    def next(self) -> int:\n        result = self.nextInteger\n        self.nextInteger = next(self.nestedList, None)\n        return result\n    \n    def hasNext(self) -> bool:\n        return self.nextInteger is not None\n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())"
    },
    {
        "timestamp": "2022-05-08 15:08:56",
        "title": "Convert Sorted Array to Binary Search Tree",
        "title_slug": "convert-sorted-array-to-binary-search-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "61 ms",
        "memory": "15.6 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        if not nums:\n            return\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root"
    },
    {
        "timestamp": "2022-05-08 15:06:58",
        "title": "Convert Sorted List to Binary Search Tree",
        "title_slug": "convert-sorted-list-to-binary-search-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "466 ms",
        "memory": "20.3 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def build(self, arr):\n        if not arr:\n            return\n        \n        mid = len(arr) // 2\n        root = TreeNode(arr[mid])\n        root.left = self.build(arr[:mid])\n        root.right = self.build(arr[mid+1:])\n        \n        return root\n        \n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        curr, ans = head, []\n\n        while curr:\n            ans.append(curr.val)\n            curr = curr.next\n            \n        return self.build(ans)"
    },
    {
        "timestamp": "2022-05-08 00:59:08",
        "title": "132 Pattern",
        "title_slug": "132-pattern",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "453 ms",
        "memory": "32.1 MB",
        "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        if len(nums)<3:\n            return False\n      \n        second_num = -math.inf\n        stck = []\n        # Try to find nums[i] < second_num < stck[-1]\n        for i in range(len(nums) - 1, -1, -1):\n            if nums[i] < second_num:\n                return True\n            while stck and stck[-1] < nums[i]:\n                second_num = stck.pop()\n\n            stck.append(nums[i])\n        return False"
    },
    {
        "timestamp": "2022-05-06 21:59:04",
        "title": "Remove All Adjacent Duplicates in String II",
        "title_slug": "remove-all-adjacent-duplicates-in-string-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "127 ms",
        "memory": "18.7 MB",
        "code": "class Solution:\n    def removeDuplicates(self, s: str, k: int) -> str:\n        stack = []\n\n        for c in s:\n            if stack and stack[-1][0] == c:  # if duplicate\n                stack[-1][1] += 1\n                if stack[-1][1] == k:\n                    stack.pop()\n            else:\n                stack.append([c, 1])\n\n        return \"\".join(char*count for char, count in stack)\n"
    },
    {
        "timestamp": "2022-05-05 19:05:52",
        "title": "Implement Stack using Queues",
        "title_slug": "implement-stack-using-queues",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "48 ms",
        "memory": "14 MB",
        "code": "class MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self._items = []       \n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"\n        self._items.append(x)\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        \"\"\"\n        return self._items.pop()\n\n    def top(self) -> int:\n        \"\"\"\n        Get the top element.\n        \"\"\"\n        return self._items[-1]\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the stack is empty.\n        \"\"\"\n        return len(self._items) == 0\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()"
    },
    {
        "timestamp": "2022-05-04 20:41:43",
        "title": "Max Number of K-Sum Pairs",
        "title_slug": "max-number-of-k-sum-pairs",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1456 ms",
        "memory": "26.4 MB",
        "code": "class Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        i = 0\n        j = len(nums) - 1\n        nums.sort()\n        operations = 0\n\n        while i < j:\n            if nums[i] + nums[j] == k:\n                operations += 1\n                i += 1\n                j -= 1\n            elif nums[i] + nums[j] < k:\n                i += 1\n            elif nums[i] + nums[j] > k:\n                j -= 1\n\n        return operations\n"
    },
    {
        "timestamp": "2022-05-03 21:46:40",
        "title": "Shortest Unsorted Continuous Subarray",
        "title_slug": "shortest-unsorted-continuous-subarray",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "410 ms",
        "memory": "15.3 MB",
        "code": "class Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n        start = len(nums)\n        end = 0\n        s_nums = sorted(nums)\n        for i in range(len(s_nums)):\n            if nums[i] != s_nums[i]:\n                start = min(start, i)\n                end = max(end, i)\n                \n        return end - start + 1 if (end - start) >= 0 else 0"
    },
    {
        "timestamp": "2022-05-02 09:36:54",
        "title": "Sort Array By Parity",
        "title_slug": "sort-array-by-parity",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "150 ms",
        "memory": "14.6 MB",
        "code": "class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n        for i in range(len(nums)):\n            if nums[i] % 2 == 0:\n                nums.insert(0, nums.pop(i))\n\n        return nums\n"
    },
    {
        "timestamp": "2022-05-01 19:12:46",
        "title": "Backspace String Compare",
        "title_slug": "backspace-string-compare",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "65 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def removeBackspace(self, string: str) -> str:\n        stack = []\n        for char in string:\n            if char != \"#\":\n                stack.append(char)\n            elif stack:\n                stack.pop()\n            \n        return \"\".join(stack)\n                \n    def backspaceCompare(self, s: str, t: str) -> bool:\n        return self.removeBackspace(s) == self.removeBackspace(t)"
    },
    {
        "timestamp": "2022-05-01 19:12:11",
        "title": "Backspace String Compare",
        "title_slug": "backspace-string-compare",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "52 ms",
        "memory": "13.7 MB",
        "code": "class Solution:\n    def removeBackspace(self, string: str) -> str:\n        stack = []\n        for char in string:\n            if char == \"#\" and len(stack) > 0:\n                stack.pop()\n            elif char != '#':\n                stack.append(char)\n            \n        return \"\".join(stack)\n                \n    def backspaceCompare(self, s: str, t: str) -> bool:\n        print(self.removeBackspace(s), self.removeBackspace(t))\n        return self.removeBackspace(s) == self.removeBackspace(t)"
    },
    {
        "timestamp": "2022-04-30 23:44:21",
        "title": "Evaluate Division",
        "title_slug": "evaluate-division",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "27 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    \n    def answer(self, current, end, scalar):\n        if current == end: \n            return scalar\n        \n        self.visited.add(current)\n        if current in self.graph:\n            for i in self.graph[current]:\n                if i[0] not in self.visited:\n                    a = self.answer(i[0],end,scalar*i[1])\n                    if a != -1: \n                        return a\n        return -1\n    \n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        self.graph, self.visited = {}, set()\n        for i in range(len(equations)):\n            if equations[i][0] not in self.graph:\n                self.graph[equations[i][0]] = []\n                \n            if equations[i][1] not in self.graph:\n                self.graph[equations[i][1]]=[]\n                \n            self.graph[equations[i][0]].append((equations[i][1],1/values[i]))\n            self.graph[equations[i][1]].append((equations[i][0],values[i]))\n            \n        v = []\n        for i in queries:\n            self.visited = set()\n            if i[0] not in self.graph or i[1] not in self.graph:\n                v.append(-1)\n                continue\n            v.append(1/self.answer(i[0],i[1],1) if i[0]!=i[1] else 1)\n            \n        return v"
    },
    {
        "timestamp": "2022-04-30 20:08:33",
        "title": "Count Prefixes of a Given String",
        "title_slug": "count-prefixes-of-a-given-string",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "60 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def countPrefixes(self, words: List[str], s: str) -> int:\n        count = 0\n        for word in words:\n            if s.startswith(word):\n                count += 1\n                \n        return count"
    },
    {
        "timestamp": "2022-04-29 23:41:07",
        "title": "Is Graph Bipartite?",
        "title_slug": "is-graph-bipartite",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "195 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        length = len(graph)\n        parent = [i for i in range(length)]\n\n        def find(x):\n            if x != parent[x]:\n                parent[x] = find(parent[x])  # rank compression\n            return parent[x]\n\n        def union(x,y):\n            px, py = find(x), find(y)\n            if px != py:\n                parent[px] = py\n\n        for i in range(length):\n            pari = find(i)\n            for j in graph[i]:\n                if find(j) == pari:\n                    return False\n                union(graph[i][0],j)\n\n        return True"
    },
    {
        "timestamp": "2022-04-28 23:45:39",
        "title": "Path With Minimum Effort",
        "title_slug": "path-with-minimum-effort",
        "status": "Accepted",
        "lang": "java",
        "runtime": "87 ms",
        "memory": "58 MB",
        "code": "class Solution {\n    public int minimumEffortPath(int[][] heights) {\n        int n=heights.length;\n        int m=heights[0].length;\n        \n        if (n == 1 && m == 1)\n            return 0;\n        \n        int efforts[][]=new int[n][m]; //stores the minimum effots required to travel upto a given cell\n        \n        for(int row[]:efforts)\n            Arrays.fill(row,Integer.MAX_VALUE);\n        \n        PriorityQueue<int[]>pq=new PriorityQueue<int[]>((t1,t2) -> (t1[2]-t2[2]));\n        \n        pq.offer(new int[] {0,0,0});\n        int dir[][] = { {0,1},{0,-1},{1,0},{-1,0} }; //direction to travel\n        \n        while(!pq.isEmpty())\n        {\n            int curr[] = pq.poll();\n            int currRow = curr[0];\n            int currCol = curr[1];\n            int curr_wt = curr[2];\n            for (int x[] : dir) {\n                int nrow = currRow + x[0];\n                int ncol = currCol + x[1];\n                \n                if (nrow<0 || nrow>=n || ncol<0 || ncol>=m)\n                    continue;\n                \n                int wt = Math.max(curr_wt,Math.abs(heights[nrow][ncol]-heights[currRow][currCol]));//getting max absolute value\n                \n                //updating the minimum effort\n                if (wt < efforts[nrow][ncol]) {\n                    efforts[nrow][ncol] = wt;\n                    pq.offer(new int[]{nrow,ncol,wt});\n                }\n            }\n        }\n        return efforts[n-1][m-1];\n    }\n}"
    },
    {
        "timestamp": "2022-04-27 23:16:36",
        "title": "Smallest String With Swaps",
        "title_slug": "smallest-string-with-swaps",
        "status": "Accepted",
        "lang": "java",
        "runtime": "155 ms",
        "memory": "103.1 MB",
        "code": "class Solution {\n    // Maximum number of vertices\n    final static int N = 100001;\n    boolean[] visited = new boolean[N];\n    List<Integer>[] adj = new ArrayList[N]; \n    \n    private void DFS(String s, int vertex, List<Character> characters, List<Integer> indices) {\n        // Add the character and index to the list\n        characters.add(s.charAt(vertex));\n        indices.add(vertex);\n        \n        visited[vertex] = true;\n        \n        // Traverse the adjacents\n        for (int adjacent : adj[vertex]) {\n            if (!visited[adjacent]) {\n                DFS(s, adjacent, characters, indices);\n            }\n        }\n    }\n    \n    public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {\n         for (int i = 0; i < s.length(); i++) {\n            adj[i] = new ArrayList<Integer>();\n        }\n        \n        // Build the adjacency list\n        for (List<Integer> edge : pairs) {\n            int source = edge.get(0);\n            int destination = edge.get(1);\n            \n            // Undirected edge\n            adj[source].add(destination);\n            adj[destination].add(source);\n        }\n        \n        char[] answer = new char[s.length()];\n        for (int vertex = 0; vertex < s.length(); vertex++) {\n            // If not covered in the DFS yet\n            if (!visited[vertex]) {\n                List<Character> characters = new ArrayList<>();\n                List<Integer> indices = new ArrayList<>();\n                \n                DFS(s, vertex, characters, indices);\n                // Sort the list of characters and indices\n                Collections.sort(characters);\n                Collections.sort(indices);\n\n                // Store the sorted characters corresponding to the index\n                for (int index = 0; index < characters.size(); index++) {\n                    answer[indices.get(index)] = characters.get(index);\n                }\n            }\n        }\n        return new String(answer);\n    }\n}"
    },
    {
        "timestamp": "2022-04-26 22:12:11",
        "title": "Min Cost to Connect All Points",
        "title_slug": "min-cost-to-connect-all-points",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "2311 ms",
        "memory": "81.7 MB",
        "code": "class UnionFind:\n    def __init__(self, size: int) -> None:\n        self.group = [0] * size\n        self.rank = [0] * size\n        \n        for i in range(size):\n            self.group[i] = i\n      \n    def find(self, node: int) -> int:\n        if self.group[node] != node:\n            self.group[node] = self.find(self.group[node])\n        return self.group[node]\n\n    def join(self, node1: int, node2: int) -> bool:\n        group1 = self.find(node1)\n        group2 = self.find(node2)\n        \n        # node1 and node2 already belong to same group.\n        if group1 == group2:\n            return False\n\n        if self.rank[group1] > self.rank[group2]:\n            self.group[group2] = group1\n        elif self.rank[group1] < self.rank[group2]:\n            self.group[group1] = group2\n        else:\n            self.group[group1] = group2\n            self.rank[group2] += 1\n\n        return True\n    \nclass Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n        n = len(points)\n        all_edges = []\n        \n        # Storing all edges of our complete graph.\n        for curr_node in range(n): \n            for next_node in range(curr_node + 1, n): \n                weight = abs(points[curr_node][0] - points[next_node][0]) +\\\n                         abs(points[curr_node][1] - points[next_node][1])\n                all_edges.append((weight, curr_node, next_node))\n      \n        all_edges.sort()\n        \n        uf = UnionFind(n)\n        mst_cost = 0\n        edges_used = 0\n        \n        for weight, node1, node2 in all_edges:\n            if uf.join(node1, node2):\n                mst_cost += weight\n                edges_used += 1\n                if edges_used == n - 1:\n                    break\n                    \n        return mst_cost"
    },
    {
        "timestamp": "2022-04-25 13:03:17",
        "title": "Peeking Iterator",
        "title_slug": "peeking-iterator",
        "status": "Accepted",
        "lang": "java",
        "runtime": "9 ms",
        "memory": "43 MB",
        "code": "// Java Iterator interface reference:\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\n\nclass PeekingIterator implements Iterator<Integer> {\n\tprivate Iterator<Integer> iterator;\n    private boolean hasPeeked;\n    private Integer peekedElement;\n\n    public PeekingIterator(Iterator<Integer> iterator) {\n        this.iterator = iterator;\n    }\n\n    /**\n     * @return the next element in the iteration without advancing the iterator.\n     */\n    public Integer peek() {\n        if (!hasPeeked) {\n            peekedElement = iterator.next();\n            hasPeeked = true;\n        }\n        return peekedElement;\n    }\n\n    /**\n     * hasNext() and next() should behave the same as in the Iterator interface.\n     * Override them if needed.\n     */\n    @Override\n    public Integer next() {\n        if (!hasPeeked) {\n            return iterator.next();\n        }\n        Integer result = peekedElement;\n        hasPeeked = false;\n        peekedElement = null;\n        return result;\n    }\n\n    @Override\n    public boolean hasNext() {\n        return hasPeeked || iterator.hasNext();\n    }\n\n}"
    },
    {
        "timestamp": "2022-04-24 16:51:19",
        "title": "Intersection of Multiple Arrays",
        "title_slug": "intersection-of-multiple-arrays",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "125 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def intersection(self, nums: List[List[int]]) -> List[int]:\n        ans = set(nums[0])\n        for i in range(1, len(nums)):\n            ans = ans.intersection(nums[i])\n\n        return sorted(ans)\n"
    },
    {
        "timestamp": "2022-04-24 13:19:12",
        "title": "Design Underground System",
        "title_slug": "design-underground-system",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "258 ms",
        "memory": "25.5 MB",
        "code": "class UndergroundSystem:\n\n    def __init__(self):\n        self.hashmap = {}\n        self.tripTimes = {}\n\n    def checkIn(self, id: int, stationName: str, t: int) -> None:\n        self.hashmap[id] = (stationName, t)\n\n    def checkOut(self, id: int, stationName: str, t: int) -> None:\n        startStation, startTime = self.hashmap.get(id)\n        tripTime = t - startTime\n\n        if (startStation, stationName) not in self.tripTimes:\n            self.tripTimes[(startStation, stationName)] = [tripTime, 1]\n        else:\n            self.tripTimes[(startStation, stationName)][0] += tripTime\n            self.tripTimes[(startStation, stationName)][1] += 1\n\n    def getAverageTime(self, startStation: str, endStation: str) -> float:\n        total_time, count = self.tripTimes[(startStation, endStation)]\n        return total_time / count\n\n\n# Your UndergroundSystem object will be instantiated and called as such:\n# obj = UndergroundSystem()\n# obj.checkIn(id,stationName,t)\n# obj.checkOut(id,stationName,t)\n# param_3 = obj.getAverageTime(startStation,endStation)"
    },
    {
        "timestamp": "2022-04-23 21:50:16",
        "title": "Encode and Decode TinyURL",
        "title_slug": "encode-and-decode-tinyurl",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "42 ms",
        "memory": "15.8 MB",
        "code": "import hashlib\n\nclass Codec:\n\n    def __init__(self) -> None:\n        self._tinyURL = \"http://tinyurl.com/\"\n        self._urls = {}\n\n    def hash(self, url: str) -> str:\n        return self._tinyURL + hashlib.sha1(url.encode()).hexdigest()\n\n    def encode(self, longUrl: str) -> str:\n        \"\"\"Encodes a URL to a shortened URL.\"\"\"\n        key = self.hash(longUrl)\n        self._urls[key] = longUrl\n        return key\n         \n    def decode(self, shortUrl: str) -> str:\n        \"\"\"Decodes a shortened URL to its original URL.\"\"\"\n        return self._urls[shortUrl]\n\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))"
    },
    {
        "timestamp": "2022-04-22 18:09:47",
        "title": "Fizz Buzz",
        "title_slug": "fizz-buzz",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "43.5 MB",
        "code": "class Solution {\n    public List<String> fizzBuzz(int n) {\n        List<String> ans = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            String answer = \"\";\n            if (i % 3 == 0)\n                answer += \"Fizz\";\n            if (i % 5 == 0)\n                answer += \"Buzz\";\n            if (answer.equals(\"\"))\n                answer += Integer.toString(i);\n            ans.add(answer);\n        }\n        return ans;\n    }\n}"
    },
    {
        "timestamp": "2022-04-22 17:43:21",
        "title": "Add Two Integers",
        "title_slug": "add-two-integers",
        "status": "Accepted",
        "lang": "javascript",
        "runtime": "89 ms",
        "memory": "42.4 MB",
        "code": "/**\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar sum = function(num1, num2) {\n    return num1 + num2;\n};"
    },
    {
        "timestamp": "2022-04-22 17:43:02",
        "title": "Add Two Integers",
        "title_slug": "add-two-integers",
        "status": "Accepted",
        "lang": "golang",
        "runtime": "3 ms",
        "memory": "2 MB",
        "code": "func sum(num1 int, num2 int) int {\n    return num1 + num2\n}"
    },
    {
        "timestamp": "2022-04-22 15:22:45",
        "title": "Missing Number",
        "title_slug": "missing-number",
        "status": "Accepted",
        "lang": "java",
        "runtime": "6 ms",
        "memory": "50.6 MB",
        "code": "class Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int expectedSum = (n * (n+1)) / 2;\n        int currentSum = Arrays.stream(nums).sum();\n        return expectedSum - currentSum;\n    }\n}"
    },
    {
        "timestamp": "2022-04-22 15:20:17",
        "title": "Missing Number",
        "title_slug": "missing-number",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "51.8 MB",
        "code": "class Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int expectedSum = (n * (n+1)) / 2;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n        }\n        return expectedSum - currentSum;\n    }\n}"
    },
    {
        "timestamp": "2022-04-22 10:34:41",
        "title": "Design HashMap",
        "title_slug": "design-hashmap",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "218 ms",
        "memory": "17.1 MB",
        "code": "class MyHashMap:\n\n    def __init__(self):\n        self.map = {}\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.map:\n            self.map.update({key: value})\n        else:\n            self.map[key] = value\n\n    def get(self, key: int) -> int:\n        if key in self.map:\n            return self.map[key]\n        return -1\n\n    def remove(self, key: int) -> None:\n        if key in self.map:\n            del self.map[key]\n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)"
    },
    {
        "timestamp": "2022-04-21 09:48:21",
        "title": "Design HashSet",
        "title_slug": "design-hashset",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "252 ms",
        "memory": "18.9 MB",
        "code": "class MyHashSet:\n\n    def __init__(self):\n        self.hashset = set()\n\n    def add(self, key: int) -> None:\n        self.hashset.add(key)\n\n    def remove(self, key: int) -> None:\n        self.hashset.discard(key)\n        # if self.contains(key):\n        #     self.hashset.remove(key)\n\n    def contains(self, key: int) -> bool:\n        return key in self.hashset\n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)"
    },
    {
        "timestamp": "2022-04-21 09:17:41",
        "title": "Design HashSet",
        "title_slug": "design-hashset",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "162 ms",
        "memory": "18.9 MB",
        "code": "class MyHashSet:\n\n    def __init__(self):\n        self.hashset = set()\n\n    def add(self, key: int) -> None:\n        self.hashset.add(key)\n\n    def remove(self, key: int) -> None:\n        if self.contains(key):\n            self.hashset.remove(key)\n\n    def contains(self, key: int) -> bool:\n        return key in self.hashset\n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)"
    },
    {
        "timestamp": "2022-04-20 12:56:46",
        "title": "Binary Search Tree Iterator",
        "title_slug": "binary-search-tree-iterator",
        "status": "Accepted",
        "lang": "java",
        "runtime": "14 ms",
        "memory": "46.3 MB",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    private ArrayList<Integer> traversal;\n    private int pointer;\n    \n    public BSTIterator(TreeNode root) {\n        this.traversal = new ArrayList<>();    \n        this.inOrder(root);\n        this.pointer = 0;\n    }\n    \n    public void inOrder(TreeNode root) {\n        if (root == null) \n            return;\n            \n        inOrder(root.left);\n        this.traversal.add(root.val);\n        inOrder(root.right);\n    }\n    \n    public int next() {\n        int current = this.traversal.get(this.pointer);\n        this.pointer++;\n        return current;\n    }\n    \n    public boolean hasNext() {\n        return this.pointer < this.traversal.size();\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */"
    },
    {
        "timestamp": "2022-04-20 11:55:19",
        "title": "Binary Search Tree Iterator",
        "title_slug": "binary-search-tree-iterator",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "87 ms",
        "memory": "19.9 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        self.traversal = []\n        self.inOrder(root)\n        self.pointer = 0\n        \n    def inOrder(self, root):\n        if root is None: \n            return None\n        \n        self.inOrder(root.left)\n        self.traversal.append(root.val)\n        self.inOrder(root.right)\n        \n    def next(self) -> int:\n        current = self.traversal[self.pointer]\n        self.pointer += 1\n        return current\n\n    def hasNext(self) -> bool:\n        return self.pointer < len(self.traversal)\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()"
    },
    {
        "timestamp": "2022-04-20 00:59:35",
        "title": "Recover Binary Search Tree",
        "title_slug": "recover-binary-search-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "112 ms",
        "memory": "14.2 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        in_order = []\n        def inOrder(node):\n            if node is None: return\n            inOrder(node.left)\n            in_order.append(node)\n            inOrder(node.right)\n        \n        inOrder(root)\n\n        sorted_order = sorted(in_order, key=lambda x:x.val)\n        for i in range(len(in_order)):\n            if in_order[i] != sorted_order[i]:\n                in_order[i].val, sorted_order[i].val = sorted_order[i].val, in_order[i].val\n                return"
    },
    {
        "timestamp": "2022-04-18 18:03:09",
        "title": "Binary Tree Inorder Traversal",
        "title_slug": "binary-tree-inorder-traversal",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "40.3 MB",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private ArrayList<Integer> arr = new ArrayList<Integer>();\n    public List<Integer> inorderTraversal(TreeNode root) {\n        if (root == null) return arr;\n        inorderTraversal(root.left);\n        arr.add(root.val);\n        inorderTraversal(root.right);\n        return arr;\n    }\n}"
    },
    {
        "timestamp": "2022-04-18 17:58:25",
        "title": "Kth Smallest Element in a BST",
        "title_slug": "kth-smallest-element-in-a-bst",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "42.4 MB",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private ArrayList<Integer> values = new ArrayList<Integer>();\n        \n    public ArrayList<Integer> inOrder(TreeNode root) {\n        if (root == null) return values;\n        inOrder(root.left);\n        values.add(root.val);\n        inOrder(root.right);\n        return values;\n    }\n    \n    public int kthSmallest(TreeNode root, int k) {\n        ArrayList<Integer> nums = inOrder(root);\n        return nums.get(k-1);\n    }\n}"
    },
    {
        "timestamp": "2022-04-18 10:04:16",
        "title": "Kth Smallest Element in a BST",
        "title_slug": "kth-smallest-element-in-a-bst",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "66 ms",
        "memory": "18.2 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        def inorder(root):\n            return inorder(root.left) + [root.val] + inorder(root.right) if root else []\n        return inorder(root)[k-1]\n                "
    },
    {
        "timestamp": "2022-04-18 10:03:20",
        "title": "Kth Smallest Element in a BST",
        "title_slug": "kth-smallest-element-in-a-bst",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "63 ms",
        "memory": "18.1 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        return inorder(root)[k-1]\n                "
    },
    {
        "timestamp": "2022-04-17 10:19:44",
        "title": "Increasing Order Search Tree",
        "title_slug": "increasing-order-search-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "40 ms",
        "memory": "14 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def increasingBST(self, root: TreeNode) -> TreeNode:\n        def inOrder(root):\n            if root == None:\n                return []\n            return inOrder(root.left) + [root.val] + inOrder(root.right)\n        \n        ans = newNode = TreeNode(None)\n        for val in inOrder(root):\n            newNode.right = TreeNode(val)\n            newNode = newNode.right\n            \n        return ans.right"
    },
    {
        "timestamp": "2022-04-16 21:12:40",
        "title": "Binary Search Tree to Greater Sum Tree",
        "title_slug": "binary-search-tree-to-greater-sum-tree",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "39.7 MB",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private int total = 0;\n    public TreeNode bstToGst(TreeNode root) {\n        // reverse level-order traversal\n        if (root != null) {\n            bstToGst(root.right);\n            total += root.val;\n            root.val = total;\n            bstToGst(root.left);\n        }\n        return root;\n    }\n}"
    },
    {
        "timestamp": "2022-04-16 21:09:42",
        "title": "Convert BST to Greater Tree",
        "title_slug": "convert-bst-to-greater-tree",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "42.6 MB",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private int sum = 0;\n    \n    public TreeNode convertBST(TreeNode root) {    \n        if (root != null) {\n            convertBST(root.right);\n            sum += root.val;\n            root.val = sum;\n            convertBST(root.left);    \n        }\n        \n        return root;\n    }\n}"
    },
    {
        "timestamp": "2022-04-16 00:32:57",
        "title": "Trim a Binary Search Tree",
        "title_slug": "trim-a-binary-search-tree",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "41.8 MB",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode trimBST(TreeNode root, int low, int high) {\n        if (root == null) return null;\n        if (root.val > high)\n            return trimBST(root.left, low, high);\n        if (root.val < low)\n            return trimBST(root.right, low, high);\n        \n        root.left = trimBST(root.left, low, high);\n        root.right = trimBST(root.right, low, high);\n        return root;\n    }\n}"
    },
    {
        "timestamp": "2022-04-14 12:31:33",
        "title": "Add Two Integers",
        "title_slug": "add-two-integers",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "39.6 MB",
        "code": "class Solution {\n    public int sum(int num1, int num2) {\n        return num1 + num2;\n    }\n}"
    },
    {
        "timestamp": "2022-04-14 01:21:40",
        "title": "Search in a Binary Search Tree",
        "title_slug": "search-in-a-binary-search-tree",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "42.6 MB",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode searchBST(TreeNode root, int val) {\n        if (root == null)\n            return null;\n            \n        TreeNode current = root;\n        while (current != null) {\n            if (val < current.val)\n                current = current.left;\n            else if (val > current.val) \n                current = current.right;\n            else if (val == current.val)\n                return current;\n        }\n        return null;\n    }\n}"
    },
    {
        "timestamp": "2022-04-14 01:18:10",
        "title": "Search in a Binary Search Tree",
        "title_slug": "search-in-a-binary-search-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "76 ms",
        "memory": "16.4 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n        if root is None:\n            return None\n        \n        current = root\n        while current:\n            if current.val > val:\n                current = current.left\n            elif current.val < val:\n                current = current.right\n            elif current.val == val:\n                return current\n            \n        return None"
    },
    {
        "timestamp": "2022-04-14 00:54:15",
        "title": "Spiral Matrix II",
        "title_slug": "spiral-matrix-ii",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "40.5 MB",
        "code": "class Solution {\n    public int[][] generateMatrix(int n) {\n        int[][] matrix = new int[n][n];\n        int val = 1;\n        for (int layer = 0; layer < (n + 1) / 2; layer++) {\n            // direction 1 - traverse from left to right\n            for (int k = layer; k < n - layer; k++) {\n                matrix[layer][k] = val++;\n            }\n            // direction 2 - traverse from top to bottom\n            for (int k = layer + 1; k < n - layer; k++) {\n                matrix[k][n - layer - 1] = val++;\n            }\n            // direction 3 - traverse from right to left\n            for (int k = layer + 1; k < n - layer; k++) {\n                matrix[n - layer - 1][n - k - 1] = val++;\n            }\n            // direction 4 - traverse from bottom to top\n            for (int k = layer + 1; k < n - layer - 1; k++) {\n                matrix[n - k - 1][layer] = val++;\n            }\n        }\n        return matrix;\n    }\n}"
    },
    {
        "timestamp": "2022-04-12 23:04:34",
        "title": "Game of Life",
        "title_slug": "game-of-life",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "39 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        m, n = len(board), len(board[0])\n        dirs = [[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1]]\n        for i in range(m):\n            for j in range(n):\n                livecount = 0\n                for r, c in dirs:\n                    nr, nc = i + r, j + c\n                    if 0 <= nr < m and 0 <= nc < n and abs(board[nr][nc]) == 1:\n                        livecount += 1\n                if board[i][j] == 1:\n                    if livecount < 2 or livecount > 3:   \n                        board[i][j] = -1\n                else:\n                    if livecount == 3:  \n                        board[i][j] = 2\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 2:    \n                    board[i][j] = 1\n                elif board[i][j] == -1:\n                    board[i][j] = 0"
    },
    {
        "timestamp": "2022-04-11 12:19:13",
        "title": "Shift 2D Grid",
        "title_slug": "shift-2d-grid",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "480 ms",
        "memory": "32.4 MB",
        "code": "import numpy as np\n\nclass Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        return np.roll(grid, k)"
    },
    {
        "timestamp": "2022-04-10 09:19:58",
        "title": "Baseball Game",
        "title_slug": "baseball-game",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "47 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def calPoints(self, ops: List[str]) -> int:\n        stack = []\n        \n        for op in ops:\n            if op == 'C':\n                stack.pop()\n            elif op == 'D':\n                stack.append(stack[-1] * 2)\n            elif op == '+':\n                stack.append(stack[-1] + stack[-2])\n            else:\n                stack.append(int(op))\n                \n        return sum(stack)"
    },
    {
        "timestamp": "2022-04-09 18:29:55",
        "title": "Top K Frequent Elements",
        "title_slug": "top-k-frequent-elements",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "189 ms",
        "memory": "18.7 MB",
        "code": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        if k == len(nums):\n            return nums\n        \n        c = Counter(nums)\n        return heapq.nlargest(k, c, key=c.get)"
    },
    {
        "timestamp": "2022-04-08 22:25:53",
        "title": "Kth Largest Element in a Stream",
        "title_slug": "kth-largest-element-in-a-stream",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "100 ms",
        "memory": "18.1 MB",
        "code": "import heapq\n\nclass KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        self.k = k\n        self.heap = nums\n        heapq.heapify(self.heap)\n        while len(self.heap) > k:\n            heapq.heappop(self.heap)\n\n    def add(self, val: int) -> int:\n        heapq.heappush(self.heap, val)\n        if len(self.heap) > self.k:\n            heapq.heappop(self.heap)\n        return self.heap[0]\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)"
    },
    {
        "timestamp": "2022-04-07 22:52:55",
        "title": "Last Stone Weight",
        "title_slug": "last-stone-weight",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "34 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        for i, s in enumerate(stones):\n            stones[i] = -s\n            \n        heapify(stones) \n        while stones:\n            s1 = -heappop(stones)\n            if not stones:\n                return s1\n            s2 = -heappop(stones)\n            if s1 > s2:\n                heappush(stones, s2-s1)\n            \n        return 0 "
    },
    {
        "timestamp": "2022-04-06 23:57:54",
        "title": "3Sum With Multiplicity",
        "title_slug": "3sum-with-multiplicity",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "68 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def threeSumMulti(self, arr: List[int], target: int) -> int:\n        MOD = 10**9 + 7\n        count = collections.Counter(arr)\n        keys = sorted(count)\n\n        ans = 0\n\n        # Now, let's do a 3sum on \"keys\", for i <= j <= k.\n        # We will use count to add the correct contribution to ans.\n        for i, x in enumerate(keys):\n            T = target - x\n            j, k = i, len(keys) - 1\n            while j <= k:\n                y, z = keys[j], keys[k]\n                if y + z < T:\n                    j += 1\n                elif y + z > T:\n                    k -= 1\n                else: # x+y+z == T, now calculate the size of the contribution\n                    if i < j < k:\n                        ans += count[x] * count[y] * count[z]\n                    elif i == j < k:\n                        ans += count[x] * (count[x] - 1) / 2 * count[z]\n                    elif i < j == k:\n                        ans += count[x] * count[y] * (count[y] - 1) / 2\n                    else:  # i == j == k\n                        ans += count[x] * (count[x] - 1) * (count[x] - 2) / 6\n\n                    j += 1\n                    k -= 1\n\n        return int(ans % MOD)"
    },
    {
        "timestamp": "2022-04-05 23:48:16",
        "title": "Container With Most Water",
        "title_slug": "container-with-most-water",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "756 ms",
        "memory": "27.6 MB",
        "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        i = 0\n        j = len(height)-1\n        \n        area = 0\n        \n        while i < j:\n            area = max(area, (j - i) * min(height[i], height[j]))\n            if height[i] < height[j]:\n                i += 1\n            else:\n                j -= 1\n                \n        return area"
    },
    {
        "timestamp": "2022-04-04 22:39:45",
        "title": "Swapping Nodes in a Linked List",
        "title_slug": "swapping-nodes-in-a-linked-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1817 ms",
        "memory": "48.5 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        left = right = head\n        \n        # traverse to the Kth node from left\n        for _ in range(k-1):\n            left = left.next\n            \n        tail = left\n        \n        # right + k = tail\n        while tail.next:\n            right, tail = right.next, tail.next\n            \n        left.val, right.val = right.val, left.val\n        \n        return head"
    },
    {
        "timestamp": "2022-04-03 23:51:40",
        "title": "Next Permutation",
        "title_slug": "next-permutation",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "43.9 MB",
        "code": "public class Solution {\n    public void nextPermutation(int[] nums) {\n        int i = nums.length - 2;\n        while (i >= 0 && nums[i + 1] <= nums[i]) {\n            i--;\n        }\n        if (i >= 0) {\n            int j = nums.length - 1;\n            while (nums[j] <= nums[i]) {\n                j--;\n            }\n            swap(nums, i, j);\n        }\n        reverse(nums, i + 1);\n    }\n\n    private void reverse(int[] nums, int start) {\n        int i = start, j = nums.length - 1;\n        while (i < j) {\n            swap(nums, i, j);\n            i++;\n            j--;\n        }\n    }\n\n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}"
    },
    {
        "timestamp": "2022-04-02 23:58:38",
        "title": "Valid Palindrome II",
        "title_slug": "valid-palindrome-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "216 ms",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        def check_palindrome(s, i, j):\n            while i < j:\n                if s[i] != s[j]:\n                    return False\n                i += 1\n                j -= 1\n            \n            return True\n\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            # Found a mismatched pair - try both deletions\n            if s[i] != s[j]:\n                return check_palindrome(s, i, j - 1) or check_palindrome(s, i + 1, j)\n            i += 1\n            j -= 1\n        \n        return True"
    },
    {
        "timestamp": "2022-04-02 15:45:36",
        "title": "Find Triangular Sum of an Array",
        "title_slug": "find-triangular-sum-of-an-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "3631 ms",
        "memory": "19 MB",
        "code": "class Solution:\n    def triangularSum(self, nums: List[int]) -> int:\n        n = len(nums)\n        if len(nums) == 1:\n            return nums[0]\n\n\n        newNums = [0] * (n-1)       \n\n        for i in range(n-1):\n            newNums[i] = (nums[i] + nums[i+1]) % 10\n\n        return self.triangularSum(newNums)"
    },
    {
        "timestamp": "2022-04-02 15:33:51",
        "title": "Minimum Bit Flips to Convert Number",
        "title_slug": "minimum-bit-flips-to-convert-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def minBitFlips(self, start: int, goal: int) -> int:\n        def countSetBits(n):\n            count = 0\n            while n:\n                count += 1\n                n &= (n-1)\n            return count\n\n        return countSetBits(start^goal)\n \n"
    },
    {
        "timestamp": "2022-04-01 11:47:52",
        "title": "Reverse String",
        "title_slug": "reverse-string",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "55.2 MB",
        "code": "class Solution {\n    public void reverseString(char[] s) {\n        int i = 0;\n        int j = s.length - 1;\n\n        while (i < j) {\n            char temp = s[i];\n            s[i] = s[j];\n            s[j] = temp;\n            i++;\n            j--;\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-03-31 23:52:02",
        "title": "Split Array Largest Sum",
        "title_slug": "split-array-largest-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def splitArray(self, nums: List[int], m: int) -> int:\n        \n        def min_subarrays_required(max_sum_allowed: int) -> int:\n            current_sum = 0\n            splits_required = 0\n            \n            for element in nums:\n                if current_sum + element <= max_sum_allowed:\n                    current_sum += element\n                else:\n                    current_sum = element\n                    splits_required += 1\n\n            return splits_required + 1\n        \n        left = max(nums)\n        right = sum(nums)\n        while left <= right:\n            max_sum_allowed = (left + right) // 2\n            \n            if min_subarrays_required(max_sum_allowed) <= m:\n                right = max_sum_allowed - 1\n                minimum_largest_split_sum = max_sum_allowed\n            else:\n                left = max_sum_allowed + 1\n        \n        return minimum_largest_split_sum"
    },
    {
        "timestamp": "2022-03-30 09:31:10",
        "title": "Search a 2D Matrix",
        "title_slug": "search-a-2d-matrix",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "321 ms",
        "memory": "32.6 MB",
        "code": "import numpy as np\n\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        for mat in matrix:\n            if self.search(mat, target):\n                return True\n            \n        return False\n        \n    \n    def search(self, nums, target: int):\n        low = 0\n        high = len(nums) - 1\n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            \n            if nums[mid] == target:\n                return True\n            elif target > nums[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False\n        "
    },
    {
        "timestamp": "2022-03-30 09:29:02",
        "title": "Search a 2D Matrix",
        "title_slug": "search-a-2d-matrix",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "239 ms",
        "memory": "32.5 MB",
        "code": "import numpy as np\n\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        low = 0\n        nums = np.array(matrix).flatten().tolist()       # O(n^2)\n        high = len(nums) - 1\n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            \n            if nums[mid] == target:\n                return True\n            elif target > nums[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False"
    },
    {
        "timestamp": "2022-03-29 10:30:12",
        "title": "Find the Duplicate Number",
        "title_slug": "find-the-duplicate-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1043 ms",
        "memory": "35.9 MB",
        "code": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        c = Counter(nums)\n        return max(c, key=c.get)"
    },
    {
        "timestamp": "2022-03-28 23:41:18",
        "title": "Search in Rotated Sorted Array II",
        "title_slug": "search-in-rotated-sorted-array-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "57 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        return target in nums"
    },
    {
        "timestamp": "2022-03-27 10:55:07",
        "title": "The K Weakest Rows in a Matrix",
        "title_slug": "the-k-weakest-rows-in-a-matrix",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "226 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        soldiers = [(mat[i].count(1), i) for i in range(len(mat))]\n        return [y for _, y in sorted(soldiers, key=lambda x: x[0])][:k]\n"
    },
    {
        "timestamp": "2022-03-26 23:23:21",
        "title": "Binary Search",
        "title_slug": "binary-search",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "273 ms",
        "memory": "15.5 MB",
        "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        low = 0\n        high = len(nums) - 1\n        \n        while low <= high:\n            mid = low + (high - low) // 2\n\n            if nums[mid] == target: \n                return mid\n            elif target > nums[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n                \n        return -1"
    },
    {
        "timestamp": "2022-03-26 23:21:31",
        "title": "Binary Search",
        "title_slug": "binary-search",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "54.1 MB",
        "code": "class Solution {\n    public int search(int[] nums, int target) {\n        int low = 0;\n        int high = nums.length - 1;\n\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (nums[mid] == target)\n                return mid;\n            else if (target > nums[mid])\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n}"
    },
    {
        "timestamp": "2022-03-25 20:22:27",
        "title": "Two City Scheduling",
        "title_slug": "two-city-scheduling",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "44 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        n = len(costs)\n        costs.sort(key=lambda x: x[0] - x[1])\n        return sum(i for i, _ in costs[:n//2]) + sum(j for _, j in costs[n//2:])\n"
    },
    {
        "timestamp": "2022-03-24 20:15:36",
        "title": "Boats to Save People",
        "title_slug": "boats-to-save-people",
        "status": "Accepted",
        "lang": "java",
        "runtime": "14 ms",
        "memory": "50.7 MB",
        "code": "class Solution {\n    public int numRescueBoats(int[] people, int limit) {\n        Arrays.sort(people);\n        int ans = 0;\n        int i = 0;\n        int j = people.length - 1;\n        \n        while (i <= j) {\n            ans++;\n            if (people[i] + people[j] <= limit) \n                i++;\n            j--;\n        }\n        return ans;\n    }\n}"
    },
    {
        "timestamp": "2022-03-24 20:13:44",
        "title": "Boats to Save People",
        "title_slug": "boats-to-save-people",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "896 ms",
        "memory": "20.9 MB",
        "code": "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        if len(people) == 1: return 1\n\n        i = 0\n        j = len(people)-1\n\n        count = 0\n        while i <= j:\n            count += 1\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n               \n        return count\n"
    },
    {
        "timestamp": "2022-03-23 20:48:00",
        "title": "Broken Calculator",
        "title_slug": "broken-calculator",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "41.5 MB",
        "code": "class Solution {\n    public int brokenCalc(int startValue, int target) {\n        int count = 0;\n        while (target > startValue) {\n            if (target % 2 != 0) \n                target += 1;\n            else \n                target /= 2;\n            count++;\n        }\n        return count + startValue - target;\n    }\n}"
    },
    {
        "timestamp": "2022-03-23 20:46:24",
        "title": "Broken Calculator",
        "title_slug": "broken-calculator",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "45 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        count = 0\n        while target > startValue:\n            if target % 2 != 0:\n                target += 1\n            else:\n                target //= 2\n            count += 1\n            \n        return count + startValue - target"
    },
    {
        "timestamp": "2022-03-22 23:59:08",
        "title": "Smallest String With A Given Numeric Value",
        "title_slug": "smallest-string-with-a-given-numeric-value",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "332 ms",
        "memory": "15.3 MB",
        "code": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        res, k, i = ['a'] * n, k - n, n - 1\n        while k:\n            k += 1\n            if k / 26 >= 1:\n                res[i] = 'z' \n                k = k - 26\n                i -= 1\n            else:\n                res[i] = chr(k + 96)\n                k = 0\n\n        return ''.join(res)"
    },
    {
        "timestamp": "2022-03-21 17:35:04",
        "title": "Partition Labels",
        "title_slug": "partition-labels",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "63 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last = {c: i for i, c in enumerate(s)}\n        j = anchor = 0\n        ans = []\n        for i, c in enumerate(s):\n            j = max(j, last[c])\n            if i == j:\n                ans.append(i - anchor + 1)\n                anchor = i + 1\n            \n        return ans"
    },
    {
        "timestamp": "2022-03-20 23:52:06",
        "title": "Minimum Domino Rotations For Equal Row",
        "title_slug": "minimum-domino-rotations-for-equal-row",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1164 ms",
        "memory": "15.2 MB",
        "code": "class Solution:\n    def minDominoRotations(self, tops: List[int], bottoms: List[int]) -> int:\n        total = len(tops)\n        top_fr, bot_fr, val_total = [0]*7, [0]*7, [total]*7\n        for top, bot in zip(tops, bottoms):\n            if top == bot:\n                val_total[top] -= 1\n            else:\n                top_fr[top] += 1\n                bot_fr[bot] += 1\n                \n        for val in range(1, 7):\n            if (val_total[val] - top_fr[val]) == bot_fr[val]:\n                return min(top_fr[val], bot_fr[val])\n            \n        return -1"
    },
    {
        "timestamp": "2022-03-19 23:38:05",
        "title": "Maximum Frequency Stack",
        "title_slug": "maximum-frequency-stack",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "314 ms",
        "memory": "22.5 MB",
        "code": "class FreqStack:\n\n    def __init__(self):\n        self.freq = collections.Counter()\n        self.group = collections.defaultdict(list)\n        self.maxfreq = 0\n\n    def push(self, val: int) -> None:\n        f = self.freq[val] + 1\n        self.freq[val] = f\n        if f > self.maxfreq:\n            self.maxfreq = f\n        self.group[f].append(val)\n\n    def pop(self) -> int:\n        x = self.group[self.maxfreq].pop()\n        self.freq[x] -= 1\n        if not self.group[self.maxfreq]:\n            self.maxfreq -= 1\n        \n        return x\n\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack()\n# obj.push(val)\n# param_2 = obj.pop()"
    },
    {
        "timestamp": "2022-03-18 23:58:45",
        "title": "Remove Duplicate Letters",
        "title_slug": "remove-duplicate-letters",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        last_index = dict()\n        stack = []\n        visited = set()\n\n        for i in range(len(s)):\n            last_index[s[i]] = i\n\n        for i in range(len(s)):\n            if s[i] not in visited:\n                while stack and stack[-1] > s[i] and last_index[stack[-1]] > i:\n                    visited.remove(stack.pop())\n\n                stack.append(s[i])\n                visited.add(s[i])\n\n        return ''.join(stack)"
    },
    {
        "timestamp": "2022-03-17 23:29:39",
        "title": "Score of Parentheses",
        "title_slug": "score-of-parentheses",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "67 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def scoreOfParentheses(self, s: str) -> int:\n        stack = [0]\n\n        for c in s:\n            if c == '(':\n                stack.append(0)\n            else:\n                v = stack.pop()\n                stack[-1] += max(2*v, 1)\n\n        return stack.pop()"
    },
    {
        "timestamp": "2022-03-16 23:56:11",
        "title": "Validate Stack Sequences",
        "title_slug": "validate-stack-sequences",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "154 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool: \n        i = 0\n        stack = []\n        \n        for val in pushed:\n            stack.append(val)\n            while stack and i < len(popped) and stack[-1] == popped[i]:\n                stack.pop()\n                i += 1\n                \n        return i == len(popped)"
    },
    {
        "timestamp": "2022-03-15 22:44:29",
        "title": "Minimum Remove to Make Valid Parentheses",
        "title_slug": "minimum-remove-to-make-valid-parentheses",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "464 ms",
        "memory": "15.3 MB",
        "code": "class Solution:\n    def minRemoveToMakeValid(self, s: str) -> str:\n        cnt_open, cnt_close, res = 0, 0, ''\n        for ch in s:\n            if ch == '(': \n                cnt_open += 1\n            if ch == ')': \n                cnt_close += 1\n            if cnt_open < cnt_close:\n                cnt_close -= 1\n            else:\n                res = res + ch\n\n        s = res\n        cnt_open, cnt_close, res = 0, 0, ''\n        for ch in reversed(s):\n            if ch == '(': \n                cnt_open += 1\n            if ch == ')': \n                cnt_close += 1\n            if cnt_close < cnt_open:\n                cnt_open -= 1\n            else:\n                res = ch + res\n                \n        return res"
    },
    {
        "timestamp": "2022-03-14 23:04:37",
        "title": "Simplify Path",
        "title_slug": "simplify-path",
        "status": "Accepted",
        "lang": "java",
        "runtime": "8 ms",
        "memory": "44 MB",
        "code": "class Solution {\n    public String simplifyPath(String path) {\n        Stack<String> s = new Stack<>();\n        StringBuilder res = new StringBuilder();\n        \n        String[] dir = path.split(\"/\");\n        \n        for(int i = 0 ; i< dir.length;i++) {\n            if(!s.isEmpty()  && dir[i].equals(\"..\")) s.pop();\n            else if(!dir[i].equals(\"\") && !dir[i].equals(\".\") && !dir[i].equals(\"..\"))\n                s.push(dir[i]);\n        }\n        \n        \n        if(s.isEmpty()) return \"/\";\n        while(!s.isEmpty()){\n            res.insert(0, s.pop()).insert(0,\"/\");\n        }\n        \n        return res.toString();\n    }\n}"
    },
    {
        "timestamp": "2022-03-13 22:55:27",
        "title": "Classes More Than 5 Students",
        "title_slug": "classes-more-than-5-students",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1184 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT class FROM courses\nGROUP BY class\nHAVING COUNT(DISTINCT student) >= 5"
    },
    {
        "timestamp": "2022-03-13 00:00:30",
        "title": "Valid Parentheses",
        "title_slug": "valid-parentheses",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "37 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 2:\n            return False\n        \n        ht = { '(': ')', '[': ']', '{': '}' }\n        stack = ['']\n        \n        for i in s:\n            if i in ht.keys():    # opened brackets\n                stack.append(ht[i])\n            elif i != stack.pop():\n                return False\n            \n        return stack == ['']"
    },
    {
        "timestamp": "2022-03-12 23:59:30",
        "title": "Copy List with Random Pointer",
        "title_slug": "copy-list-with-random-pointer",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "60 ms",
        "memory": "14.9 MB",
        "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Node') -> 'Node':\n        if not head: return head\n        mapping = {}\n        t = head\n        while t:\n            newT = Node(t.val)\n            mapping[t] = newT\n            t = t.next\n        \n        h = head\n        while h:\n            H = mapping[h]\n            H.next = mapping[h.next] if h.next else None\n            H.random = mapping[h.random] if h.random else None\n            h = h.next\n        return mapping[head]"
    },
    {
        "timestamp": "2022-03-11 23:52:21",
        "title": "Rotate List",
        "title_slug": "rotate-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "52 ms",
        "memory": "13.9 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head: \n            return head\n        \n        zero = ListNode(next=head)\n        \n        count, tail = 0, zero\n        while tail.next:\n            count, tail = count + 1, tail.next\n            \n        k = k % count\n        if not k: \n            return head\n\n        newTail = zero\n        for _ in range(0, count - k):\n            newTail = newTail.next\n\n        zero.next, tail.next, newTail.next = newTail.next, head, None\n            \n        return zero.next"
    },
    {
        "timestamp": "2022-03-10 22:43:30",
        "title": "Add Two Numbers",
        "title_slug": "add-two-numbers",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "42.4 MB",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode p = l1, q = l2, curr = dummyHead;\n        int carry = 0;\n        while (p != null || q != null) {\n            int x = (p != null) ? p.val : 0;\n            int y = (q != null) ? q.val : 0;\n            int sum = carry + x + y;\n            carry = sum / 10;\n            curr.next = new ListNode(sum % 10);\n            curr = curr.next;\n            if (p != null) p = p.next;\n            if (q != null) q = q.next;\n        }\n        if (carry > 0) {\n            curr.next = new ListNode(carry);\n        }\n        return dummyHead.next;\n    }\n}"
    },
    {
        "timestamp": "2022-03-09 23:56:36",
        "title": "Remove Duplicates from Sorted List II",
        "title_slug": "remove-duplicates-from-sorted-list-ii",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "44.6 MB",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        // sentinel\n        ListNode sentinel = new ListNode(0, head);\n\n        // predecessor = the last node \n\n        ListNode pred = sentinel;\n        \n        while (head != null) {\n            if (head.next != null && head.val == head.next.val) {\n                // move till the end of duplicates sublist\n                while (head.next != null && head.val == head.next.val) {\n                    head = head.next;    \n                }\n                pred.next = head.next;     \n            } else {\n                pred = pred.next;    \n            }\n                \n            head = head.next;    \n        }  \n        return sentinel.next;\n    }\n}"
    },
    {
        "timestamp": "2022-03-08 22:44:08",
        "title": "Linked List Cycle",
        "title_slug": "linked-list-cycle",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "46 MB",
        "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null) return false;\n        ListNode fast = head.next;\n        ListNode slow = head;\n        \n        while (fast != null && fast.next != null && slow != null) {\n            if (fast == slow) {\n                return true;\n            }\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        return false;\n    }\n}"
    },
    {
        "timestamp": "2022-03-08 22:35:36",
        "title": "Design Parking System",
        "title_slug": "design-parking-system",
        "status": "Accepted",
        "lang": "java",
        "runtime": "13 ms",
        "memory": "54.1 MB",
        "code": "class ParkingSystem {\n\n    private int big;\n    private int medium;\n    private int small;\n    \n    public ParkingSystem(int big, int medium, int small) {\n        this.big = big;\n        this.medium = medium;\n        this.small = small;\n    }\n    \n    public boolean addCar(int carType) {\n        if (carType == 1) {\n            if (this.big < 1) \n                return false;\n            this.big--;\n        } else if (carType == 2) {\n            if (this.medium < 1) \n                return false;\n            this.medium--;\n        } else if (carType == 3) {\n            if (this.small < 1) \n                return false;\n            this.small--;\n        }\n        return true;\n    }\n}\n\n/**\n * Your ParkingSystem object will be instantiated and called as such:\n * ParkingSystem obj = new ParkingSystem(big, medium, small);\n * boolean param_1 = obj.addCar(carType);\n */"
    },
    {
        "timestamp": "2022-03-08 21:01:41",
        "title": "Range Sum Query - Immutable",
        "title_slug": "range-sum-query-immutable",
        "status": "Accepted",
        "lang": "java",
        "runtime": "102 ms",
        "memory": "47.5 MB",
        "code": "class NumArray {\n    \n    int[] nums;\n    \n    public NumArray(int[] nums) {\n        this.nums = nums;\n    }\n    \n    public int sumRange(int left, int right) {\n        int sum = 0;\n        for (int i = left; i <= right; i++) {\n            sum += nums[i];\n        }\n        return sum;\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * int param_1 = obj.sumRange(left,right);\n */"
    },
    {
        "timestamp": "2022-03-07 23:14:16",
        "title": "Merge Two Sorted Lists",
        "title_slug": "merge-two-sorted-lists",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "43 MB",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        if (list1 == null) {\n            return list2;\n        }\n        if (list2==null) {\n            return list1;\n        }\n        \n        if (list1.val < list2.val) {\n            list1.next = mergeTwoLists(list1.next, list2);\n            return list1;\n        }\n        \n        else  {\n            list2.next = mergeTwoLists(list2.next , list1);\n        }\n        return list2;\n    }\n}"
    },
    {
        "timestamp": "2022-03-07 09:57:18",
        "title": "Implement Queue using Stacks",
        "title_slug": "implement-queue-using-stacks",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "50 ms",
        "memory": "14 MB",
        "code": "class MyQueue:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.s1 = []\n        self.s2 = []\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        Time: O(1)\n        \"\"\"\n        self.s1.append(x)\n        \n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        Time: Amortized O(1), worst case O(n)\n        \"\"\"\n        if not self.s2:\n            while self.s1:\n                self.s2.append(self.s1.pop())\n        return self.s2.pop()\n        \n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        if not self.s2:\n            return self.s1[0]\n        else:\n            return self.s2[-1]\n        \n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        return not self.s1 and not self.s2\n\n        \n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"
    },
    {
        "timestamp": "2022-03-07 09:31:09",
        "title": "Contains Duplicate",
        "title_slug": "contains-duplicate",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "579 ms",
        "memory": "25.9 MB",
        "code": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        c = Counter(nums)\n        return True if max(c.values()) > 1 else False"
    },
    {
        "timestamp": "2022-03-07 09:24:00",
        "title": "Valid Anagram",
        "title_slug": "valid-anagram",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "40 ms",
        "memory": "15.2 MB",
        "code": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        return sorted(s) == sorted(t)"
    },
    {
        "timestamp": "2022-03-07 09:22:32",
        "title": "Sort Integers by The Number of 1 Bits",
        "title_slug": "sort-integers-by-the-number-of-1-bits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "64 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def sortByBits(self, arr: List[int]) -> List[int]:\n        arr.sort()\n        return sorted(arr, key=lambda x: bin(x).count(\"1\"))"
    },
    {
        "timestamp": "2022-03-06 23:12:33",
        "title": "Count All Valid Pickup and Delivery Options",
        "title_slug": "count-all-valid-pickup-and-delivery-options",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def countOrders(self, n: int) -> int:\n        MOD = 10**9 + 7\n        ans = 1\n\n        for i in range(1, n + 1):\n            ans = ans * i\n            ans = ans * (2 * i - 1)\n            ans %= MOD\n        \n        return ans"
    },
    {
        "timestamp": "2022-03-06 20:20:10",
        "title": "Sum of Left Leaves",
        "title_slug": "sum-of-left-leaves",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "14.8 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        else:\n            return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)\n                "
    },
    {
        "timestamp": "2022-03-06 18:02:07",
        "title": "Maximum Depth of Binary Tree",
        "title_slug": "maximum-depth-of-binary-tree",
        "status": "Accepted",
        "lang": "java",
        "runtime": "29 ms",
        "memory": "44.5 MB",
        "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if (root == null) return 0;\n        \n        int left = maxDepth(root.left);\n        int right = maxDepth(root.right);\n        System.out.println(left);\n        \n        return 1 + Math.max(left, right);\n    }\n}"
    },
    {
        "timestamp": "2022-03-06 17:38:29",
        "title": "Middle of the Linked List",
        "title_slug": "middle-of-the-linked-list",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "41.7 MB",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode slow = head;\n        ListNode fast = head;\n        \n        while (fast != null) {\n            fast = fast.next;\n            if (fast == null) {\n                return slow;\n            }\n            slow = slow.next;\n            fast = fast.next;\n        }\n        return slow;\n    }\n}"
    },
    {
        "timestamp": "2022-03-06 17:09:21",
        "title": "Convert Binary Number in a Linked List to Integer",
        "title_slug": "convert-binary-number-in-a-linked-list-to-integer",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "41.9 MB",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public int getDecimalValue(ListNode head) {\n        int num = head.val;\n        while (head.next != null) {\n            num = num * 2 + head.next.val;\n            head = head.next;\n        }\n        return num;\n    }\n}"
    },
    {
        "timestamp": "2022-03-06 17:07:30",
        "title": "Convert Binary Number in a Linked List to Integer",
        "title_slug": "convert-binary-number-in-a-linked-list-to-integer",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "41.7 MB",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public int getDecimalValue(ListNode head) {\n        String number = \"\";\n        while (head != null) {\n            number += Integer.toString(head.val);\n            head = head.next;\n        }\n        return Integer.parseInt(number, 2);\n    }\n}"
    },
    {
        "timestamp": "2022-03-05 23:58:11",
        "title": "Delete and Earn",
        "title_slug": "delete-and-earn",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "99 ms",
        "memory": "28.1 MB",
        "code": "class Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        points = defaultdict(int)\n        max_number = 0\n        # Precompute how many points we gain from taking an element\n        for num in nums:\n            points[num] += num\n            max_number = max(max_number, num)\n\n        @cache\n        def max_points(num):\n            # Check for base cases\n            if num == 0:\n                return 0\n            if num == 1:\n                return points[1]\n            \n            # Apply recurrence relation\n            return max(max_points(num - 1), max_points(num - 2) + points[num])\n        \n        return max_points(max_number)"
    },
    {
        "timestamp": "2022-03-05 23:55:21",
        "title": "Verifying an Alien Dictionary",
        "title_slug": "verifying-an-alien-dictionary",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "51 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        return words == sorted(words, key=lambda word: [order.index(char) for char in word])\n"
    },
    {
        "timestamp": "2022-03-05 23:51:38",
        "title": "Decrypt String from Alphabet to Integer Mapping",
        "title_slug": "decrypt-string-from-alphabet-to-integer-mapping",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def freqAlphabets(self, s: str) -> str:\n        res = \"\"\n        i = len(s)-1\n\n        while i >= 0:\n            if s[i] == '#':\n                res += chr(int(s[i-2:i]) + 96)\n                i -= 3\n            else:\n                res += chr(int(s[i]) + 96)\n                i -= 1\n                \n        return res[::-1]"
    },
    {
        "timestamp": "2022-03-05 18:50:12",
        "title": "To Lower Case",
        "title_slug": "to-lower-case",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "42.1 MB",
        "code": "class Solution {\n    public String toLowerCase(String s) {\n        return s.toLowerCase();\n    }\n}"
    },
    {
        "timestamp": "2022-03-05 16:08:44",
        "title": "Sort the Jumbled Numbers",
        "title_slug": "sort-the-jumbled-numbers",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1372 ms",
        "memory": "20.2 MB",
        "code": "class Solution:\n    def sortJumbled(self, mapping: List[int], nums: List[int]) -> List[int]:\n        def digits(num):\n            new = 0\n            for i in str(num):\n                idx = mapping[int(i)]\n                new = (new * 10) + idx\n            return new\n\n        return sorted(nums, key=digits)"
    },
    {
        "timestamp": "2022-03-04 23:10:35",
        "title": "Champagne Tower",
        "title_slug": "champagne-tower",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "100 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:\n        A = [[0] * k for k in range(1, 102)]\n        A[0][0] = poured\n        for r in range(query_row + 1):\n            for c in range(r+1):\n                q = (A[r][c] - 1.0) / 2.0\n                if q > 0:\n                    A[r+1][c] += q\n                    A[r+1][c+1] += q\n\n        return min(1, A[query_row][query_glass])"
    },
    {
        "timestamp": "2022-03-04 18:33:07",
        "title": "Find the Difference",
        "title_slug": "find-the-difference",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "48 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        s_counter, t_counter = Counter(s), Counter(t)\n        for char in t_counter:\n            if not s_counter[char] == t_counter[char]:\n                return char\n"
    },
    {
        "timestamp": "2022-03-04 18:31:26",
        "title": "Goal Parser Interpretation",
        "title_slug": "goal-parser-interpretation",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "75 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def interpret(self, command: str) -> str:\n        result = \"\"\n        \n        for i in range(len(command)):\n            if command[i] == 'G':\n                result += command[i]\n                \n            elif command[i] == '(':\n                if command[i+1] == ')':\n                    result += 'o'\n                else:\n                    result += 'al'\n                \n        return result"
    },
    {
        "timestamp": "2022-03-04 18:28:47",
        "title": "Merge Strings Alternately",
        "title_slug": "merge-strings-alternately",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "48 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        return \"\".join(w1 + w2 for w1, w2 in zip_longest(word1, word2, fillvalue=\"\"))\n"
    },
    {
        "timestamp": "2022-03-03 23:48:04",
        "title": "Arithmetic Slices",
        "title_slug": "arithmetic-slices",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "54 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        curr_diff, count = -1, 0\n        res = 0\n        for i in range(1, len(nums)):\n            new_diff = nums[i] - nums[i-1]\n            if new_diff != curr_diff:\n                curr_diff, count = new_diff, 1\n            else:\n                res += count\n                count += 1\n                \n        return res"
    },
    {
        "timestamp": "2022-03-03 23:36:02",
        "title": "Reshape the Matrix",
        "title_slug": "reshape-the-matrix",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "326 ms",
        "memory": "32.8 MB",
        "code": "import numpy as np\n\nclass Solution:\n    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:\n        if len(mat) * len(mat[0]) != r*c:\n            return mat\n        else:\n            return np.reshape(mat, (r,c))"
    },
    {
        "timestamp": "2022-03-03 00:07:04",
        "title": "Matrix Diagonal Sum",
        "title_slug": "matrix-diagonal-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "137 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        n = len(mat)\n        j = n-1\n        diagonalSum = 0\n        \n        \n        \n        for i in range(n):\n            diagonalSum += mat[i][i]\n            diagonalSum += mat[i][j]\n            j -= 1\n        \n        return diagonalSum - mat[n//2][n//2] if n % 2 != 0 else diagonalSum"
    },
    {
        "timestamp": "2022-03-02 23:58:46",
        "title": "Sum of All Odd Length Subarrays",
        "title_slug": "sum-of-all-odd-length-subarrays",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "96 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        size = len(arr) - 1 if len(arr) % 2 == 0 else len(arr)\n        acum = 0\n        while (size > 0):\n            start = 0\n            while (start + size <= len(arr)):\n                acum += sum(arr[start:(size+start)])\n                start += 1\n            size -= 2\n        return acum"
    },
    {
        "timestamp": "2022-03-02 23:14:28",
        "title": "Is Subsequence",
        "title_slug": "is-subsequence",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        subseq = 0\n        \n        if s == \"\": return True\n        if len(s) > len(t): return False\n        \n        for c in t:\n            if subseq <= len(s)-1:\n                if s[subseq] == c:\n                    subseq += 1\n\n        return len(s) == subseq"
    },
    {
        "timestamp": "2022-03-02 23:14:14",
        "title": "Is Subsequence",
        "title_slug": "is-subsequence",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "24 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i, j = 0, 0\n        subseq = 0\n        \n        if s == \"\": return True\n        if len(s) > len(t): return False\n        \n        for c in t:\n            if subseq <= len(s)-1:\n                if s[subseq] == c:\n                    subseq += 1\n\n        return len(s) == subseq"
    },
    {
        "timestamp": "2022-03-02 19:57:31",
        "title": "Move Zeroes",
        "title_slug": "move-zeroes",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "350 ms",
        "memory": "15.5 MB",
        "code": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        j = 0\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                nums[i], nums[j] = nums[j], nums[i]\n                j += 1"
    },
    {
        "timestamp": "2022-03-02 14:14:03",
        "title": "Richest Customer Wealth",
        "title_slug": "richest-customer-wealth",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "88 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n        return max(map(sum, accounts))"
    },
    {
        "timestamp": "2022-03-01 23:25:28",
        "title": "Next Greater Element I",
        "title_slug": "next-greater-element-i",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "96 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        next_greater = defaultdict(lambda: -1)\n        stack = []\n        \n        for num in nums2:\n            while stack and stack[-1] < num:\n                next_greater[stack.pop()] = num\n            stack.append(num)\n            \n        return (next_greater[i] for i in nums1)"
    },
    {
        "timestamp": "2022-03-01 22:51:59",
        "title": "N-ary Tree Preorder Traversal",
        "title_slug": "n-ary-tree-preorder-traversal",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "16.1 MB",
        "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def preorder(self, root: 'Node') -> List[int]:\n        nodes = []\n        if root:\n            nodes.append(root.val)\n            for child in root.children:\n                nodes += self.preorder(child)\n            \n        return nodes"
    },
    {
        "timestamp": "2022-03-01 22:30:56",
        "title": "Check If It Is a Straight Line",
        "title_slug": "check-if-it-is-a-straight-line",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "80 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:\n        x1, y1 = coordinates[0]\n        x2, y2 = coordinates[1]\n        \n        return all((y2 - y1) * (x[0] - x1) == (x2 - x1) * (x[1] - y1) for x in coordinates) "
    },
    {
        "timestamp": "2022-03-01 22:28:58",
        "title": "Check If It Is a Straight Line",
        "title_slug": "check-if-it-is-a-straight-line",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "69 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:\n        x1, y1 = coordinates[0]\n        x2, y2 = coordinates[1]\n        \n        for i in range(2, len(coordinates)):\n            x, y = coordinates[i]\n            if (y2 - y1) * (x - x1) != (x2 - x1) * (y - y1):\n                return False\n            \n        return True"
    },
    {
        "timestamp": "2022-03-01 19:55:03",
        "title": "Counting Bits",
        "title_slug": "counting-bits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "149 ms",
        "memory": "20.8 MB",
        "code": "class Solution:\n    def countBits(self, n: int) -> List[int]:\n        return [format(i, 'b').count('1') for i in range(n+1)]\n"
    },
    {
        "timestamp": "2022-02-28 23:08:23",
        "title": "Happy Number",
        "title_slug": "happy-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "43 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        def getNext(number):\n            total_sum = 0\n            while number > 0:\n                number, digit = divmod(number, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        while n != 1 and n != 4:\n            n = getNext(n)\n            \n        return n == 1"
    },
    {
        "timestamp": "2022-02-28 23:05:54",
        "title": "Can Make Arithmetic Progression From Sequence",
        "title_slug": "can-make-arithmetic-progression-from-sequence",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "77 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n        arr.sort()\n        diff = arr[1] - arr[0]\n        \n        isValid = True\n        for i in range(1, len(arr)-1):\n            if arr[i+1] - arr[i] != diff:\n                isValid = False\n        \n        return isValid"
    },
    {
        "timestamp": "2022-02-28 23:05:27",
        "title": "Can Make Arithmetic Progression From Sequence",
        "title_slug": "can-make-arithmetic-progression-from-sequence",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "45 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n        return self.isValid(arr)\n    \n    def isValid(self, nums):\n        nums.sort()\n        diff = nums[1] - nums[0]\n        \n        isValid = True\n        for i in range(1, len(nums)-1):\n            if nums[i+1] - nums[i] != diff:\n                isValid = False\n        \n        return isValid"
    },
    {
        "timestamp": "2022-02-28 22:44:07",
        "title": "Sign of the Product of an Array",
        "title_slug": "sign-of-the-product-of-an-array",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "44 MB",
        "code": "class Solution {\n    public int arraySign(int[] nums) {\n        int negative = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] < 0) negative++;\n            if (nums[i] == 0) return 0;\n        }\n        \n        if (negative % 2 != 0) return -1;\n        return 1;\n    }\n}"
    },
    {
        "timestamp": "2022-02-28 22:29:49",
        "title": "Check if One String Swap Can Make Strings Equal",
        "title_slug": "check-if-one-string-swap-can-make-strings-equal",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "61 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\n        if s1 == s2: return True;\n        \n        unequal = 0\n        for i in range(len(s1)):\n            if s1[i] not in s2 or s2[i] not in s1:\n                return False\n            elif s1[i] != s2[i]:\n                unequal += 1\n                \n        if unequal == 0 or unequal == 2:\n            return True\n        return False"
    },
    {
        "timestamp": "2022-02-28 22:28:45",
        "title": "Check if One String Swap Can Make Strings Equal",
        "title_slug": "check-if-one-string-swap-can-make-strings-equal",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "58 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\n        if s1 == s2: return True;\n        n = len(s1)\n        \n        unequal = 0\n        for i in range(n):\n            if s1[i] not in s2 or s2[i] not in s1:\n                return False\n            if s1[i] != s2[i]:\n                unequal += 1\n                \n        if unequal == 0 or unequal == 2:\n            return True\n        \n        return False"
    },
    {
        "timestamp": "2022-02-28 22:09:47",
        "title": "Summary Ranges",
        "title_slug": "summary-ranges",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        res = []\n        start = 0\n        end = 0\n\n        while start < len(nums) and end < len(nums):\n            if end + 1 < len(nums) and nums[end] + 1 == nums[end+1]:\n                end += 1\n\n            else:\n                if nums[start] == nums[end]:\n                    res.append(str(nums[start]))\n                    start += 1\n                    end += 1\n                else:\n                    res.append(f'{nums[start]}->{nums[end]}')\n                    start = end + 1\n                    end += 1\n\n        return res\n"
    },
    {
        "timestamp": "2022-02-27 21:30:46",
        "title": "Maximum Width of Binary Tree",
        "title_slug": "maximum-width-of-binary-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "83 ms",
        "memory": "14.6 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        q = [(0, root)]\n        ans = 0\n        while q:\n            n = len(q)\n            nodes = []\n            for _ in range(n):\n                idx, node = q.pop(0)\n                nodes.append(idx)\n                if node.left:\n                    q.append((2*idx+1 , node.left))\n                if node.right:\n                    q.append((2*idx+2 , node.right))\n            ans = max(ans, max(nodes)-min(nodes)+1)\n        return ans"
    },
    {
        "timestamp": "2022-02-27 20:07:51",
        "title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "title_slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "status": "Accepted",
        "lang": "java",
        "runtime": "5 ms",
        "memory": "66.4 MB",
        "code": "class Solution {\n    public int nearestValidPoint(int x, int y, int[][] points) {\n        int minDist = Integer.MAX_VALUE;\n        int ans = -1;\n\n        for (int[] point : points) {\n            int a = point[0];\n            int b = point[1];\n\n            if (a == x || b == y) {\n                int distance = Math.abs(x - a) + Math.abs(y - b);\n                if (distance < minDist) {\n                    minDist = distance;\n                    ans = Arrays.asList(points).indexOf(point);\n                }\n            }\n        }\n        return ans;\n    }\n}"
    },
    {
        "timestamp": "2022-02-27 19:24:47",
        "title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "title_slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "978 ms",
        "memory": "19.5 MB",
        "code": "class Solution:\n    def nearestValidPoint(self, x: int, y: int, points: List[List[int]]) -> int:\n        distance = lambda x1, y1, x2, y2: abs(x1 - x2) + abs(y1 - y2)\n        res = []\n\n        for a, b in points:\n            if a == x or b == y:\n                d = distance(a, b, x, y)\n                res.append([a, b, d])\n\n        res.sort(key=lambda x: x[-1])\n        return -1 if len(res) == 0 else points.index(res[0][:2])\n"
    },
    {
        "timestamp": "2022-02-27 17:29:24",
        "title": "Largest Perimeter Triangle",
        "title_slug": "largest-perimeter-triangle",
        "status": "Accepted",
        "lang": "java",
        "runtime": "10 ms",
        "memory": "54.6 MB",
        "code": "class Solution {\n    public int largestPerimeter(int[] nums) {  \n        Arrays.sort(nums);\n        int n = nums.length;\n        \n        for (int i = n - 3; i >= 0; --i) {\n            if (nums[i] + nums[i+1] > nums[i+2]) \n                return nums[i] + nums[i+1] + nums[i+2];\n        }\n        return 0;\n    }\n}\n\n"
    },
    {
        "timestamp": "2022-02-26 23:11:05",
        "title": "Shortest Path Visiting All Nodes",
        "title_slug": "shortest-path-visiting-all-nodes",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1089 ms",
        "memory": "44.7 MB",
        "code": "class Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        def dp(node, mask):\n            state = (node, mask)\n            if state in cache:\n                return cache[state]\n            if mask & (mask - 1) == 0:\n                # Base case - mask only has a single \"1\", which means\n                # that only one node has been visited (the current node)\n                return 0\n\n            cache[state] = float(\"inf\") # Avoid infinite loop in recursion\n            for neighbor in graph[node]:\n                if mask & (1 << neighbor):\n                    already_visited = 1 + dp(neighbor, mask)\n                    not_visited = 1 + dp(neighbor, mask ^ (1 << node))\n                    cache[state] = min(cache[state], already_visited, not_visited)\n\n            return cache[state]\n\n        n = len(graph)\n        ending_mask = (1 << n) - 1\n        cache = {}\n\n        return min(dp(node, ending_mask) for node in range(n))"
    },
    {
        "timestamp": "2022-02-26 23:06:28",
        "title": "Number of 1 Bits",
        "title_slug": "number-of-1-bits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "39 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        return int.bit_count(n)"
    },
    {
        "timestamp": "2022-02-26 19:19:03",
        "title": "Subtract the Product and Sum of Digits of an Integer",
        "title_slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "40.6 MB",
        "code": "class Solution {\n    public int subtractProductAndSum(int n) {\n        int digitSum = 0, digitProduct = 1;\n        while (n > 0) {\n            int mod = n % 10;\n            n = (n - mod) / 10;\n            digitSum += mod;\n            digitProduct *= mod;\n        }\n        return digitProduct - digitSum;\n    }\n}"
    },
    {
        "timestamp": "2022-02-25 23:14:44",
        "title": "Compare Version Numbers",
        "title_slug": "compare-version-numbers",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "37 ms",
        "memory": "13.8 MB",
        "code": "from itertools import zip_longest\n\nclass Solution:\n    def compareVersion(self, v1: str, v2: str) -> int:\n        v1, v2 = list(map(int, v1.split('.'))), list(map(int, v2.split('.')))\n        \n        for rev1, rev2 in zip_longest(v1, v2, fillvalue=0):\n            if rev1 == rev2: \n                continue\n            \n            return -1 if rev1 < rev2 else 1\n        \n        return 0"
    },
    {
        "timestamp": "2022-02-25 22:26:13",
        "title": "Count Odd Numbers in an Interval Range",
        "title_slug": "count-odd-numbers-in-an-interval-range",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "38.8 MB",
        "code": "class Solution {\n    public int countOdds(int low, int high) {\n        int nums = high - low + 1;\n        \n        if (low % 2 != 0 && high % 2 != 0) {\n            return nums / 2 + 1;\n        } else {\n            return nums / 2;\n        }\n    }\n}"
    },
    {
        "timestamp": "2022-02-25 22:24:59",
        "title": "Count Odd Numbers in an Interval Range",
        "title_slug": "count-odd-numbers-in-an-interval-range",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def countOdds(self, low: int, high: int) -> int:\n        nums = high - low + 1\n        \n        if low % 2 != 0 and high % 2 != 0: return nums // 2 + 1\n        else: return nums // 2\n            \n        "
    },
    {
        "timestamp": "2022-02-25 21:24:10",
        "title": "Average Salary Excluding the Minimum and Maximum Salary",
        "title_slug": "average-salary-excluding-the-minimum-and-maximum-salary",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        salary.sort()\n        return sum(salary[1:-1]) / (len(salary) - 2)"
    },
    {
        "timestamp": "2022-02-25 21:22:04",
        "title": "Average Salary Excluding the Minimum and Maximum Salary",
        "title_slug": "average-salary-excluding-the-minimum-and-maximum-salary",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "39.5 MB",
        "code": "class Solution {\n    public double average(int[] salary) {\n        int n = salary.length;\n        double max = Arrays.stream(salary).max().getAsInt();\n        double min = Arrays.stream(salary).min().getAsInt();\n\n        double avg = (Arrays.stream(salary).sum() - (max + min)) / (n - 2);\n        return avg;\n    }\n}"
    },
    {
        "timestamp": "2022-02-24 23:49:17",
        "title": "Sort List",
        "title_slug": "sort-list",
        "status": "Accepted",
        "lang": "java",
        "runtime": "8 ms",
        "memory": "56.6 MB",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null)\n            return head;\n        ListNode mid = getMid(head);\n        ListNode left = sortList(head);\n        ListNode right = sortList(mid);\n        return merge(left, right);\n    }\n\n    private ListNode merge(ListNode list1, ListNode list2) {\n        ListNode dummyHead = new ListNode();\n        ListNode tail = dummyHead;\n        while (list1 != null && list2 != null) {\n            if (list1.val < list2.val) {\n                tail.next = list1;\n                list1 = list1.next;\n                tail = tail.next;\n            } else {\n                tail.next = list2;\n                list2 = list2.next;\n                tail = tail.next;\n            }\n        }\n        tail.next = (list1 != null) ? list1 : list2;\n        return dummyHead.next;\n    }\n\n    private ListNode getMid(ListNode head) {\n        ListNode midPrev = null;\n        while (head != null && head.next != null) {\n            midPrev = (midPrev == null) ? head : midPrev.next;\n            head = head.next.next;\n        }\n        ListNode mid = midPrev.next;\n        midPrev.next = null;\n        return mid;\n    }\n}"
    },
    {
        "timestamp": "2022-02-23 23:55:44",
        "title": "Clone Graph",
        "title_slug": "clone-graph",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "54 ms",
        "memory": "14.4 MB",
        "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        if not node: return node\n        \n        q, clones = deque([node]), {node.val: Node(node.val, [])}\n        while q:\n            cur = q.popleft() \n            cur_clone = clones[cur.val]            \n\n            for ngbr in cur.neighbors:\n                if ngbr.val not in clones:\n                    clones[ngbr.val] = Node(ngbr.val, [])\n                    q.append(ngbr)\n                    \n                cur_clone.neighbors.append(clones[ngbr.val])\n                \n        return clones[node.val]"
    },
    {
        "timestamp": "2022-02-22 22:38:10",
        "title": "Excel Sheet Column Number",
        "title_slug": "excel-sheet-column-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "77 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def titleToNumber(self, columnTitle: str) -> int:\n        ans = 0\n        for col in columnTitle:\n            ans = ans * 26 + ord(col) - ord('A') + 1\n        return ans"
    },
    {
        "timestamp": "2022-02-22 10:37:33",
        "title": "Reverse Linked List",
        "title_slug": "reverse-linked-list",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "43.3 MB",
        "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        \n        while (head != null) {\n            ListNode next_node = head.next;\n            head.next = prev;\n            prev = head;\n            head = next_node;\n        }\n        \n        return prev;\n    }\n}"
    },
    {
        "timestamp": "2022-02-22 10:12:02",
        "title": "Valid Parentheses",
        "title_slug": "valid-parentheses",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 2:\n            return False\n        \n        ht = { '(': ')', '[': ']', '{': '}' }\n        stack = ['']\n        \n        for i in s:\n            if i in ht.keys():    # opened brackets\n                stack.append(ht[i])\n            elif i != stack.pop():\n                return False\n            \n        return stack == ['']\n                \n\n                    \n        \n        "
    },
    {
        "timestamp": "2022-02-21 20:32:14",
        "title": "Flatten Binary Tree to Linked List",
        "title_slug": "flatten-binary-tree-to-linked-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "58 ms",
        "memory": "15.3 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        if not root:\n            return\n        \n        vals = []\n        def preOrder(root):\n            if root is None:\n                return\n            vals.append(root)\n            preOrder(root.left)\n            preOrder(root.right)\n        \n        preOrder(root)\n        \n        # last node \n        vals[-1].left = None\n        vals[-1].right = None\n        \n        for i in range(len(vals)-1): \n            vals[i].left = None\n            vals[i].right = vals[i+1]\n        return vals"
    },
    {
        "timestamp": "2022-02-21 20:31:32",
        "title": "Flatten Binary Tree to Linked List",
        "title_slug": "flatten-binary-tree-to-linked-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "51 ms",
        "memory": "15.3 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        if not root:\n            return\n        \n        vals = []\n        def preOrder(root):\n            if root is None:\n                return\n            else:\n                vals.append(root)\n                preOrder(root.left)\n                preOrder(root.right)\n        \n        preOrder(root)\n        \n        vals[-1].left = None\n        vals[-1].right = None\n        \n        for i in range(len(vals)-1): \n            vals[i].left = None\n            vals[i].right = vals[i+1]\n            \n        return vals"
    },
    {
        "timestamp": "2022-02-21 18:30:54",
        "title": "Majority Element",
        "title_slug": "majority-element",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "195 ms",
        "memory": "15.4 MB",
        "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        nums.sort()\n        return nums[len(nums)//2]"
    },
    {
        "timestamp": "2022-02-20 23:57:33",
        "title": "Remove Covered Intervals",
        "title_slug": "remove-covered-intervals",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "140 ms",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n        res, longest = len(intervals), 0\n        intervals.sort(key=lambda i: (i[0], -i[1]))\n        \n        for _, end in intervals:\n            if end <= longest:\n                res -= 1\n            else:\n                longest = end\n                \n        return res"
    },
    {
        "timestamp": "2022-02-19 23:55:50",
        "title": "Minimize Deviation in Array",
        "title_slug": "minimize-deviation-in-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1875 ms",
        "memory": "26.1 MB",
        "code": "class Solution:\n    def minimumDeviation(self, nums: List[int]) -> int:\n        heap = []\n        answer = float(inf)\n        array_length = len(nums)\n        \n        for num in nums:\n            if num % 2 == 0:\n                heappush(heap, -num)\n            else:\n                heappush(heap, -num*2)\n        \n        _min = -max(heap)\n\n        while True:\n            _max = -heappop(heap)\n            answer = min(answer, _max-_min)\n            \n            if _max % 2:\n                break\n\n            heappush(heap, -_max//2)\n            _min = min(_min, _max//2)\n\n        return answer"
    },
    {
        "timestamp": "2022-02-19 14:37:47",
        "title": "Find Three Consecutive Integers That Sum to a Given Number",
        "title_slug": "find-three-consecutive-integers-that-sum-to-a-given-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "64 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def sumOfThree(self, num: int) -> List[int]:\n        middle = int(num / 3)\n        return [] if num % 3 != 0 else [middle-1, middle, middle+1]"
    },
    {
        "timestamp": "2022-02-19 14:31:50",
        "title": "Count Equal and Divisible Pairs in an Array",
        "title_slug": "count-equal-and-divisible-pairs-in-an-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "133 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j] and (i * j) % k == 0:\n                    count += 1\n                    \n        return count"
    },
    {
        "timestamp": "2022-02-18 23:52:10",
        "title": "Remove K Digits",
        "title_slug": "remove-k-digits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "38 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        stack, chances = [], k\n        \n        for digit in num:\n            while stack and digit < stack[-1] and chances > 0:\n                stack.pop()\n                chances -= 1\n            stack.append(digit)\n                \n        res = \"\".join(stack[0:len(num)-k]).lstrip(\"0\")\n        return \"0\" if res == \"\" else res"
    },
    {
        "timestamp": "2022-02-17 22:44:56",
        "title": "Combination Sum",
        "title_slug": "combination-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "117 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        self.ans = []                    \n        def traverse(candid, arr,sm):\n            if sm == target: \n                self.ans.append(arr)\n            if sm >= target: \n                return\n            \n            for i in range(len(candid)): \n                traverse(candid[i:], arr + [candid[i]], sm+candid[i])  \n                \n        traverse(candidates,[], 0)\n        return self.ans"
    },
    {
        "timestamp": "2022-02-16 23:11:40",
        "title": "Swap Nodes in Pairs",
        "title_slug": "swap-nodes-in-pairs",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "49 ms",
        "memory": "13.8 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if head == None or head.next == None:\n            return head\n            \n        temp = head.next\n        head.next = self.swapPairs(head.next.next)\n        temp.next = head\n\n        return temp"
    },
    {
        "timestamp": "2022-02-15 21:38:58",
        "title": "Single Number",
        "title_slug": "single-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "207 ms",
        "memory": "16.6 MB",
        "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        c = Counter(nums)\n        return min(c, key=c.get)"
    },
    {
        "timestamp": "2022-02-15 21:36:27",
        "title": "Single Number",
        "title_slug": "single-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "8409 ms",
        "memory": "16.7 MB",
        "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        for i in range(len(nums)):\n            if nums.count(nums[i]) == 1:\n                return nums[i]"
    },
    {
        "timestamp": "2022-02-14 18:45:00",
        "title": "Maximum Depth of Binary Tree",
        "title_slug": "maximum-depth-of-binary-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "40 ms",
        "memory": "16.4 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        def dfs(node):\n            if node is None:\n                return 0\n            left_height = dfs(node.left)\n            right_height = dfs(node.right)\n        \n            return 1 + max(left_height, right_height)\n        \n        return dfs(root)\n        "
    },
    {
        "timestamp": "2022-02-13 23:43:57",
        "title": "Subsets",
        "title_slug": "subsets",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "24 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        output = [[]]\n        for num in nums:\n            output += [curr + [num] for curr in output]\n            \n        return output"
    },
    {
        "timestamp": "2022-02-12 22:56:10",
        "title": "Word Ladder",
        "title_slug": "word-ladder",
        "status": "Accepted",
        "lang": "java",
        "runtime": "93 ms",
        "memory": "45.3 MB",
        "code": "class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        Set<String> set = new HashSet<>(wordList);\n        if(!set.contains(endWord)) return 0;\n        \n        Queue<String> queue = new LinkedList<>();\n        queue.add(beginWord);\n        \n        Set<String> visited = new HashSet<>();\n        queue.add(beginWord);\n        \n        int changes = 1;\n        \n        while(!queue.isEmpty()){\n            int size = queue.size();\n            for(int i = 0; i < size; i++){\n                String word = queue.poll();\n                if(word.equals(endWord)) return changes;\n                \n                for(int j = 0; j < word.length(); j++){\n                    for(int k = 'a'; k <= 'z'; k++){\n                        char arr[] = word.toCharArray();\n                        arr[j] = (char) k;\n                        \n                        String str = new String(arr);\n                        if(set.contains(str) && !visited.contains(str)){\n                            queue.add(str);\n                            visited.add(str);\n                        }\n                    }\n                }\n            }\n            ++changes;\n        }\n        return 0;\n    }\n}"
    },
    {
        "timestamp": "2022-02-11 23:40:19",
        "title": "Permutation in String",
        "title_slug": "permutation-in-string",
        "status": "Accepted",
        "lang": "java",
        "runtime": "9 ms",
        "memory": "42.9 MB",
        "code": "class Solution {\n    public boolean checkInclusion(String s1, String s2) {\n        if (s1.length() > s2.length())\n            return false;\n        \n        int[] s1map = new int[26];\n        int[] s2map = new int[26];\n        for (int i = 0; i < s1.length(); i++) {\n            s1map[s1.charAt(i) - 'a']++;\n            s2map[s2.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s2.length() - s1.length(); i++) {\n            if (matches(s1map, s2map))\n                return true;\n            s2map[s2.charAt(i + s1.length()) - 'a']++;\n            s2map[s2.charAt(i) - 'a']--;\n        }\n        return matches(s1map, s2map);\n    }\n    \n    public boolean matches(int[] s1map, int[] s2map) {\n        for (int i = 0; i < 26; i++) {\n            if (s1map[i] != s2map[i])\n                return false;\n        }\n        return true;\n    }\n}"
    },
    {
        "timestamp": "2022-02-10 23:35:01",
        "title": "Subarray Sum Equals K",
        "title_slug": "subarray-sum-equals-k",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2597 ms",
        "memory": "55.1 MB",
        "code": "class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0;\n        for (int i = 0; i < nums.length; i++) {\n            int sum = 0;\n            \n            for (int j = i; j < nums.length; j++) {\n                sum += nums[j];\n                if (sum == k) count ++;\n            }\n        }\n        return count;\n    }\n}"
    },
    {
        "timestamp": "2022-02-09 23:00:44",
        "title": "K-diff Pairs in an Array",
        "title_slug": "k-diff-pairs-in-an-array",
        "status": "Accepted",
        "lang": "java",
        "runtime": "5 ms",
        "memory": "42.7 MB",
        "code": "class Solution {\n    public int findPairs(int[] nums, int k) {\n        HashSet<Integer> hashSet = new HashSet<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length-1; i++) {\n            if (Arrays.binarySearch(nums, i+1, nums.length, nums[i] + k) > 0) {\n                hashSet.add(nums[i]);\n            }\n        }\n        return hashSet.size();\n    }\n}"
    },
    {
        "timestamp": "2022-02-08 11:55:42",
        "title": "Add Digits",
        "title_slug": "add-digits",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "41.5 MB",
        "code": "class Solution {\n    public int addDigits(int num) {\n        if (num < 10) {\n            return num;\n        }\n        \n        int total = 0;\n        while (num > 0) {\n            int mod = num % 10;\n            num = num / 10;\n            total += mod;   \n        }\n        return this.addDigits(total);\n    }\n}"
    },
    {
        "timestamp": "2022-02-08 11:03:52",
        "title": "Add Digits",
        "title_slug": "add-digits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def addDigits(self, num: int) -> int:\n        if num < 10:\n            return num\n\n        total = 0\n        while num > 0:\n            mod = num % 10\n            num = num // 10\n            total += mod\n        \n        return self.addDigits(total)\n"
    },
    {
        "timestamp": "2022-02-07 20:00:12",
        "title": "Find the Difference",
        "title_slug": "find-the-difference",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "49 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        s_counter, t_counter = Counter(s), Counter(t)\n        for char in t_counter:\n            if not s_counter[char] == t_counter[char]:\n                return char\n"
    },
    {
        "timestamp": "2022-02-07 19:59:37",
        "title": "Find the Difference",
        "title_slug": "find-the-difference",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "45 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        s_counter, t_counter = Counter(s), Counter(t)\n        for char in t:\n            if s_counter[char] != t_counter[char]:\n                return char\n"
    },
    {
        "timestamp": "2022-02-07 19:58:09",
        "title": "Find the Difference",
        "title_slug": "find-the-difference",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "49 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        for i in t:\n            if s.count(i) != t.count(i):\n                return i\n"
    },
    {
        "timestamp": "2022-02-06 21:31:21",
        "title": "Remove Duplicates from Sorted Array II",
        "title_slug": "remove-duplicates-from-sorted-array-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        if len(nums) < 3:\n            return len(nums)\n        \n        idx = 2\n        for i in range(2, len(nums)):\n            if nums[i] != nums[idx-2]:\n                nums[idx] = nums[i]\n                idx += 1\n                \n        return idx"
    },
    {
        "timestamp": "2022-02-05 23:54:12",
        "title": "Merge k Sorted Lists",
        "title_slug": "merge-k-sorted-lists",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "140 ms",
        "memory": "18.4 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        nodes = []\n        head = point = ListNode(0)\n        \n        for ll in lists:\n            while ll:\n                nodes.append(ll.val)\n                ll = ll.next\n        nodes.sort()\n        \n        for x in nodes:\n            point.next = ListNode(x)\n            point = point.next\n        return head.next"
    },
    {
        "timestamp": "2022-02-04 23:57:19",
        "title": "Contiguous Array",
        "title_slug": "contiguous-array",
        "status": "Accepted",
        "lang": "java",
        "runtime": "15 ms",
        "memory": "73.5 MB",
        "code": "class Solution {\n    public int findMaxLength(int[] nums) {\n        int[] arr = new int[2 * nums.length + 1];\n        Arrays.fill(arr, -2);\n        arr[nums.length] = -1;\n        int maxlen = 0, count = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            count = count + (nums[i] == 0 ? -1 : 1);\n            if (arr[count + nums.length] >= -1) {\n                maxlen = Math.max(maxlen, i - arr[count + nums.length]);\n            } else {\n                arr[count + nums.length] = i;\n            }\n\n        }\n        return maxlen;\n    }\n}\n"
    },
    {
        "timestamp": "2022-02-03 22:20:20",
        "title": "4Sum II",
        "title_slug": "4sum-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1046 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:\n        n, hmap, ans = len(nums1), defaultdict(int), 0\n\n        for i in range(n):\n            for j in range(n):\n                hmap[nums1[i] + nums2[j]] += 1 \n\n        for k in range(n):\n            for l in range(n):\n                ans += hmap[0 - (nums3[k] + nums4[l])]\n\n        return ans"
    },
    {
        "timestamp": "2022-02-02 23:47:54",
        "title": "Find All Anagrams in a String",
        "title_slug": "find-all-anagrams-in-a-string",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "268 ms",
        "memory": "15.1 MB",
        "code": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        hmap = defaultdict(int)\n        ans = []\n        n, m = len(s), len(p)\n        if m > n: return []\n        \n        for char in p:\n            hmap[char] += 1\n        \n        for i in range(m-1):\n            if s[i] in hmap:\n                hmap[s[i]] -= 1\n                \n        # sliding window with stride 1\n        for i in range(-1, n-m+1):\n            if i > -1 and s[i] in hmap:\n                hmap[s[i]] += 1\n            if i+m < n and s[i+m] in hmap: \n                hmap[s[i+m]] -= 1\n                \n            # check whether we encountered an anagram\n            if all(v == 0 for v in hmap.values()): \n                ans.append(i+1)\n                \n        return ans"
    },
    {
        "timestamp": "2022-02-01 00:02:33",
        "title": "Best Time to Buy and Sell Stock",
        "title_slug": "best-time-to-buy-and-sell-stock",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "2050 ms",
        "memory": "25 MB",
        "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:  \n        max_profit = 0\n        minimum = max(prices)\n\n        for i in range(len(prices)):\n            if prices[i] < minimum:\n                minimum = prices[i]\n            else:\n                max_profit = max(max_profit, prices[i] - minimum)\n\n        return max_profit   "
    },
    {
        "timestamp": "2022-01-31 16:49:03",
        "title": "Richest Customer Wealth",
        "title_slug": "richest-customer-wealth",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "124 ms",
        "memory": "13.7 MB",
        "code": "class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n        return max(map(sum, accounts))"
    },
    {
        "timestamp": "2022-01-31 00:25:29",
        "title": "Richest Customer Wealth",
        "title_slug": "richest-customer-wealth",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "96 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n        return max(map(lambda x: sum(x), accounts))"
    },
    {
        "timestamp": "2022-01-31 00:14:09",
        "title": "Richest Customer Wealth",
        "title_slug": "richest-customer-wealth",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "114 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n        total = 0 \n        for i in range(len(accounts)):\n            curr = 0\n            for j in range(len(accounts[0])):\n                curr += accounts[i][j]\n\n            total = max(curr, total)\n        return total\n"
    },
    {
        "timestamp": "2022-01-31 00:08:19",
        "title": "Richest Customer Wealth",
        "title_slug": "richest-customer-wealth",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "77 ms",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n        return max(list(map(lambda x: sum(x), accounts)))\n"
    },
    {
        "timestamp": "2022-01-30 09:46:35",
        "title": "Rotate Array",
        "title_slug": "rotate-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "2644 ms",
        "memory": "25.5 MB",
        "code": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        for _ in range(k):\n            nums.insert(0, nums.pop(-1))\n            "
    },
    {
        "timestamp": "2022-01-29 23:24:17",
        "title": "Largest Rectangle in Histogram",
        "title_slug": "largest-rectangle-in-histogram",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1094 ms",
        "memory": "27.9 MB",
        "code": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        stack, res = [], 0\n        for bar in heights + [-1]:\n            step = 0\n            while stack and stack[-1][1] >= bar:\n                w, h = stack.pop()\n                step += w\n                res = max(res, step * h)\n\n            stack.append((step + 1, bar))\n\n        return res\n"
    },
    {
        "timestamp": "2022-01-28 23:12:41",
        "title": "Design Add and Search Words Data Structure",
        "title_slug": "design-add-and-search-words-data-structure",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "454 ms",
        "memory": "28.8 MB",
        "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.terminating = False\n        \nclass WordDictionary:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n    def addWord(self, word: str) -> None:\n        ptr = self.root\n        \n        for letter in word:\n            if letter not in ptr.children:\n                ptr.children[letter] = TrieNode()\n            ptr = ptr.children[letter]\n        \n        ptr.terminating = True\n\n    def search(self, word: str, ptr=None) -> bool:\n        if not ptr:\n            ptr = self.root\n        \n        for i in range(len(word)):\n            w = word[i]\n            if w == '.':\n                for letter in ptr.children:\n                    if self.search(word[i+1:], ptr.children[letter]):\n                        return True\n                return False\n            elif w not in ptr.children:\n                return False\n            ptr = ptr.children[w]\n        \n        return ptr.terminating\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)"
    },
    {
        "timestamp": "2022-01-27 23:26:42",
        "title": "Maximum XOR of Two Numbers in an Array",
        "title_slug": "maximum-xor-of-two-numbers-in-an-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "976 ms",
        "memory": "33.4 MB",
        "code": "class Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        m, mask = 0, 0\n\n        for i in range(32)[::-1]:\n            mask |= 1 << i\n            prefixes = {n & mask for n in nums}\n\n            temp = m | (1 << i)\n\n            if any(prefix ^ temp in prefixes for prefix in prefixes):\n                m = temp\n        return m\n"
    },
    {
        "timestamp": "2022-01-26 12:48:48",
        "title": "All Elements in Two Binary Search Trees",
        "title_slug": "all-elements-in-two-binary-search-trees",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "571 ms",
        "memory": "22.8 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n        def preOrder(root):\n            if root is None:\n                return []\n            return preOrder(root.left) + [root.val] + preOrder(root.right)\n        \n        return sorted(preOrder(root1) + preOrder(root2))\n        "
    },
    {
        "timestamp": "2022-01-25 22:58:28",
        "title": "Valid Mountain Array",
        "title_slug": "valid-mountain-array",
        "status": "Accepted",
        "lang": "java",
        "runtime": "2 ms",
        "memory": "51.9 MB",
        "code": "class Solution {\n    public boolean validMountainArray(int[] arr) {\n        int n = arr.length;\n        int i = 0;\n        \n        // walk up\n        while (i+1 < n && arr[i] < arr[i+1]) {\n            i++;\n        }\n        \n        if (i == 0 || i == n - 1) return false;\n        \n        // walk down\n        while (i+1 < n && arr[i] > arr[i+1]) {\n            i++;\n        }\n        return i == n-1;\n    }\n}"
    },
    {
        "timestamp": "2022-01-24 00:00:20",
        "title": "Detect Capital",
        "title_slug": "detect-capital",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "58 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        return word.isupper() or word.islower() or word.istitle()"
    },
    {
        "timestamp": "2022-01-23 23:58:02",
        "title": "Sequential Digits",
        "title_slug": "sequential-digits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "20 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        digits = '123456789'\n        lower = len(str(low))\n        higher = len(str(high))\n\n        ans = []\n        for i in range(lower, higher+1):\n            for j in range(0, 10-i):\n                num = int(digits[j:j+i])\n                if num >= low and num <= high:\n                    ans.append(num)\n        return ans"
    },
    {
        "timestamp": "2022-01-22 23:30:22",
        "title": "Stone Game IV",
        "title_slug": "stone-game-iv",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "2583 ms",
        "memory": "171.3 MB",
        "code": "class Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        @lru_cache(maxsize=None)\n        def dfs(remain):\n            if remain == 0:\n                return False\n\n            sqrt_root = int(remain**0.5)\n            for i in range(1, sqrt_root+1):\n                if not dfs(remain - i*i):\n                    return True\n\n            return False\n\n        return dfs(n)"
    },
    {
        "timestamp": "2022-01-22 15:41:16",
        "title": "Minimum Cost of Buying Candies With Discount",
        "title_slug": "minimum-cost-of-buying-candies-with-discount",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "53 ms",
        "memory": "14.4 MB",
        "code": "from math import ceil\n\nclass Solution:\n    def minimumCost(self, cost: List[int]) -> int:\n        cost.sort()\n        n = len(cost)\n        res = 0\n        i = n - 1\n        while i >= 0:\n            if i >= 0:\n                res += cost[i]\n                i -= 1\n            if i >= 0:\n                res += cost[i]\n                i -= 1\n                i -= 1\n            \n        return res"
    },
    {
        "timestamp": "2022-01-21 20:22:00",
        "title": "Gas Station",
        "title_slug": "gas-station",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "60 MB",
        "code": "class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        int total = 0, curr = 0;\n        int start = 0;\n        \n        for (int i = 0; i < gas.length; i++) {\n            int diff = gas[i] - cost[i];\n            total += diff;\n            curr += diff;\n            \n            if (curr < 0) {\n                start = i + 1;\n                curr = 0;\n            }\n        }\n        \n        if (total >= 0)\n            return start;\n        \n        return -1;\n    }\n}"
    },
    {
        "timestamp": "2022-01-21 20:21:32",
        "title": "Gas Station",
        "title_slug": "gas-station",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "551 ms",
        "memory": "19.1 MB",
        "code": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        total, curr = 0, 0\n        start = 0\n        diff = 0\n\n        for i in range(len(gas)):\n            diff = gas[i] - cost[i]\n            total += diff\n            curr += diff\n\n            if curr < 0:\n                start = i + 1\n                curr = 0\n        \n        if total >= 0:\n            return start\n\n        return -1\n"
    },
    {
        "timestamp": "2022-01-20 22:58:28",
        "title": "Koko Eating Bananas",
        "title_slug": "koko-eating-bananas",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "863 ms",
        "memory": "15.6 MB",
        "code": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:      \n        left = 1\n        right = max(piles)\n        \n        while left < right:\n            middle = (left + right) // 2            \n            hour_spent = 0\n            \n            for pile in piles:\n                hour_spent += math.ceil(pile / middle)\n            \n            if hour_spent <= h:\n                right = middle\n            else:\n                left = middle + 1\n    \n        return right"
    },
    {
        "timestamp": "2022-01-19 22:49:55",
        "title": "Linked List Cycle II",
        "title_slug": "linked-list-cycle-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "52 ms",
        "memory": "17.3 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        fast, slow = head, head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                slow = head\n                while slow != fast:\n                    slow = slow.next\n                    fast = fast.next                \n                return slow"
    },
    {
        "timestamp": "2022-01-18 20:30:08",
        "title": "Can Place Flowers",
        "title_slug": "can-place-flowers",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "164 ms",
        "memory": "14.7 MB",
        "code": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:    \n        i, count = 0, 0\n        N = len(flowerbed)\n        while i < N:\n            if flowerbed[i] == 0 and (i == N-1 or flowerbed[i+1] == 0) and (i == 0 or flowerbed[i-1] == 0):\n                flowerbed[i] = 1\n                count += 1\n            i += 1\n        return count >= n\n"
    },
    {
        "timestamp": "2022-01-18 20:29:09",
        "title": "Can Place Flowers",
        "title_slug": "can-place-flowers",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "302 ms",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:    \n        i, count = 0, 0\n        while i < len(flowerbed):\n            if flowerbed[i] == 0 and (i == len(flowerbed)-1 or flowerbed[i+1] == 0) and (i == 0 or flowerbed[i-1] == 0):\n                flowerbed[i] = 1\n                count += 1\n            if count >= n:\n                return True\n            i += 1\n        return False\n"
    },
    {
        "timestamp": "2022-01-18 20:24:57",
        "title": "Can Place Flowers",
        "title_slug": "can-place-flowers",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "168 ms",
        "memory": "14.6 MB",
        "code": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:    \n        i, count = 0, 0\n        while i < len(flowerbed):\n            if flowerbed[i] == 0 and (i == len(flowerbed)-1 or flowerbed[i+1] == 0) and (i == 0 or flowerbed[i-1] == 0):\n                flowerbed[i] = 1\n                count += 1\n            i += 1\n\n        return count >= n"
    },
    {
        "timestamp": "2022-01-17 21:37:39",
        "title": "Word Pattern",
        "title_slug": "word-pattern",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "24 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words, hmap = s.split(), {}\n        \n        if len(words) != len(pattern) or len(set(words)) != len(set(pattern)): \n            return False\n        \n        for i in range(len(words)):\n            if words[i] not in hmap:\n                hmap[words[i]] = pattern[i]\n            elif hmap[words[i]] != pattern[i]:\n                return False\n        return True"
    },
    {
        "timestamp": "2022-01-17 21:36:47",
        "title": "Word Pattern",
        "title_slug": "word-pattern",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "47 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words, hmap = s.split(), {}\n        \n        if len(words) != len(pattern): return False\n        if len(set(words)) != len(set(pattern)): return False\n        \n        for i in range(len(words)):\n            if words[i] not in hmap:\n                hmap[words[i]] = pattern[i]\n            elif hmap[words[i]] != pattern[i]:\n                return False\n            \n        return True"
    },
    {
        "timestamp": "2022-01-16 23:55:58",
        "title": "Maximize Distance to Closest Person",
        "title_slug": "maximize-distance-to-closest-person",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "209 ms",
        "memory": "14.9 MB",
        "code": "class Solution:\n    def maxDistToClosest(self, seats: List[int]) -> int:\n        n = len(seats)\n        left, right = [n] * n, [n] * n\n        \n        for i in range(n):\n            if seats[i] == 1:\n                left[i] = 0\n            elif i > 0:\n                left[i] = left[i-1] + 1\n                \n        for i in range(n-1, -1, -1):\n            if seats[i] == 1:\n                right[i] = 0\n            elif i < n-1:\n                right[i] = right[i+1] + 1\n                \n        return max(min(left[i], right[i]) for i, seat in enumerate(seats) if not seat)"
    },
    {
        "timestamp": "2022-01-15 21:30:15",
        "title": "Jump Game IV",
        "title_slug": "jump-game-iv",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "740 ms",
        "memory": "28.3 MB",
        "code": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        n = len(arr)\n        if n <= 1: return 0\n\n        graph = {}\n        for i in range(n):\n            if arr[i] in graph:\n                graph[arr[i]].append(i)\n            else:\n                graph[arr[i]] = [i]\n\n        curs = [0]  # store current layers\n        visited = {0}\n        step = 0\n\n        # when current layer exists\n        while curs:\n            nex = []\n\n            # iterate the layer\n            for node in curs:\n                # check if reached end\n                if node == n-1:\n                    return step\n\n                # check same value\n                for child in graph[arr[node]]:\n                    if child not in visited:\n                        visited.add(child)\n                        nex.append(child)\n\n                # clear the list to prevent redundant search\n                graph[arr[node]].clear()\n\n                # check neighbors\n                for child in [node-1, node+1]:\n                    if 0 <= child < len(arr) and child not in visited:\n                        visited.add(child)\n                        nex.append(child)\n                        \n            curs = nex\n            step += 1\n        return -1"
    },
    {
        "timestamp": "2022-01-14 23:53:39",
        "title": "String to Integer (atoi)",
        "title_slug": "string-to-integer-atoi",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "46 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        MIN, MAX = -2 ** 31, 2 ** 31 - 1\n        n, empty, sign = 0, True, +1\n        \n        for char in s:\n            \n            # handle special cases\n            if empty:\n                if char == ' ':\n                    continue\n                elif char == '-':\n                    sign = -1\n                elif char.isdigit(): \n                    n = int(char)  \n                elif char != '+':\n                    return 0\n                empty = False\n            else:\n                if char.isdigit():\n                    n = n * 10 + int(char)\n                    if sign * n > MAX: \n                        return MAX\n                    elif sign * n < MIN: \n                        return MIN\n                else: break   # end of valid number\n        \n        return sign * n  \n"
    },
    {
        "timestamp": "2022-01-13 22:47:36",
        "title": "Minimum Number of Arrows to Burst Balloons",
        "title_slug": "minimum-number-of-arrows-to-burst-balloons",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1874 ms",
        "memory": "59 MB",
        "code": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        points.sort(key=lambda x: x[1])\n        arrows, end = 0, -inf\n        for point in points:\n            if point[0] > end:\n                arrows += 1\n                end = point[1]\n        return arrows"
    },
    {
        "timestamp": "2022-01-12 00:02:29",
        "title": "Insert into a Binary Search Tree",
        "title_slug": "insert-into-a-binary-search-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "214 ms",
        "memory": "16.8 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n        new_node = TreeNode(val)\n        if not root:\n            return new_node\n        else:\n            current = root\n            while True:\n                if val < current.val:\n                    if not current.left:\n                        current.left = new_node\n                        return root\n                    current = current.left\n                else:\n                    if not current.right:\n                        current.right = new_node\n                        return root\n                    current = current.right\n            \n\n\n"
    },
    {
        "timestamp": "2022-01-11 22:34:40",
        "title": "Sum of Root To Leaf Binary Numbers",
        "title_slug": "sum-of-root-to-leaf-binary-numbers",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "40 ms",
        "memory": "14.7 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumRootToLeaf(self, root: TreeNode) -> int:\n        def preOrder(root, curr_number):\n            nonlocal root_to_leaf\n            if root:\n                curr_number = (curr_number << 1) | root.val\n                if not (root.left or root.right):\n                    root_to_leaf += curr_number\n                    \n                preOrder(root.left, curr_number)\n                preOrder(root.right, curr_number) \n        \n        root_to_leaf = 0\n        preOrder(root, 0)\n        return root_to_leaf"
    },
    {
        "timestamp": "2022-01-10 17:53:48",
        "title": "Robot Bounded In Circle",
        "title_slug": "robot-bounded-in-circle",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "58 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def isRobotBounded(self, instructions: str) -> bool:\n        dirs = [[1, 0], [0, 1], [-1, 0], [0, -1]]\n        di = x = y = 0\n        for instruction in instructions:\n            if instruction == 'L': \n                di = (di + 1) % 4\n            elif instruction == 'R': \n                di = (di - 1) % 4\n            else: x, y = x + dirs[di][0], y + dirs[di][1]\n        \n        if x == 0 and y == 0 or di > 0: \n            return True\n        return False"
    },
    {
        "timestamp": "2022-01-10 00:01:39",
        "title": "Add Binary",
        "title_slug": "add-binary",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "58 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        return bin(int(a, 2) + int(b, 2))[2:]"
    },
    {
        "timestamp": "2022-01-09 23:58:19",
        "title": "Robot Bounded In Circle",
        "title_slug": "robot-bounded-in-circle",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "58 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def isRobotBounded(self, instructions: str) -> bool:\n        d = [[1, 0], [0, 1], [-1, 0], [0, -1]]\n        di = x = y = 0\n        for i in instructions:\n            if i == 'L': \n                di = (di + 1) % 4\n            elif i == 'R': \n                di = (di - 1) % 4\n            else: x, y = x + d[di][0], y + d[di][1]\n        \n        if x == 0 and y == 0 or di > 0: \n            return True\n        return False"
    },
    {
        "timestamp": "2022-01-08 20:58:56",
        "title": "Maximum Twin Sum of a Linked List",
        "title_slug": "maximum-twin-sum-of-a-linked-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "988 ms",
        "memory": "55 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n        lst = []\n        while head:\n            lst.append(head.val)\n            head = head.next\n            \n        max_sum, n = 0, len(lst)\n        max_sum = max(max(lst[i], (lst[i] + lst[n-1-i])) for i in range(n // 2))\n        return max_sum\n"
    },
    {
        "timestamp": "2022-01-08 20:46:03",
        "title": "Maximum Twin Sum of a Linked List",
        "title_slug": "maximum-twin-sum-of-a-linked-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "980 ms",
        "memory": "55.2 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n        lst = []\n        while head:\n            lst.append(head.val)\n            head = head.next\n            \n        current_sum, max_sum, n = 0, 0, len(lst)\n        # return sum(i + (n-1-i) for i in range(n // 2))\n\n        i, j = 0, n-1\n        while i <= j:\n            current_sum = lst[i] + lst[j]\n            i += 1\n            j -= 1\n            max_sum = max(current_sum, max_sum)\n        return max_sum"
    },
    {
        "timestamp": "2022-01-08 19:59:57",
        "title": "Cherry Pickup II",
        "title_slug": "cherry-pickup-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "816 ms",
        "memory": "31.2 MB",
        "code": "from functools import lru_cache\n\nclass Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        \n        @lru_cache(None)\n        def dp(row, col1, col2):\n            if col1 < 0 or col1 >= n or col2 < 0 or col2 >= n:\n                return -inf\n            \n            result = 0\n            result += grid[row][col1]\n            if col1 != col2:\n                result += grid[row][col2]\n                \n            if row != m-1:\n                result += max(dp(row+1, newcol1, newcol2) for newcol1 in [col1, col1+1, col1-1] for newcol2 in [col2, col2+1, col2-1])\n                        \n            return result\n        \n        return dp(0, 0, n-1)\n                \n            "
    },
    {
        "timestamp": "2022-01-08 16:19:35",
        "title": "Detect Capital",
        "title_slug": "detect-capital",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "50 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        return word.isupper() or word.islower() or word.istitle()"
    },
    {
        "timestamp": "2022-01-08 16:15:21",
        "title": "To Lower Case",
        "title_slug": "to-lower-case",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "48 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def toLowerCase(self, s: str) -> str:\n        return s.lower()"
    },
    {
        "timestamp": "2022-01-08 14:44:32",
        "title": "Maximum Twin Sum of a Linked List",
        "title_slug": "maximum-twin-sum-of-a-linked-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1447 ms",
        "memory": "55.2 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n        current = head\n        n = 0\n        lst = []\n        while current:\n            n += 1\n            lst.append(current.val)\n            current = current.next\n            \n        current_sum, max_sum = 0, 0\n        i, j = 0, n-1\n        while i <= j:\n            current_sum = lst[i] + lst[j]\n            i += 1\n            j -= 1\n            \n            max_sum = max(current_sum, max_sum)\n            \n        return max_sum\n            \n            \n        "
    },
    {
        "timestamp": "2022-01-08 14:36:12",
        "title": "Capitalize the Title",
        "title_slug": "capitalize-the-title",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "33 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def capitalizeTitle(self, title: str) -> str:\n        title = title.lower().split()\n        return \" \".join(list(map(lambda x: x.title() if len(x) > 2 else x, title)))\n"
    },
    {
        "timestamp": "2022-01-07 17:52:56",
        "title": "Linked List Random Node",
        "title_slug": "linked-list-random-node",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "115 ms",
        "memory": "17.4 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nimport random\n\nclass Solution:\n\n    def __init__(self, head: Optional[ListNode]):\n        self.range = []\n        while head:\n            self.range.append(head.val)\n            head = head.next\n\n    def getRandom(self) -> int:\n        pick = random.choice(self.range)\n        return pick\n    \n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()"
    },
    {
        "timestamp": "2022-01-06 23:55:47",
        "title": "Car Pooling",
        "title_slug": "car-pooling",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "104 ms",
        "memory": "14.8 MB",
        "code": "class Solution:\n    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:\n        stops = []\n        for ppl, start, end in trips:\n            stops.append((start, ppl))\n            stops.append((end, -ppl))\n\n        stops.sort()\n\n        for _, p in stops:\n            capacity -= p\n\n            if capacity < 0:\n                return False\n\n        return True\n"
    },
    {
        "timestamp": "2022-01-05 23:31:39",
        "title": "Palindrome Partitioning",
        "title_slug": "palindrome-partitioning",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1009 ms",
        "memory": "30.6 MB",
        "code": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        @lru_cache\n        def isPalindrome(start, end):\n            while start <= end:\n                if s[start] != s[end]: \n                    return False\n                start += 1\n                end -=1\n                \n            return True\n        \n        def dfs(start, path):\n            if start >= len(s): self.result.append(path)\n                \n            for p in range(len(s) - start):\n                if isPalindrome(start, start + p):\n                    dfs(start + p + 1, path + [s[start:start + p + 1]])\n        \n        self.result = []\n        dfs(0, [])\n        return self.result"
    },
    {
        "timestamp": "2022-01-05 23:30:52",
        "title": "Palindrome Partitioning",
        "title_slug": "palindrome-partitioning",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "984 ms",
        "memory": "30.3 MB",
        "code": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        def isPalindrome(start, end):\n            while start <= end:\n                if s[start] != s[end]: \n                    return False\n                start += 1\n                end -=1\n                \n            return True\n        \n        def dfs(start, path):\n            if start >= len(s): self.result.append(path)\n                \n            for p in range(len(s) - start):\n                if isPalindrome(start, start + p):\n                    dfs(start + p + 1, path + [s[start:start + p + 1]])\n        \n        self.result = []\n        dfs(0, [])\n        return self.result"
    },
    {
        "timestamp": "2022-01-04 08:35:50",
        "title": "Complement of Base 10 Integer",
        "title_slug": "complement-of-base-10-integer",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "37.7 MB",
        "code": "class Solution {\n    public int bitwiseComplement(int n) {\n        StringBuilder result = new StringBuilder();\n        String binary = Integer.toBinaryString(n);\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                result.append(\"0\");\n            } else if (binary.charAt(i) == '0') {\n                result.append(\"1\");\n            }\n        }\n        return Integer.parseInt(result.toString(), 2);\n    }\n}"
    },
    {
        "timestamp": "2022-01-03 15:09:25",
        "title": "Find the Town Judge",
        "title_slug": "find-the-town-judge",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "716 ms",
        "memory": "19 MB",
        "code": "class Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        if not trust and n == 1: return 1\n        candidates = [0] * (n+1)\n\n        for t in trust:\n            candidates[t[1]] += 1\n            candidates[t[0]] -= 1\n            \n        return candidates.index(n-1) if n-1 in candidates else -1\n\n    \n \n"
    },
    {
        "timestamp": "2022-01-03 15:09:03",
        "title": "Find the Town Judge",
        "title_slug": "find-the-town-judge",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "878 ms",
        "memory": "18.8 MB",
        "code": "class Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        if n == 1: return 1\n        candidates = [0] * (n+1)\n\n        for t in trust:\n            candidates[t[1]] += 1\n            candidates[t[0]] -= 1\n            \n        return candidates.index(n-1) if n-1 in candidates else -1\n\n    \n \n"
    },
    {
        "timestamp": "2022-01-02 12:47:51",
        "title": "Pairs of Songs With Total Durations Divisible by 60",
        "title_slug": "pairs-of-songs-with-total-durations-divisible-by-60",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "369 ms",
        "memory": "18.1 MB",
        "code": "class Solution:\n    def numPairsDivisibleBy60(self, time: List[int]) -> int:\n        remainder = collections.defaultdict(int)\n        pairs = 0\n        for t in time:\n            away = t % 60\n            pairs += remainder[(60 - away) % 60]\n            remainder[away] += 1\n        \n        return pairs\n"
    },
    {
        "timestamp": "2022-01-02 12:07:48",
        "title": "A Number After a Double Reversal",
        "title_slug": "a-number-after-a-double-reversal",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "55 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def isSameAfterReversals(self, num: int) -> bool:\n        return str(num) == str(num).rstrip(\"0\") or num == 0"
    },
    {
        "timestamp": "2022-01-02 12:01:28",
        "title": "Check if All A's Appears Before All B's",
        "title_slug": "check-if-all-as-appears-before-all-bs",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "47 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def checkString(self, s: str) -> bool:\n        return \"ba\" not in s"
    },
    {
        "timestamp": "2022-01-01 22:58:48",
        "title": "Burst Balloons",
        "title_slug": "burst-balloons",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "7636 ms",
        "memory": "20 MB",
        "code": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        nums = [1] + nums + [1]\n        dp = [[0 for _ in range(len(nums))] for _ in range(len(nums))]\n        \n        for gap in range(len(nums)):\n            for left in range(len(nums)-gap):\n                right = left + gap\n                \n                res = 0\n                for i in range(left+1, right):\n                    coins = nums[left] * nums[i] * nums[right]\n                    res = max(res, coins + dp[left][i] + dp[i][right])\n                dp[left][right] = res\n                \n        return dp[0][len(nums)-1]"
    },
    {
        "timestamp": "2022-01-01 19:27:16",
        "title": "Word Break II",
        "title_slug": "word-break-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def __init__(self):\n        self.memo = {}\n        \n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        if s in self.memo:\n            return self.memo[s]\n\n        if s == \"\":\n            return [\"\"]\n\n        result = []\n\n        for word in wordDict:\n            if s.find(word) == 0:\n                suffix = s[len(word):]\n                suffixWays = self.wordBreak(suffix, wordDict)\n                for way in suffixWays:\n                    result.append((' '.join([word,way])).strip())\n\n        self.memo[s] = result\n        return result\n"
    },
    {
        "timestamp": "2022-01-01 16:12:37",
        "title": "Word Break",
        "title_slug": "word-break",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def __init__(self):\n        self.memo = {}\n        \n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        if s in self.memo:\n            return self.memo[s]\n        \n        if s == \"\":\n            return True\n        \n        for word in wordDict:\n            if s.find(word) == 0:\n                suffix = s[len(word):]\n                if self.wordBreak(suffix, wordDict) == True:\n                    self.memo[s] = True\n                    return True\n                \n        self.memo[s] = False\n        return False\n                "
    },
    {
        "timestamp": "2021-12-30 20:00:05",
        "title": "Rank Scores",
        "title_slug": "rank-scores",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1659 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\n\nselect score, dense_rank() over (order by score desc) rank from scores\norder by 2 asc\n"
    },
    {
        "timestamp": "2021-12-29 16:14:18",
        "title": "Rotate Image",
        "title_slug": "rotate-image",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "39.8 MB",
        "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        transpose(matrix);\n        reverse(matrix);\n    }\n    \n    public void transpose(int[][] matrix) {\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = i+1; j < matrix.length; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n    \n    public void reverse(int[][] matrix) {\n        int n = matrix.length;\n        \n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[i][n- j -1];\n                matrix[i][n-j-1] = temp;\n            }\n        }\n    }\n}"
    },
    {
        "timestamp": "2021-12-28 23:45:47",
        "title": "Middle of the Linked List",
        "title_slug": "middle-of-the-linked-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "20 ms",
        "memory": "14.3 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        current = head\n        length = 0\n        \n        while current:\n            length += 1\n            current = current.next\n\n        i = 0\n        middle = head\n        while middle.next and i < (length // 2):\n            middle = middle.next\n            i += 1\n            \n        return middle"
    },
    {
        "timestamp": "2021-12-27 15:23:10",
        "title": "Climbing Stairs",
        "title_slug": "climbing-stairs",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "24 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def climbStairs(self, n: int, memo={}) -> int:\n        if n in memo: return memo[n]\n        if n < 3: return n\n\n        memo[n] = self.climbStairs(n-1, memo) + self.climbStairs(n-2, memo)\n        return memo[n]\n"
    },
    {
        "timestamp": "2021-12-27 12:36:26",
        "title": "Climbing Stairs",
        "title_slug": "climbing-stairs",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def climbStairs(self, n: int, memo={}) -> int:\n        if n in memo:\n            return memo[n]\n\n        if n == 1:\n            return n\n\n        if n == 2:\n            return n\n\n        memo[n] = self.climbStairs(n-1, memo) + self.climbStairs(n-2, memo)\n        return memo[n]\n"
    },
    {
        "timestamp": "2021-12-27 11:50:26",
        "title": "Complement of Base 10 Integer",
        "title_slug": "complement-of-base-10-integer",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "35.7 MB",
        "code": "class Solution {\n    public int bitwiseComplement(int n) {\n        StringBuilder result = new StringBuilder();\n        String binary = Integer.toBinaryString(n);\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                result.append(\"0\");\n            } else if (binary.charAt(i) == '0') {\n                result.append(\"1\");\n            }\n        }\n        return Integer.parseInt(result.toString(), 2);\n    }\n}"
    },
    {
        "timestamp": "2021-12-27 11:41:13",
        "title": "Number Complement",
        "title_slug": "number-complement",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "35.5 MB",
        "code": "class Solution {\n    public int findComplement(int num) {\n        StringBuilder result = new StringBuilder();\n        String binary = Integer.toBinaryString(num);\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                result.append(\"0\");\n            } else if (binary.charAt(i) == '0') {\n                result.append(\"1\");\n            }\n        }\n        return Integer.parseInt(result.toString(), 2);\n    }\n}"
    },
    {
        "timestamp": "2021-12-26 12:57:23",
        "title": "K Closest Points to Origin",
        "title_slug": "k-closest-points-to-origin",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "632 ms",
        "memory": "19.6 MB",
        "code": "class Solution:\n    def distance(self, point):\n        return point[0] ** 2 + point[1] ** 2\n\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        points.sort(key=self.distance) \n        return points[:k]\n\n"
    },
    {
        "timestamp": "2021-12-25 14:33:14",
        "title": "Maximum Number of Words Found in Sentences",
        "title_slug": "maximum-number-of-words-found-in-sentences",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "42 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        ht = {}\n        for sentence in sentences:\n            ht[sentence] = len(sentence.split())\n\n        return max(ht.values())\n"
    },
    {
        "timestamp": "2021-12-21 13:33:50",
        "title": "Power of Four",
        "title_slug": "power-of-four",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "36.2 MB",
        "code": "class Solution {\n    public boolean isPowerOfFour(int n) {\n        if (n <= 0) return false;\n        if (n == 1) return true;\n        else {\n            while (n > 1) {\n                if (n % 4 != 0) {\n                    return false;\n                }\n                n = n / 4;                   \n            }\n        }\n        \n        return true;  \n    }\n}"
    },
    {
        "timestamp": "2021-12-21 13:33:03",
        "title": "Power of Two",
        "title_slug": "power-of-two",
        "status": "Accepted",
        "lang": "java",
        "runtime": "1 ms",
        "memory": "35.9 MB",
        "code": "class Solution {\n    public boolean isPowerOfTwo(int n) {\n        if (n <= 0) return false;\n        if (n == 1) return true;\n        else {\n            while (n > 1) {\n                if (n % 2 != 0) {\n                    return false;\n                }\n                n = n / 2;                   \n            }\n        }\n        \n        return true;  \n    }\n}"
    },
    {
        "timestamp": "2021-12-21 13:30:37",
        "title": "Power of Two",
        "title_slug": "power-of-two",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "24 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        if n <= 0:\n            return False\n        if n == 1:\n            return True\n        while n > 1:\n            if n % 2 != 0:\n                return False\n            n = n // 2\n        \n        return True"
    },
    {
        "timestamp": "2021-12-20 00:29:47",
        "title": "Adding Spaces to a String",
        "title_slug": "adding-spaces-to-a-string",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "704 ms",
        "memory": "62.8 MB",
        "code": "class Solution:\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\n        pairs = [(x,y) for x,y in zip(spaces[:-1], spaces[1:])]\n        pairs.insert(0, (0, spaces[0]))\n        pairs.append((spaces[-1], len(s)))\n        return \" \".join([s[i:j] for i, j in pairs])\n\n"
    },
    {
        "timestamp": "2021-12-19 23:59:19",
        "title": "Find First Palindromic String in the Array",
        "title_slug": "find-first-palindromic-string-in-the-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        for word in words:\n            if word == word[::-1]:\n                return word\n        \n        return \"\""
    },
    {
        "timestamp": "2021-12-14 15:29:32",
        "title": "Consecutive Characters",
        "title_slug": "consecutive-characters",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "52 ms",
        "memory": "14.4 MB",
        "code": "from itertools import groupby\n\nclass Solution:\n    def maxPower(self, s: str) -> int:\n        return max(len(list(g)) for _, g in groupby(s))"
    },
    {
        "timestamp": "2021-12-14 15:23:34",
        "title": "Consecutive Characters",
        "title_slug": "consecutive-characters",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "49 ms",
        "memory": "14.5 MB",
        "code": "from itertools import groupby\n\nclass Solution:\n    def maxPower(self, s: str) -> int:\n        return len(max((list(g) for i, g in groupby(s)), key=len))"
    },
    {
        "timestamp": "2021-12-14 08:52:02",
        "title": "Range Sum of BST",
        "title_slug": "range-sum-of-bst",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "364 ms",
        "memory": "22.7 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:\n        def dfs(root):\n            if not root:\n                return []\n            res = [root.val] + dfs(root.left) + dfs(root.right)\n            return list(filter(lambda x: x <= high and x >= low, res))\n        \n        return sum(dfs(root))"
    },
    {
        "timestamp": "2021-12-14 08:50:11",
        "title": "Range Sum of BST",
        "title_slug": "range-sum-of-bst",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "392 ms",
        "memory": "22.6 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:\n        res = []\n        def preOrder(root):\n            if not root:\n                return []\n            res = [root.val] + preOrder(root.left) + preOrder(root.right)\n            return list(filter(lambda x: x <= high and x >= low, res))\n        \n        return sum(preOrder(root))\n        "
    },
    {
        "timestamp": "2021-12-12 23:18:07",
        "title": "Split a String in Balanced Strings",
        "title_slug": "split-a-string-in-balanced-strings",
        "status": "Accepted",
        "lang": "java",
        "runtime": "0 ms",
        "memory": "36.9 MB",
        "code": "class Solution {\n    public int balancedStringSplit(String s) {\n        int count = 0;\n        int balance = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'R') {\n                balance++;\n            } else if (s.charAt(i) == 'L') {\n                balance--;\n            }\n            \n            if (balance == 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"
    },
    {
        "timestamp": "2021-12-10 23:18:19",
        "title": "Count the Number of Consistent Strings",
        "title_slug": "count-the-number-of-consistent-strings",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "284 ms",
        "memory": "16.1 MB",
        "code": "class Solution:\n    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:\n        count = 0\n        for word in words:\n            if len(set(word).difference(allowed)) == 0:\n                count += 1\n                \n        return count"
    },
    {
        "timestamp": "2021-12-07 10:30:38",
        "title": "Convert Binary Number in a Linked List to Integer",
        "title_slug": "convert-binary-number-in-a-linked-list-to-integer",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.3 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def getDecimalValue(self, head: ListNode) -> int:\n        number = \"\"\n        while head:\n            number += str(head.val)\n            head = head.next\n            \n        return int(number, 2)"
    },
    {
        "timestamp": "2021-12-05 15:55:59",
        "title": "Subtract the Product and Sum of Digits of an Integer",
        "title_slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        sumOfDigits = 0\n        product = 1\n        while n > 0:\n            mod = n % 10\n            n = int(n - mod) // 10\n            sumOfDigits += mod\n            product *= mod\n            \n        return product - sumOfDigits\n            "
    },
    {
        "timestamp": "2021-12-01 21:51:10",
        "title": "Sorting the Sentence",
        "title_slug": "sorting-the-sentence",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def sortSentence(self, s: str) -> str:\n        s = s.split()\n        s.sort(key=lambda x: x[-1])\n        return \" \".join([word[:-1] for word in s])"
    },
    {
        "timestamp": "2021-12-01 20:55:28",
        "title": "Count Items Matching a Rule",
        "title_slug": "count-items-matching-a-rule",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "232 ms",
        "memory": "20.6 MB",
        "code": "class Solution:\n    def countMatches(self, items: List[List[str]], ruleKey: str, ruleValue: str) -> int:\n        matchCount = 0\n        \n        for item in items:\n            if ruleKey == 'type':\n                if item[0] == ruleValue:\n                    matchCount += 1\n            if ruleKey == 'color':\n                if item[1] == ruleValue:\n                    matchCount += 1\n            if ruleKey == 'name':\n                if item[2] == ruleValue:\n                    matchCount += 1\n                    \n        return matchCount"
    },
    {
        "timestamp": "2021-12-01 20:49:45",
        "title": "Check if the Sentence Is Pangram",
        "title_slug": "check-if-the-sentence-is-pangram",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.3 MB",
        "code": "from string import ascii_lowercase as alphabet\n\nclass Solution:\n    def checkIfPangram(self, sentence: str) -> bool:\n        for char in alphabet:\n            if char not in sentence:\n                return False\n            \n        return True"
    },
    {
        "timestamp": "2021-12-01 20:45:41",
        "title": "Split a String in Balanced Strings",
        "title_slug": "split-a-string-in-balanced-strings",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "24 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        balance = 0\n        count = 0\n        \n        for i in range(len(s)):\n            if s[i] == 'R':\n                balance += 1\n            elif s[i] == 'L':\n                balance -= 1\n            \n            if balance == 0:\n                count += 1\n\n        return count"
    },
    {
        "timestamp": "2021-12-01 20:28:23",
        "title": "Goal Parser Interpretation",
        "title_slug": "goal-parser-interpretation",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def interpret(self, command: str) -> str:\n        result = \"\"\n        \n        for i in range(len(command)):\n            if command[i] == 'G':\n                result += command[i]\n                \n            elif command[i] == '(':\n                if command[i+1] == ')':\n                    result += 'o'\n                else:\n                    result += 'al'\n                \n        return result"
    },
    {
        "timestamp": "2021-11-29 19:55:33",
        "title": "Sort Integers by The Number of 1 Bits",
        "title_slug": "sort-integers-by-the-number-of-1-bits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "60 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def sortByBits(self, arr: List[int]) -> List[int]:\n        arr.sort()\n        key = lambda x: bin(x).count(\"1\")\n        return sorted(arr, key=key)"
    },
    {
        "timestamp": "2021-11-28 17:51:23",
        "title": "Product of Array Except Self",
        "title_slug": "product-of-array-except-self",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "236 ms",
        "memory": "21.2 MB",
        "code": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        prod = 1\n        res = []\n\n        for num in nums:\n            res.append(prod)\n            prod *= num\n\n        prod = 1\n        for i in range(len(nums)-1, -1, -1):\n            res[i] *= prod\n            prod *= nums[i]\n            \n        return res\n"
    },
    {
        "timestamp": "2021-11-26 21:50:24",
        "title": "Search Insert Position",
        "title_slug": "search-insert-position",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "59 ms",
        "memory": "15.2 MB",
        "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        for i in range(len(nums)):\n            if target not in nums:\n                if target > max(nums):\n                    return nums.index(max(nums)) + 1\n                elif target < nums[i]:\n                    return i\n            else:\n                return nums.index(target)"
    },
    {
        "timestamp": "2021-11-25 21:54:17",
        "title": "Maximum Subarray",
        "title_slug": "maximum-subarray",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "732 ms",
        "memory": "28.6 MB",
        "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        max_current = max_global = nums[0]\n        \n        for i in range(1, len(nums)):\n            max_current = max(nums[i], nums[i] + max_current)\n            \n            if max_current > max_global:\n                max_global = max_current\n                \n        return max_global\n                \n            "
    },
    {
        "timestamp": "2021-11-24 23:59:21",
        "title": "Jewels and Stones",
        "title_slug": "jewels-and-stones",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "40 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        return len([1 for s in stones if s in jewels])"
    },
    {
        "timestamp": "2021-11-24 23:59:09",
        "title": "Jewels and Stones",
        "title_slug": "jewels-and-stones",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "44 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        return sum([1 for s in stones if s in jewels])"
    },
    {
        "timestamp": "2021-11-24 23:56:07",
        "title": "Jewels and Stones",
        "title_slug": "jewels-and-stones",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "48 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        count = 0\n        for jewel in jewels:\n            count += stones.count(jewel)\n            \n        return count"
    },
    {
        "timestamp": "2021-11-23 22:17:53",
        "title": "Merge Strings Alternately",
        "title_slug": "merge-strings-alternately",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        return \"\".join(w1 + w2 for w1, w2 in zip_longest(word1, word2, fillvalue=\"\"))\n"
    },
    {
        "timestamp": "2021-11-23 21:49:00",
        "title": "Truncate Sentence",
        "title_slug": "truncate-sentence",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "20 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def truncateSentence(self, s: str, k: int) -> str:\n        return \" \".join(s.split()[:k])"
    },
    {
        "timestamp": "2021-11-22 18:38:16",
        "title": "Shuffle String",
        "title_slug": "shuffle-string",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "48 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def restoreString(self, s: str, indices: List[int]) -> str:\n        n = len(s)\n        res = [\"\"] * n\n\n        for i in range(len(indices)):\n            res[indices[i]] = s[i]\n\n        return \"\".join(res)\n"
    },
    {
        "timestamp": "2021-11-21 23:45:13",
        "title": "Final Value of Variable After Performing Operations",
        "title_slug": "final-value-of-variable-after-performing-operations",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "85 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:\n        x = 0\n        for oper in operations:\n            if '+' in oper: x += 1\n            else: x -= 1\n        return x\n            "
    },
    {
        "timestamp": "2021-11-21 23:44:50",
        "title": "Final Value of Variable After Performing Operations",
        "title_slug": "final-value-of-variable-after-performing-operations",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "89 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:\n        x = 0\n        for oper in operations:\n            if '--' in oper: x -= 1\n            else: x += 1\n        return x\n            "
    },
    {
        "timestamp": "2021-11-21 23:44:19",
        "title": "Final Value of Variable After Performing Operations",
        "title_slug": "final-value-of-variable-after-performing-operations",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "89 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:\n        return sum(1 if '+' in oper else -1 for oper in operations)\n            "
    },
    {
        "timestamp": "2021-11-21 23:42:53",
        "title": "Final Value of Variable After Performing Operations",
        "title_slug": "final-value-of-variable-after-performing-operations",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "52 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:\n        x = 0\n        for oper in operations:\n            if '--' in oper: x -= 1\n            elif '++' in oper: x += 1\n        return x\n            "
    },
    {
        "timestamp": "2021-11-21 23:41:22",
        "title": "Final Value of Variable After Performing Operations",
        "title_slug": "final-value-of-variable-after-performing-operations",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "60 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:\n        x = 0\n        for oper in operations:\n            if '--' in oper:\n                x -= 1\n            elif '++' in oper:\n                x += 1\n                \n        return x\n            "
    },
    {
        "timestamp": "2021-11-21 23:35:04",
        "title": "Defanging an IP Address",
        "title_slug": "defanging-an-ip-address",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def defangIPaddr(self, address: str) -> str:\n        return address.replace('.', '[.]')"
    },
    {
        "timestamp": "2021-11-20 21:18:25",
        "title": "Single Element in a Sorted Array",
        "title_slug": "single-element-in-a-sorted-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "5080 ms",
        "memory": "16.4 MB",
        "code": "class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        for num in nums:\n            if nums.count(num) == 1:\n                return num"
    },
    {
        "timestamp": "2021-11-19 19:05:18",
        "title": "Hamming Distance",
        "title_slug": "hamming-distance",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        return bin(x ^ y).count(\"1\")"
    },
    {
        "timestamp": "2021-11-18 09:22:05",
        "title": "Find All Numbers Disappeared in an Array",
        "title_slug": "find-all-numbers-disappeared-in-an-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "336 ms",
        "memory": "25.9 MB",
        "code": "class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        return set(range(1, n+1)) - set(nums)\n\n"
    },
    {
        "timestamp": "2021-11-18 09:19:44",
        "title": "Find All Numbers Disappeared in an Array",
        "title_slug": "find-all-numbers-disappeared-in-an-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "340 ms",
        "memory": "26.7 MB",
        "code": "class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        return list(set(range(1, n+1)).difference(nums))\n\n"
    },
    {
        "timestamp": "2021-11-17 22:35:25",
        "title": "Unique Paths",
        "title_slug": "unique-paths",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def uniquePaths(self, m: int, n: int, memo={}) -> int:\n        key = f'{m, n}'\n        if key in memo:\n            return memo[key]\n\n        if m == 0 or n == 0:\n            return 0\n\n        if m == 1 and n == 1:\n            return 1\n\n        memo[key] = self.uniquePaths(m-1, n, memo) + self.uniquePaths(m, n-1, memo)\n        return memo[key]\n"
    },
    {
        "timestamp": "2021-11-14 21:21:47",
        "title": "Pow(x, n)",
        "title_slug": "powx-n",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n < 0:\n            return self.myPow(1/x, -n)\n        else:\n            if n % 2 == 0:\n                return self.myPow(x*x, n//2)\n            else:\n                return x * self.myPow(x*x, n//2)\n                \n            "
    },
    {
        "timestamp": "2021-11-14 15:28:35",
        "title": "Iterator for Combination",
        "title_slug": "iterator-for-combination",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "44 ms",
        "memory": "16.6 MB",
        "code": "class CombinationIterator:\n\n    def __init__(self, characters: str, combinationLength: int):\n        self.combinations = [\"\".join(c) for c in combinations(characters, combinationLength)]\n        self.index = -1\n        \n    def next(self) -> str:\n        self.index += 1\n        return self.combinations[self.index]\n\n    def hasNext(self) -> bool:\n        return self.index < len(self.combinations) - 1\n\n\n# Your CombinationIterator object will be instantiated and called as such:\n# obj = CombinationIterator(characters, combinationLength)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()"
    },
    {
        "timestamp": "2021-11-12 14:34:10",
        "title": "Remove Linked List Elements",
        "title_slug": "remove-linked-list-elements",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "72 ms",
        "memory": "17.1 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        current = head\n        prev = None\n        \n        while current:\n            if current.val == val:\n                if prev:\n                    prev.next = current.next\n                else:\n                    head = current.next\n                current = current.next\n            else:\n                prev = current\n                current = current.next\n                \n        return head\n        "
    },
    {
        "timestamp": "2021-11-11 22:10:42",
        "title": "Minimum Value to Get Positive Step by Step Sum",
        "title_slug": "minimum-value-to-get-positive-step-by-step-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        min_value, total = 0, 0\n\n        for num in nums:\n            total += num\n            min_value = min(total, min_value)\n\n        return -min_value + 1\n"
    },
    {
        "timestamp": "2021-11-11 22:00:58",
        "title": "Minimum Value to Get Positive Step by Step Sum",
        "title_slug": "minimum-value-to-get-positive-step-by-step-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "44 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        startValue = 1\n\n        while True:\n            total = startValue\n            is_valid = True\n\n            for num in nums:\n                total += num\n\n                if total < 1: \n                    is_valid = False\n                    break\n\n            if is_valid:\n                return startValue\n            else:\n                startValue += 1\n"
    },
    {
        "timestamp": "2021-11-06 19:38:22",
        "title": "Single Number III",
        "title_slug": "single-number-iii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "4416 ms",
        "memory": "16 MB",
        "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        return [num for num in nums if nums.count(num) == 1]\n"
    },
    {
        "timestamp": "2021-11-05 14:04:29",
        "title": "Pow(x, n)",
        "title_slug": "powx-n",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        return x**n"
    },
    {
        "timestamp": "2021-11-04 23:00:33",
        "title": "Sum of Left Leaves",
        "title_slug": "sum-of-left-leaves",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.9 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        else:\n            return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)\n                "
    },
    {
        "timestamp": "2021-11-02 12:02:32",
        "title": "The kth Factor of n",
        "title_slug": "the-kth-factor-of-n",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        factors = []\n        i = 1\n        while i * i <= n:\n            if n % i == 0:\n                factors.append(i)\n                if (n//i) != i:\n                    factors.append(n//i)\n            i += 1 \n        factors.sort()\n        return factors[k-1] if k-1 < len(factors) else -1"
    },
    {
        "timestamp": "2021-11-02 08:23:37",
        "title": "Maximum Number of Balloons",
        "title_slug": "maximum-number-of-balloons",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        return min(text.count('b'), text.count('a'), text.count('l')//2, text.count('o')//2, text.count('n'))"
    },
    {
        "timestamp": "2021-11-01 22:54:18",
        "title": "Add Strings",
        "title_slug": "add-strings",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "44 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        n1 = n2 = 0\n        for num in num1:\n            n1 = n1 * 10 + int(num)     # expanded form\n        \n        for num in num2:\n            n2 = n2 * 10 + int(num)\n            \n        return str(n1 + n2)\n"
    },
    {
        "timestamp": "2021-10-31 23:16:36",
        "title": "3Sum",
        "title_slug": "3sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1076 ms",
        "memory": "17.5 MB",
        "code": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()     \n        res = []\n\n        for x in range(len(nums)):\n            if x > 0 and nums[x] == nums[x-1]:\n                continue\n\n            i, j = x + 1, len(nums)-1\n            while i < j:\n                if nums[x] + nums[i] + nums[j] < 0:\n                    i += 1\n                elif nums[x] + nums[i] + nums[j] > 0:\n                    j -= 1\n                else:\n                    res.append([nums[x], nums[i], nums[j]])\n                    i += 1\n\n                    while i < j and nums[i] == nums[i-1]:\n                        i += 1\n        return res\n\n"
    },
    {
        "timestamp": "2021-10-30 19:42:22",
        "title": "The kth Factor of n",
        "title_slug": "the-kth-factor-of-n",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        factors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                factors.append(i)\n\n        return factors[k-1] if k - 1 < len(factors) else -1\n"
    },
    {
        "timestamp": "2021-10-29 19:07:24",
        "title": "Sort Colors",
        "title_slug": "sort-colors",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "20 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        low = mid = 0\n        high = len(nums)-1\n\n        while mid <= high:\n            if nums[mid] == 0:\n                nums[low], nums[mid] = nums[mid], nums[low]\n                low += 1\n                mid += 1\n\n            elif nums[mid] == 1:\n                mid += 1\n\n            elif nums[mid] == 2:\n                nums[high], nums[mid] = nums[mid], nums[high]\n                high -= 1\n"
    },
    {
        "timestamp": "2021-10-27 09:01:16",
        "title": "Two Sum II - Input Array Is Sorted",
        "title_slug": "two-sum-ii-input-array-is-sorted",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "60 ms",
        "memory": "14.8 MB",
        "code": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        i, j = 0, len(numbers)-1\n\n        while i < len(numbers) and j < len(numbers):\n            if numbers[i] + numbers[j] > target:\n                j -= 1\n            elif numbers[i] + numbers[j] < target:\n                i += 1\n            else:\n                return [i+1,j+1]\n"
    },
    {
        "timestamp": "2021-10-25 21:38:23",
        "title": "Min Stack",
        "title_slug": "min-stack",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "579 ms",
        "memory": "18.2 MB",
        "code": "class MinStack:\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self._items = []\n\n    def push(self, val: int) -> None:\n        self._items.append(val)\n\n    def pop(self) -> None:\n        return self._items.pop()\n\n    def top(self) -> int:\n        return self._items[-1]\n\n    def getMin(self) -> int:\n        return min(self._items)\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()"
    },
    {
        "timestamp": "2021-10-24 23:39:29",
        "title": "Count Complete Tree Nodes",
        "title_slug": "count-complete-tree-nodes",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "88 ms",
        "memory": "21.3 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right) if root else 0\n        \n"
    },
    {
        "timestamp": "2021-10-22 19:07:11",
        "title": "Sort Characters By Frequency",
        "title_slug": "sort-characters-by-frequency",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "15.2 MB",
        "code": "class Solution:\n    def frequencySort(self, s: str) -> str:\n        res = \"\"\n        sorting = collections.Counter(s)        \n        for i, j in sorted(sorting.items(), key=lambda x: x[1], reverse=True):\n            if j > 1:\n                res += i * j\n            else:\n                res += i\n        return res\n"
    },
    {
        "timestamp": "2021-10-21 23:47:26",
        "title": "Insert Delete GetRandom O(1)",
        "title_slug": "insert-delete-getrandom-o1",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "699 ms",
        "memory": "61.5 MB",
        "code": "import random\nclass RandomizedSet:\n\n    def __init__(self):\n        self.set = set()\n\n    def insert(self, val: int) -> bool:\n        if val not in self.set:\n            self.set.add(val)\n            return True\n        else:\n            return False\n\n    def remove(self, val: int) -> bool:\n        if val in self.set:\n            self.set.remove(val)\n            return True\n        else:\n            return False\n\n    def getRandom(self) -> int:\n        return random.choice(list(self.set))\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"
    },
    {
        "timestamp": "2021-10-20 11:59:39",
        "title": "Reverse Words in a String",
        "title_slug": "reverse-words-in-a-string",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "41 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        return \" \".join(s.split()[::-1])\n"
    },
    {
        "timestamp": "2021-10-17 22:19:49",
        "title": "Longest Mountain in Array",
        "title_slug": "longest-mountain-in-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "172 ms",
        "memory": "15.4 MB",
        "code": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        base = res = 0\n        N = len(arr)\n        \n        while base < N:\n            end = base\n            if end + 1 < N and arr[end] < arr[end+1]:\n                while end + 1 < N and arr[end] < arr[end+1]:\n                    end += 1\n                \n                if end + 1 < N and arr[end] > arr[end+1]:\n                    while end + 1 < N and arr[end] > arr[end+1]:\n                        end += 1\n                    \n                    res = max(res, end-base+1)\n                    \n            base = max(end, base + 1)\n            \n        return res\n                    \n                    \n                    \n            "
    },
    {
        "timestamp": "2021-10-16 19:13:50",
        "title": "Kth Largest Element in a Stream",
        "title_slug": "kth-largest-element-in-a-stream",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "100 ms",
        "memory": "18.4 MB",
        "code": "import heapq\n\nclass KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        self.k = k\n        self.nums = nums\n        heapq.heapify(self.nums)\n        \n        while len(self.nums) > k:\n            heapq.heappop(self.nums)\n\n    def add(self, val: int) -> int:\n        heapq.heappush(self.nums, val)\n        if len(self.nums) > self.k:\n            heapq.heappop(self.nums)\n        return self.nums[0]\n\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)"
    },
    {
        "timestamp": "2021-10-16 15:57:29",
        "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "title_slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "976 ms",
        "memory": "15.4 MB",
        "code": "class Solution:\n    def winnerOfGame(self, colors: str) -> bool:\n        if colors.count('A') < 3:\n            return False\n        \n        alice = 0\n        bob = 0\n        for i in range(1, len(colors)-1):\n            print(alice, bob)\n            if colors[i-1] == colors[i] == colors[i+1] == 'A':\n                alice += 1\n\n            if colors[i-1] == colors[i] == colors[i+1] == 'B':\n                bob += 1\n\n\n        return alice > bob\n"
    },
    {
        "timestamp": "2021-10-16 15:44:22",
        "title": "Minimum Number of Moves to Seat Everyone",
        "title_slug": "minimum-number-of-moves-to-seat-everyone",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "80 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:\n        total = 0\n        for x,y in zip(sorted(seats), sorted(students)):\n            total += abs(x-y)\n\n        return total\n\n\n"
    },
    {
        "timestamp": "2021-10-13 21:43:55",
        "title": "Minimum Size Subarray Sum",
        "title_slug": "minimum-size-subarray-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "72 ms",
        "memory": "16.6 MB",
        "code": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        min_size = float('inf')\n        start = 0\n        curr_sum = 0\n        for end, val in enumerate(nums):\n            curr_sum += val\n\n            while curr_sum >= target:\n                min_size = min(min_size, end - start + 1)\n                curr_sum -= nums[start] \n                start += 1\n\n        return min_size if min_size != float('inf') else 0\n"
    },
    {
        "timestamp": "2021-10-13 21:43:36",
        "title": "Minimum Size Subarray Sum",
        "title_slug": "minimum-size-subarray-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "124 ms",
        "memory": "16.7 MB",
        "code": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        min_size = float('inf')\n        start = 0\n        curr_sum = 0\n        for end, val in enumerate(nums):\n            curr_sum += val\n\n            while curr_sum >= target:\n                min_size = min(min_size, end - start + 1)\n                curr_sum -= nums[start] \n                start += 1\n\n        return min_size if min_size != float(inf) else 0\n"
    },
    {
        "timestamp": "2021-10-12 23:08:16",
        "title": "Guess Number Higher or Lower",
        "title_slug": "guess-number-higher-or-lower",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "35 ms",
        "memory": "14.3 MB",
        "code": "# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n# def guess(num: int) -> int:\n# [1,2,3,4,5,6,7, 8 ,9,10] # res = 8\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        low = 1\n        high = n\n        while low <= high:\n            mid = low + (high - low) // 2\n            res = guess(mid)\n            if res == 0:\n                return mid\n            elif res > 0:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1"
    },
    {
        "timestamp": "2021-10-10 15:50:20",
        "title": "Binary Tree Postorder Traversal",
        "title_slug": "binary-tree-postorder-traversal",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.3 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        if not root:\n            return []\n        \n        return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]"
    },
    {
        "timestamp": "2021-10-10 15:48:58",
        "title": "Binary Tree Preorder Traversal",
        "title_slug": "binary-tree-preorder-traversal",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.3 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        if not root:\n            return []\n        \n        return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)"
    },
    {
        "timestamp": "2021-10-09 23:28:37",
        "title": "Binary Tree Inorder Traversal",
        "title_slug": "binary-tree-inorder-traversal",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.2 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        if not root:\n            return []\n        \n        if root:\n            return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n            "
    },
    {
        "timestamp": "2021-10-09 23:14:16",
        "title": "Validate Binary Search Tree",
        "title_slug": "validate-binary-search-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "48 ms",
        "memory": "17.3 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:           \n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        temp = []\n        def dfs(node=root):\n            if node:\n                dfs(node.left)\n                temp.append(node.val)\n                dfs(node.right)\n        dfs()\n        first = temp[0]\n        \n        for i in range(1, len(temp)):\n            if first >= temp[i]:\n                return False\n            first = temp[i]\n        return True        \n"
    },
    {
        "timestamp": "2021-10-08 10:29:15",
        "title": "Implement Trie (Prefix Tree)",
        "title_slug": "implement-trie-prefix-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "160 ms",
        "memory": "31.5 MB",
        "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.isEndofWord = False\n        \nclass Trie:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        root = self.root\n        for letter in word:\n            if letter not in root.children:\n                root.children[letter] = TrieNode()\n            root = root.children[letter]\n    \n        root.isEndofWord = True\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        root = self.root\n        for letter in word:\n            if letter not in root.children:\n                return False\n            root = root.children[letter]\n        \n        return root.isEndofWord\n        \n        \n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        root = self.root\n\n        for letter in prefix:\n            if letter not in root.children:\n                return False\n            root = root.children[letter]\n            \n        return True\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)"
    },
    {
        "timestamp": "2021-10-07 09:44:40",
        "title": "Duplicate Emails",
        "title_slug": "duplicate-emails",
        "status": "Accepted",
        "lang": "mysql",
        "runtime": "306 ms",
        "memory": "0B",
        "code": "SELECT Email\nFROM (\n\t\tSELECT Email,\n\t\t\tCOUNT(email) AS cnt\n\t\tFROM Person\n\t\tGROUP BY 1\n\t) a\nWHERE cnt > 1"
    },
    {
        "timestamp": "2021-10-06 19:31:38",
        "title": "Find All Duplicates in an Array",
        "title_slug": "find-all-duplicates-in-an-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "328 ms",
        "memory": "23 MB",
        "code": "import collections\n\nclass Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        lst = collections.Counter(nums)\n        return [i for i,j in lst.items() if j == 2]\n\n        "
    },
    {
        "timestamp": "2021-10-02 17:19:49",
        "title": "Number of Pairs of Strings With Concatenation Equal to Target",
        "title_slug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "139 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def numOfPairs(self, nums: List[str], target: str) -> int:\n        count = 0\n\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[i] + nums[j] == target and i != j:\n                    count += 1\n\n        return count\n\n\n\n\n"
    },
    {
        "timestamp": "2021-10-02 15:53:28",
        "title": "Convert 1D Array Into 2D Array",
        "title_slug": "convert-1d-array-into-2d-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1547 ms",
        "memory": "36 MB",
        "code": "import numpy as np\n\nclass Solution:\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\n        try:\n            result = np.reshape(np.array(original), (m,n))       \n            return result\n        except ValueError:\n            return []\n\n"
    },
    {
        "timestamp": "2021-10-01 23:13:02",
        "title": "Valid Parentheses",
        "title_slug": "valid-parentheses",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "49 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 2:\n            return False\n        \n        ht = { '(': ')', '[': ']', '{': '}' }\n        stack = ['']\n        \n        for i in s:\n            if i in ht.keys():    # opened brackets\n                stack.append(ht[i])\n            elif i != stack.pop():\n                return False\n            \n        return stack == ['']\n                \n\n                    \n        \n        "
    },
    {
        "timestamp": "2021-10-01 23:10:06",
        "title": "Valid Parentheses",
        "title_slug": "valid-parentheses",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "44 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 2:\n            return False\n        \n        ht = { '(': ')', '[': ']', '{': '}' }\n        stack = []\n        \n        for i in s:\n            if i in ht.keys():    # opened brackets\n                stack.append(ht[i])\n            elif not stack or i != stack.pop():\n                return False\n            \n        return stack == []\n                \n\n                    \n        \n        "
    },
    {
        "timestamp": "2021-10-01 23:01:16",
        "title": "Valid Parentheses",
        "title_slug": "valid-parentheses",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "61 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        ht = { '(': ')', '[': ']', '{': '}' }\n        stack = []\n        \n        for i in s:\n            if i in ht.keys():    # opened brackets\n                stack.append(ht[i])\n            elif not stack or i != stack.pop():\n                return False\n            \n        return stack == []\n                \n\n                    \n        \n        "
    },
    {
        "timestamp": "2021-09-29 23:58:57",
        "title": "Valid Anagram",
        "title_slug": "valid-anagram",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "14.6 MB",
        "code": "from collections import Counter\n\nclass Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        return Counter(s) == Counter(t)    \n\n"
    },
    {
        "timestamp": "2021-09-28 22:52:19",
        "title": "Sort Array By Parity II",
        "title_slug": "sort-array-by-parity-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "192 ms",
        "memory": "16.3 MB",
        "code": "class Solution:\n    def sortArrayByParityII(self, nums: List[int]) -> List[int]:\n        j = 1 # for odd numbers\n        \n        for i in range(0, len(nums), 2):\n            if nums[i] % 2:\n                while nums[j] % 2:\n                    j += 2 \n                nums[i], nums[j] = nums[j], nums[i]\n        return nums"
    },
    {
        "timestamp": "2021-09-28 22:33:12",
        "title": "Sort Array By Parity II",
        "title_slug": "sort-array-by-parity-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "232 ms",
        "memory": "16 MB",
        "code": "class Solution:\n    def sortArrayByParityII(self, nums: List[int]) -> List[int]:\n        i = 0 # even \n        j = 1 # odd\n\n        while i < len(nums) and j < len(nums):\n            if nums[i] % 2 == 0:\n                i += 2\n            elif nums[j] % 2 == 1:\n                j += 2\n            else:\n                nums[i], nums[j] = nums[j], nums[i]\n\n        return nums"
    },
    {
        "timestamp": "2021-09-27 22:28:25",
        "title": "Palindrome Number",
        "title_slug": "palindrome-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return True if str(x) == str(x)[::-1] else False\n"
    },
    {
        "timestamp": "2021-09-25 21:07:18",
        "title": "Intersection of Two Arrays II",
        "title_slug": "intersection-of-two-arrays-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        intersection = []\n        for i in nums2:\n            if i in nums1:\n                intersection.append(nums1.pop(nums1.index(i)))\n        return intersection\n"
    },
    {
        "timestamp": "2021-09-25 20:10:48",
        "title": "Best Time to Buy and Sell Stock",
        "title_slug": "best-time-to-buy-and-sell-stock",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1004 ms",
        "memory": "25.2 MB",
        "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:  \n        max_profit = 0\n        minimum = max(prices)\n\n        for i in range(len(prices)):\n            if prices[i] < minimum:\n                minimum = prices[i]\n            else:\n                max_profit = max(max_profit, prices[i] - minimum)\n\n        return max_profit   "
    },
    {
        "timestamp": "2021-09-24 20:28:11",
        "title": "Two Sum",
        "title_slug": "two-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "15.7 MB",
        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        ht = dict()\n        \n        for i in range(len(nums)):\n            if nums[i] in ht:\n                return [ht[nums[i]], i]\n            else:\n                ht[target - nums[i]] = i"
    },
    {
        "timestamp": "2021-09-24 20:27:31",
        "title": "Merge Sorted Array",
        "title_slug": "merge-sorted-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        nums1[m:] = nums2\n        nums1.sort()\n"
    },
    {
        "timestamp": "2021-09-23 23:42:02",
        "title": "Maximum Subarray",
        "title_slug": "maximum-subarray",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "732 ms",
        "memory": "28.7 MB",
        "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        max_current = max_global = nums[0]\n        \n        for i in range(1, len(nums)):\n            max_current = max(nums[i], nums[i] + max_current)\n            \n            if max_current > max_global:\n                max_global = max_current\n                \n        return max_global\n                \n            "
    },
    {
        "timestamp": "2021-09-23 23:36:29",
        "title": "Contains Duplicate",
        "title_slug": "contains-duplicate",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "124 ms",
        "memory": "19.9 MB",
        "code": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums) != len(set(nums))"
    },
    {
        "timestamp": "2021-09-22 23:06:39",
        "title": "Same Tree",
        "title_slug": "same-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "20 ms",
        "memory": "14.2 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n        # self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n            \n        if p.val == q.val:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n            "
    },
    {
        "timestamp": "2021-09-21 12:53:01",
        "title": "Implement Trie (Prefix Tree)",
        "title_slug": "implement-trie-prefix-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "184 ms",
        "memory": "31.6 MB",
        "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.isEndofWord = False\n        \nclass Trie:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        root = self.root\n        for letter in word:\n            if letter not in root.children:\n                root.children[letter] = TrieNode()\n            root = root.children[letter]\n    \n        root.isEndofWord = True\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        root = self.root\n        for letter in word:\n            if letter not in root.children:\n                return False\n            root = root.children[letter]\n        \n        return root.isEndofWord\n        \n        \n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        root = self.root\n\n        for letter in prefix:\n            if letter not in root.children:\n                return False\n            root = root.children[letter]\n            \n        return True\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)"
    },
    {
        "timestamp": "2021-09-20 23:15:56",
        "title": "Combine Two Tables",
        "title_slug": "combine-two-tables",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "5288 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT Person.FirstName, Person.LastName, Address.City, Address.State FROM Person \nLEFT JOIN Address on Person.PersonId = Address.PersonId"
    },
    {
        "timestamp": "2021-09-19 23:45:22",
        "title": "Insert into a Binary Search Tree",
        "title_slug": "insert-into-a-binary-search-tree",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "171 ms",
        "memory": "16.8 MB",
        "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n        new_node = TreeNode(val)\n        if not root:\n            return new_node\n        else:\n            current = root\n            while True:\n                if val < current.val:\n                    if not current.left:\n                        current.left = new_node\n                        return root\n                    current = current.left\n                else:\n                    if not current.right:\n                        current.right = new_node\n                        return root\n                    current = current.right\n            \n\n\n"
    },
    {
        "timestamp": "2021-09-18 15:34:57",
        "title": "Count Number of Pairs With Absolute Difference K",
        "title_slug": "count-number-of-pairs-with-absolute-difference-k",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "252 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def countKDifference(self, nums: List[int], k: int) -> int:\n        times = 0\n\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if abs(nums[i] - nums[j]) == k:\n                    times += 1\n        return times\n"
    },
    {
        "timestamp": "2021-09-16 12:54:39",
        "title": "Intersection of Two Arrays",
        "title_slug": "intersection-of-two-arrays",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "58 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return set(nums1).intersection(nums2)"
    },
    {
        "timestamp": "2021-09-16 12:52:50",
        "title": "Intersection of Two Arrays II",
        "title_slug": "intersection-of-two-arrays-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "85 ms",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        intersection = []\n        for i in nums2:\n            if i in nums1:\n                intersection.append(nums1.pop(nums1.index(i)))\n        return intersection\n\n"
    },
    {
        "timestamp": "2021-09-15 14:56:53",
        "title": "First Unique Character in a String",
        "title_slug": "first-unique-character-in-a-string",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "4964 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        hmap = {}\n    \n        for i in range(len(s)):\n            hmap[s[i]] = i\n            if s.count(s[i]) == 1:\n                return i\n        return -1 \n"
    },
    {
        "timestamp": "2021-09-15 14:48:57",
        "title": "Implement Queue using Stacks",
        "title_slug": "implement-queue-using-stacks",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.2 MB",
        "code": "class MyQueue:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.s1 = []\n        self.s2 = []\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        Time: O(1)\n        \"\"\"\n        self.s1.append(x)\n        \n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        Time: Amortized O(1), worst case O(n)\n        \"\"\"\n        if not self.s2:\n            while self.s1:\n                self.s2.append(self.s1.pop())\n        return self.s2.pop()\n        \n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        if not self.s2:\n            return self.s1[0]\n        else:\n            return self.s2[-1]\n        \n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        return not self.s1 and not self.s2\n\n        \n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"
    },
    {
        "timestamp": "2021-09-13 20:02:57",
        "title": "Valid Anagram",
        "title_slug": "valid-anagram",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "105 ms",
        "memory": "15.1 MB",
        "code": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        return sorted(s) == sorted(t)\n"
    },
    {
        "timestamp": "2021-09-12 20:29:39",
        "title": "Rotate Array",
        "title_slug": "rotate-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "5221 ms",
        "memory": "25.5 MB",
        "code": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        for _ in range(k):\n            nums.insert(0, nums.pop(-1))\n            "
    },
    {
        "timestamp": "2021-09-12 17:53:15",
        "title": "Remove Duplicates from Sorted List",
        "title_slug": "remove-duplicates-from-sorted-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "54 ms",
        "memory": "14.2 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        first = head\n        while first and first.next:\n            if first.val == first.next.val:\n                first.next = first.next.next\n            else:\n                first = first.next\n        \n        return head\n                \n    \n        "
    },
    {
        "timestamp": "2021-09-11 19:04:48",
        "title": "First Unique Character in a String",
        "title_slug": "first-unique-character-in-a-string",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "4944 ms",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        hmap = {}\n    \n        for i in range(len(s)):\n            if s.count(s[i]) == 1:\n                hmap[s[i]] = i\n                return i\n        return -1 \n"
    },
    {
        "timestamp": "2021-09-11 06:54:50",
        "title": "Implement Queue using Stacks",
        "title_slug": "implement-queue-using-stacks",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.4 MB",
        "code": "class MyQueue:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.s1 = []\n        self.s2 = []\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n        self.s1.append(x)\n        \n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        \"\"\"\n        if not self.s2:\n            while self.s1:\n                self.s2.append(self.s1.pop())\n        return self.s2.pop()\n        \n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        if not self.s2:\n            while self.s1:\n                self.s2.append(self.s1.pop())\n        return self.s2[-1]\n        \n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        return not self.s1 and not self.s2\n        \n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"
    },
    {
        "timestamp": "2021-09-09 20:38:28",
        "title": "Reverse Linked List",
        "title_slug": "reverse-linked-list",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "50 ms",
        "memory": "15.7 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        prev = None \n        while head:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n        return prev"
    },
    {
        "timestamp": "2021-09-05 21:40:04",
        "title": "Contains Duplicate II",
        "title_slug": "contains-duplicate-ii",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "576 ms",
        "memory": "28.2 MB",
        "code": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        ht = {}\n\n        for i in range(len(nums)):\n            if nums[i] in ht and abs(i - ht[nums[i]]) <= k:\n                return True\n            ht[nums[i]] = i\n\n        return False\n"
    },
    {
        "timestamp": "2021-09-05 20:30:58",
        "title": "Majority Element",
        "title_slug": "majority-element",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "164 ms",
        "memory": "15.5 MB",
        "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        count = 0\n        candidate = 0\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        \n        return candidate"
    },
    {
        "timestamp": "2021-09-05 18:53:36",
        "title": "Majority Element",
        "title_slug": "majority-element",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "144 ms",
        "memory": "15.6 MB",
        "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        nums.sort()\n        return nums[len(nums)//2]"
    },
    {
        "timestamp": "2021-09-03 20:59:07",
        "title": "Majority Element",
        "title_slug": "majority-element",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "160 ms",
        "memory": "15.6 MB",
        "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        set1 = list(set(nums))\n        n = len(set1)\n\n        for i in range(n):\n            if nums.count(set1[i]) > (len(nums) / 2):\n                return set1[i]"
    },
    {
        "timestamp": "2021-09-03 11:43:15",
        "title": "Maximum Subarray",
        "title_slug": "maximum-subarray",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "74 ms",
        "memory": "15 MB",
        "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        max_current = max_global = nums[0]\n        \n        for i in range(1, len(nums)):\n            max_current = max(nums[i], max_current + nums[i])\n            if max_current > max_global:\n                max_global = max_current\n        return max_global"
    },
    {
        "timestamp": "2021-09-03 11:42:37",
        "title": "Contains Duplicate",
        "title_slug": "contains-duplicate",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "156 ms",
        "memory": "20.1 MB",
        "code": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums) != len(set(nums))\n\n\n\n\n        \n        "
    },
    {
        "timestamp": "2021-08-26 16:47:03",
        "title": "Maximum Subarray",
        "title_slug": "maximum-subarray",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "88 ms",
        "memory": "14.9 MB",
        "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        max_current = max_global = nums[0]\n        \n        for i in range(1, len(nums)):\n            max_current = max(nums[i], max_current + nums[i])\n            if max_current > max_global:\n                max_global = max_current\n        return max_global"
    },
    {
        "timestamp": "2021-08-24 20:49:28",
        "title": "Contains Duplicate",
        "title_slug": "contains-duplicate",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "112 ms",
        "memory": "19.9 MB",
        "code": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums) != len(set(nums))\n\n\n\n\n        \n        "
    },
    {
        "timestamp": "2021-08-24 19:02:53",
        "title": "Move Zeroes",
        "title_slug": "move-zeroes",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "40 ms",
        "memory": "15.4 MB",
        "code": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        j = 0  # last non-zero element found\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                nums[j], nums[i] = nums[i], nums[j]\n                j += 1 \n "
    },
    {
        "timestamp": "2021-08-11 22:46:05",
        "title": "Number of Good Pairs",
        "title_slug": "number-of-good-pairs",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "40 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        count = 0\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[i] == nums[j] and i < j:\n                    count += 1\n        \n        return count"
    },
    {
        "timestamp": "2021-08-07 17:22:23",
        "title": "Length of Last Word",
        "title_slug": "length-of-last-word",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "37 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        return len(s.split()[-1])"
    },
    {
        "timestamp": "2021-08-07 17:06:07",
        "title": "Valid Palindrome",
        "title_slug": "valid-palindrome",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "14.6 MB",
        "code": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        new_string = \"\"\n\n        for i in s.lower():\n            if i.isalnum():\n                new_string += i\n\n        return new_string == new_string[::-1]"
    },
    {
        "timestamp": "2021-08-06 18:17:08",
        "title": "Best Time to Buy and Sell Stock",
        "title_slug": "best-time-to-buy-and-sell-stock",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "1008 ms",
        "memory": "25.2 MB",
        "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:  \n        max_profit = 0\n        minimum = max(prices)\n\n        for i in range(len(prices)):\n            if prices[i] < minimum:\n                minimum = prices[i]\n            else:\n                max_profit = max(max_profit, prices[i] - minimum)\n\n        return max_profit   "
    },
    {
        "timestamp": "2021-08-05 12:02:19",
        "title": "Determine if String Halves Are Alike",
        "title_slug": "determine-if-string-halves-are-alike",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def halvesAreAlike(self, s: str) -> bool:\n        mid = len(s)//2        # mid of string\n        left = s[:mid]\n        right = s[mid:]\n        vowels = ('a','e','i','o','u','A', 'E', 'I', 'O', 'U')\n        left_count = 0\n        right_count = 0 \n        for i in vowels:\n            if i in left and i not in right:\n                left_count += left.count(i)\n            elif i in right and i not in left:\n                right_count += right.count(i)\n            elif i in left and right:\n                left_count += left.count(i)\n                right_count += right.count(i)\n                \n        return left_count == right_count"
    },
    {
        "timestamp": "2021-08-04 21:34:31",
        "title": "Kids With the Greatest Number of Candies",
        "title_slug": "kids-with-the-greatest-number-of-candies",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "36 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:\n        result = list(map(lambda x: True if x+extraCandies >=\n                  max(candies) else False, candies))\n        return result"
    },
    {
        "timestamp": "2021-08-04 21:08:51",
        "title": "Shuffle the Array",
        "title_slug": "shuffle-the-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def shuffle(self, nums: List[int], n: int) -> List[int]:\n        i = 0\n        j = n\n\n        new_array = []\n\n        while len(new_array) < 2*n:\n            new_array.append(nums[i])\n            new_array.append(nums[j])\n            i += 1\n            j += 1\n\n        return new_array"
    },
    {
        "timestamp": "2021-07-27 21:18:44",
        "title": "Concatenation of Array",
        "title_slug": "concatenation-of-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "76 ms",
        "memory": "14.7 MB",
        "code": "class Solution:\n    def getConcatenation(self, nums: List[int]) -> List[int]:\n        nums = 2 * nums\n        return nums"
    },
    {
        "timestamp": "2021-07-26 20:59:22",
        "title": "Search Insert Position",
        "title_slug": "search-insert-position",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "48 ms",
        "memory": "14.9 MB",
        "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        for i in range(len(nums)):\n            if target not in nums:\n                if target > max(nums):\n                    return nums.index(max(nums)) + 1\n                elif target < nums[i]:\n                    return i\n            else:\n                return nums.index(target)"
    },
    {
        "timestamp": "2021-07-25 17:58:51",
        "title": "Single Number",
        "title_slug": "single-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "5700 ms",
        "memory": "16.7 MB",
        "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        for i in range(len(nums)):\n            if nums.count(nums[i]) == 1:\n                return nums[i]"
    },
    {
        "timestamp": "2021-07-25 14:11:02",
        "title": "Two Sum",
        "title_slug": "two-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "60 ms",
        "memory": "15.4 MB",
        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        ht = dict()\n        \n        for i in range(len(nums)):\n            if nums[i] in ht:\n                return [ht[nums[i]], i]\n            else:\n                ht[target - nums[i]] = i"
    },
    {
        "timestamp": "2021-07-24 20:01:24",
        "title": "Two Sum",
        "title_slug": "two-sum",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "8328 ms",
        "memory": "14.9 MB",
        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[i] + nums[j] == target and i != j:\n                    return [i,j]"
    },
    {
        "timestamp": "2021-07-19 17:40:19",
        "title": "Find Numbers with Even Number of Digits",
        "title_slug": "find-numbers-with-even-number-of-digits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "48 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        digits = list(map(lambda x: len(str(x)), nums))\n        \n        count = 0\n        for i in range(len(digits)):\n            if digits[i] % 2 == 0:\n                count += 1\n        return count"
    },
    {
        "timestamp": "2021-07-19 17:16:30",
        "title": "Max Consecutive Ones",
        "title_slug": "max-consecutive-ones",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "384 ms",
        "memory": "14.4 MB",
        "code": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        most = 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                count += 1\n            elif nums[i] != 1:\n                count = 0\n            \n            most = max(most, count)\n        \n        return most\n            "
    },
    {
        "timestamp": "2021-05-26 23:11:56",
        "title": "To Lower Case",
        "title_slug": "to-lower-case",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def toLowerCase(self, s: str) -> str:\n        return s.lower()"
    },
    {
        "timestamp": "2021-05-07 12:23:56",
        "title": "Power of Three",
        "title_slug": "power-of-three",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "84 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        if n < 1:\n            return False\n    \n        result = math.log(abs(n), 3) \n        return True if n == pow(3, round(result)) else False\n"
    },
    {
        "timestamp": "2021-05-03 10:34:23",
        "title": "Running Sum of 1d Array",
        "title_slug": "running-sum-of-1d-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "14.6 MB",
        "code": "class Solution:\n    def runningSum(self, nums: List[int]) -> List[int]:\n        lst = []\n        for i in range(1,len(nums)+1):\n            total = sum(nums[:i])\n            lst.append(total)\n        return lst"
    },
    {
        "timestamp": "2021-05-01 00:24:13",
        "title": "Big Countries",
        "title_slug": "big-countries",
        "status": "Accepted",
        "lang": "mssql",
        "runtime": "1454 ms",
        "memory": "0B",
        "code": "/* Write your T-SQL query statement below */\nSELECT name, population, area FROM World\nWHERE area > 3000000 or population > 25000000"
    },
    {
        "timestamp": "2021-05-01 00:19:40",
        "title": "Binary Search",
        "title_slug": "binary-search",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "232 ms",
        "memory": "15.4 MB",
        "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        low = 0\n        high = len(nums) - 1\n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            elif nums[mid] < target:\n                low = mid + 1\n                \n            else:\n                high = mid - 1\n                \n        return -1"
    },
    {
        "timestamp": "2021-04-29 12:38:47",
        "title": "Find First and Last Position of Element in Sorted Array",
        "title_slug": "find-first-and-last-position-of-element-in-sorted-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "92 ms",
        "memory": "15.5 MB",
        "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        left = self.binarySearch(nums, target, True)\n        right = self.binarySearch(nums, target, False)\n        return [left, right]\n        \n    def binarySearch(self, data, target, LeftBias):\n        low = 0\n        high = len(data) - 1\n        i = -1\n        while low <= high:\n            mid = low + (high - low) // 2\n            if data[mid] > target:\n                high = mid - 1\n            elif data[mid] < target:\n                low = mid + 1\n            else:\n                i = mid\n                if LeftBias:\n                    high = mid - 1\n                else:\n                    low = mid + 1 \n        return i\n        \n        \n    "
    },
    {
        "timestamp": "2021-04-29 12:38:15",
        "title": "Find First and Last Position of Element in Sorted Array",
        "title_slug": "find-first-and-last-position-of-element-in-sorted-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "84 ms",
        "memory": "15.5 MB",
        "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        left = self.binarySearch(nums, target, True)\n        right = self.binarySearch(nums, target, False)\n        return [left, right]\n        \n    def binarySearch(self, data, target, LeftBias):\n        low = 0\n        high = len(data) - 1\n        i = -1\n        while low <= high:\n            mid = low + (high - low) // 2\n            if data[mid] > target:\n                high = mid - 1\n            elif data[mid] < target:\n                low = mid + 1\n            else:\n                i = mid\n                if LeftBias:\n                    high = mid - 1\n                else:\n                    low = mid + 1 \n        return i"
    },
    {
        "timestamp": "2021-04-28 11:34:22",
        "title": "Power of Three",
        "title_slug": "power-of-three",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "84 ms",
        "memory": "14 MB",
        "code": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        if n < 1:\n            return False\n    \n        result = math.log(abs(n), 3) \n        return True if n == pow(3, round(result)) else False\n"
    },
    {
        "timestamp": "2021-04-28 11:29:03",
        "title": "Power of Three",
        "title_slug": "power-of-three",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "72 ms",
        "memory": "14.2 MB",
        "code": "import math\n\nclass Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        if n == 0:\n            return False\n    \n        result = math.log(abs(n), 3) \n        if n == pow(3, round(result)):\n            return True\n        else:\n            return False\n"
    },
    {
        "timestamp": "2021-04-25 15:03:54",
        "title": "Valid Parentheses",
        "title_slug": "valid-parentheses",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def __init__(self):\n        self._items = []\n    \n    def push(self, value):\n        self._items.append(value)\n        \n    def pop(self):\n        return self._items.pop()\n    \n    def isEmpty(self):\n        return len(self._items) == 0\n        \n    def isValid(self, s: str) -> bool:\n        lefty = '({['\n        righty = ')}]'\n        for char in s:\n            if char in lefty:\n                self.push(char)\n            elif char in righty:\n                if self.isEmpty():\n                    return False\n                if righty.index(char) != lefty.index(self.pop()):\n                    return False\n        \n        return self.isEmpty()"
    },
    {
        "timestamp": "2021-04-25 14:52:58",
        "title": "Min Stack",
        "title_slug": "min-stack",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "592 ms",
        "memory": "18.2 MB",
        "code": "class MinStack:\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self._items = []\n\n    def push(self, val: int) -> None:\n        self._items.append(val)\n\n    def pop(self) -> None:\n        return self._items.pop()\n\n    def top(self) -> int:\n        return self._items[-1]\n\n    def getMin(self) -> int:\n        return min(self._items)\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()"
    },
    {
        "timestamp": "2021-04-25 14:49:23",
        "title": "Implement Stack using Queues",
        "title_slug": "implement-stack-using-queues",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.3 MB",
        "code": "class MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self._items = []       \n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"\n        self._items.append(x)\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        \"\"\"\n        return self._items.pop()\n\n    def top(self) -> int:\n        \"\"\"\n        Get the top element.\n        \"\"\"\n        return self._items[-1]\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the stack is empty.\n        \"\"\"\n        return len(self._items) == 0\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()"
    },
    {
        "timestamp": "2021-04-20 21:34:54",
        "title": "Determine if String Halves Are Alike",
        "title_slug": "determine-if-string-halves-are-alike",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def halvesAreAlike(self, s: str) -> bool:\n        mid = len(s)//2        # mid of string\n        left = s[:mid]\n        right = s[mid:]\n        vowels = ('a','e','i','o','u','A', 'E', 'I', 'O', 'U')\n        left_count = 0\n        right_count = 0 \n        for i in vowels:\n            if i in left and i not in right:\n                left_count += left.count(i)\n            elif i in right and i not in left:\n                right_count += right.count(i)\n            elif i in left and right:\n                left_count += left.count(i)\n                right_count += right.count(i)\n\n        if left_count == right_count:\n            return True\n        else:\n            return False"
    },
    {
        "timestamp": "2021-04-18 00:28:47",
        "title": "Sum of Unique Elements",
        "title_slug": "sum-of-unique-elements",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "28 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def sumOfUnique(self, nums: List[int]) -> int:\n        unique = 0\n        if len(nums) == 1:\n            return nums[0]\n        for i in range(0,len(nums)):\n            if nums[i] != nums[i-1] and nums.count(nums[i]) == 1:\n               unique+=nums[i]\n        return unique\n"
    },
    {
        "timestamp": "2021-04-17 17:39:58",
        "title": "Minimum Operations to Make the Array Increasing",
        "title_slug": "minimum-operations-to-make-the-array-increasing",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "236 ms",
        "memory": "15.1 MB",
        "code": "class Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        oper = 0\n        for i in range(len(nums)-1):\n            if nums[i] >= nums[i+1]:\n                a = (nums[i]+1) - nums[i+1]\n                nums[i+1] += a\n                oper += a\n        return oper"
    },
    {
        "timestamp": "2021-04-15 18:37:54",
        "title": "Fibonacci Number",
        "title_slug": "fibonacci-number",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "936 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def fib(self, n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n-1) + self.fib(n-2)\n        "
    },
    {
        "timestamp": "2021-04-13 13:11:33",
        "title": "Sign of the Product of an Array",
        "title_slug": "sign-of-the-product-of-an-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def arraySign(self, nums: List[int]) -> int:\n        product=1\n        for i in nums:\n            product*=i\n\n        if product > 0:\n            return 1\n        elif product == 0:\n            return 0\n        else:\n            return -1\n            "
    },
    {
        "timestamp": "2021-04-09 19:41:37",
        "title": "Remove Element",
        "title_slug": "remove-element",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        n = len(nums)\n        j = 0\n        for i in range(0, n):\n            if nums[i] != val:\n                nums[j] = nums[i]\n                j+=1\n        return j"
    },
    {
        "timestamp": "2021-04-09 19:25:29",
        "title": "Remove Element",
        "title_slug": "remove-element",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "32 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        n = len(nums)\n        j = 0\n        for i in range(0, n):\n            if nums[i] != val:\n                nums[j] = nums[i]\n                j+=1\n        return j"
    },
    {
        "timestamp": "2021-03-30 16:16:30",
        "title": "Find Numbers with Even Number of Digits",
        "title_slug": "find-numbers-with-even-number-of-digits",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "56 ms",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        digits = list(map(lambda x: len(str(x)), nums))\n        count=0\n        for i in range(len(digits)):\n            if digits[i] % 2 == 0:\n                count+=1\n        return count\n            \n        \n            \n            \n            "
    },
    {
        "timestamp": "2021-03-30 15:19:43",
        "title": "Max Consecutive Ones",
        "title_slug": "max-consecutive-ones",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "364 ms",
        "memory": "14.3 MB",
        "code": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        most=0\n        consec=0\n        for i in range(0, len(nums)):\n            if nums[i] == 1:\n                consec+=1\n            elif nums[i] != 1:\n                consec=0\n            most = max(most, consec)\n        return most\n                "
    },
    {
        "timestamp": "2021-03-27 21:56:02",
        "title": "Squares of a Sorted Array",
        "title_slug": "squares-of-a-sorted-array",
        "status": "Accepted",
        "lang": "python3",
        "runtime": "224 ms",
        "memory": "16.2 MB",
        "code": "class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        squared_numbers = list(map(lambda x: x**2, nums))\n        return sorted(squared_numbers)"
    }
]